# Add apps
Source: https://docs.whop.com/add-apps

Learn how to add apps to your whop

Apps are the building blocks for your business on Whop. 

Here’s how it works: You create your own whop, then pick and choose which apps to include. Want a chat room for your community? Add the **Chat** app. Selling a course? Add the **Course** app. 

There are hundreds of apps to choose from, and you can add any of them from the Whop App Store.

## How to add apps to your whop

<Steps>
  <Step title="Go to the Whop App Store" iconType="regular" titleSize="h3">
    You can find all the available apps in the Whop App Store.

    * Inside your whop, click **Add app**
    * Browse the different categories of apps to find the apps your members will find most valuable

    Learn more about what apps you should add to your whop [here](/apps/docs/whop-apps/what-are-whop-apps).
  </Step>

  <Step title="Add apps to your whop" iconType="regular" stepNumber={2} titleSize="h3">
    When you find an app you'd like to add, click **Add**.

    You will see the app has been added in the left-hand column of your whop.

    <Tip>
      You can add as many apps as you want, and add each app as many times as you'd like (for example, you can add the Chat app multiple times to create different chat groups for different topics).
    </Tip>
  </Step>
</Steps>

## Configure the app settings

Each app comes with its own settings that let you control the experience and functionality.

* **Chat app**: Choose who can post and react, ban links or images
* **Courses app**: Upload videos, add files, create quizzes
* **Events app**: Add upcoming events with details and links

To customize any app:

1. Click on the app in your Whop
2. Click the **Configure** settings

<Tip>
  Only you (and other team members) can see and edit the configuration settings of each app.
</Tip>

## Learn more about Whop apps

<CardGroup cols={2}>
  <Card title="What are Whop apps?" icon="block-brick" href="/whop-apps/what-are-whop-apps">
    Learn more about what Whop apps are and how to use them.
  </Card>

  <Card title="The Whop App Store" icon="store" href="/whop-apps/whop-app-store">
    Learn more about the Whop App Store.
  </Card>
</CardGroup>

## Next steps

To launch your internet business, make sure you’ve completed the rest of the setup steps:

<CardGroup cols={2}>
  <Card title="Set up pricing" icon="dollar-sign" href="/set-up-products-pricing">
    Choose your pricing model and what members get when they join.
  </Card>

  <Card title="Set up your store page" icon="store" href="/set-up-store-page">
    Your store page is where visitors come to learn about your offer.
  </Card>
</CardGroup>


# Create invoice
Source: https://docs.whop.com/api-reference/invoices/create-invoice

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /invoices
Creates an invoice

Required permissions:
 - `invoice:create`
 - `plan:basic:read`



# List invoices
Source: https://docs.whop.com/api-reference/invoices/list-invoices

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /invoices
Lists invoices

Required permissions:
 - `invoice:basic:read`
 - `plan:basic:read`



# Retrieve invoice
Source: https://docs.whop.com/api-reference/invoices/retrieve-invoice

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /invoices/{id}
Retrieves an invoice by ID or token

Required permissions:
 - `invoice:basic:read`
 - `plan:basic:read`



# Void invoice
Source: https://docs.whop.com/api-reference/invoices/void-invoice

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /invoices/{id}/void
Void an invoice

Required permissions:
 - `invoice:update`



# List payments
Source: https://docs.whop.com/api-reference/payments/list-payments

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /payments
Lists payments

Required permissions:
 - `payment:basic:read`
 - `plan:basic:read`
 - `access_pass:basic:read`
 - `member:email:read`
 - `member:basic:read`
 - `member:phone:read`
 - `promo_code:basic:read`



# Payment failed
Source: https://docs.whop.com/api-reference/payments/payment-failed

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook payment.failed
Sent when a payment is failed

Required permissions:
 - `payment:basic:read`
 - `plan:basic:read`
 - `access_pass:basic:read`
 - `member:email:read`
 - `member:basic:read`
 - `member:phone:read`
 - `promo_code:basic:read`



# Payment pending
Source: https://docs.whop.com/api-reference/payments/payment-pending

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook payment.pending
Sent when a payment is pending

Required permissions:
 - `payment:basic:read`
 - `plan:basic:read`
 - `access_pass:basic:read`
 - `member:email:read`
 - `member:basic:read`
 - `member:phone:read`
 - `promo_code:basic:read`



# Payment succeeded
Source: https://docs.whop.com/api-reference/payments/payment-succeeded

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook payment.succeeded
Sent when a payment is succeeded

Required permissions:
 - `payment:basic:read`
 - `plan:basic:read`
 - `access_pass:basic:read`
 - `member:email:read`
 - `member:basic:read`
 - `member:phone:read`
 - `promo_code:basic:read`



# Refund payment
Source: https://docs.whop.com/api-reference/payments/refund-payment

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /payments/{id}/refund
Refunds a payment

Required permissions:
 - `payment:manage`
 - `plan:basic:read`
 - `access_pass:basic:read`
 - `member:email:read`
 - `member:basic:read`
 - `member:phone:read`
 - `promo_code:basic:read`



# Retrieve payment
Source: https://docs.whop.com/api-reference/payments/retrieve-payment

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /payments/{id}
Retrieves a payment by ID

Required permissions:
 - `payment:basic:read`
 - `plan:basic:read`
 - `access_pass:basic:read`
 - `member:email:read`
 - `member:basic:read`
 - `member:phone:read`
 - `promo_code:basic:read`



# Retry payment
Source: https://docs.whop.com/api-reference/payments/retry-payment

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /payments/{id}/retry
Retries a payment

Required permissions:
 - `payment:manage`
 - `plan:basic:read`
 - `access_pass:basic:read`
 - `member:email:read`
 - `member:basic:read`
 - `member:phone:read`
 - `promo_code:basic:read`



# Void payment
Source: https://docs.whop.com/api-reference/payments/void-payment

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /payments/{id}/void
Voids a payment

Required permissions:
 - `payment:manage`
 - `plan:basic:read`
 - `access_pass:basic:read`
 - `member:email:read`
 - `member:basic:read`
 - `member:phone:read`
 - `promo_code:basic:read`



# Create plan
Source: https://docs.whop.com/api-reference/plans/create-plan

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /plans
Create a new Plan

Required permissions:
 - `plan:create`
 - `access_pass:basic:read`
 - `plan:basic:read`



# Delete plan
Source: https://docs.whop.com/api-reference/plans/delete-plan

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml delete /plans/{id}
Delete an existing Plan

Required permissions:
 - `plan:delete`



# List plans
Source: https://docs.whop.com/api-reference/plans/list-plans

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /plans
Lists plans for a company

Required permissions:
 - `plan:basic:read`



# Retrieve plan
Source: https://docs.whop.com/api-reference/plans/retrieve-plan

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /plans/{id}
Retrieves a plan by ID

Required permissions:
 - `plan:basic:read`



# Update plan
Source: https://docs.whop.com/api-reference/plans/update-plan

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /plans/{id}
Update an existing Plan

Required permissions:
 - `plan:update`
 - `access_pass:basic:read`
 - `plan:basic:read`



# Create product
Source: https://docs.whop.com/api-reference/products/create-product

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /products
Creates a new Product

Required permissions:
 - `access_pass:create`
 - `access_pass:basic:read`



# Delete product
Source: https://docs.whop.com/api-reference/products/delete-product

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml delete /products/{id}
Deletes an existing Product

Required permissions:
 - `access_pass:delete`



# List products
Source: https://docs.whop.com/api-reference/products/list-products

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /products
Lists products for a company

Required permissions:
 - `access_pass:basic:read`



# Retrieve product
Source: https://docs.whop.com/api-reference/products/retrieve-product

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /products/{id}
Retrieves a product by ID or route

Required permissions:
 - `access_pass:basic:read`



# Update product
Source: https://docs.whop.com/api-reference/products/update-product

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /products/{id}
Updates an existing Product

Required permissions:
 - `access_pass:update`
 - `access_pass:basic:read`



# Getting started
Source: https://docs.whop.com/apps/api/getting-started

Create an app and get your API keys

## Getting your API key

1. Go to [your developer dashboard](https://whop.com/dashboard/developer).

2. Click the **Create app** button and give your app a name. *You can change this name later.*

3. Your API key is the hidden text after `WHOP_API_KEY` in the `Environment variables` section.

   Use the reveal button to show the key, copy it and keep it in a safe place.

   You will need it to make API calls.

## Making API calls

Our public api is available at `https://api.whop.com/api/v1`

You can test the api by using curl to fetch your public user profile data:

```bash  theme={null}
# replace "j" with your own whop username
curl https://api.whop.com/api/v1/users/j
```

To make authenticated requests you need to include your API key in the `Authorization` header using the `Bearer` scheme:

```bash  theme={null}
# replace "YOUR_API_KEY" with your real API key
curl https://api.whop.com/api/v1/payments/pay_xxxxxxxxxxxxxx \
    -H "Authorization: Bearer YOUR_API_KEY"
```

## Using an SDK

We recommending using our SDKs to make API calls in your apps. We currently support

* [Typescript / Javascript](https://npmjs.com/package/@whop/sdk) / [Docs](https://github.com/whopio/whopsdk-typescript)

  ```bash  theme={null}
  pnpm install @whop/sdk
  ```

* [Python](https://pypi.org/project/whop-sdk) / [Docs](https://github.com/whopio/whopsdk-python)

  ```bash  theme={null}
  pip install whop-sdk
  ```

* [Ruby](https://rubygems.org/gems/whop-sdk) / [Docs](https://github.com/whopio/whopsdk-ruby)

  ```bash  theme={null}
  gem install whop-sdk
  ```

## Example usage

<Note>
  Make sure you app has the required permissions to make api calls. See
  [Permissions](/apps/api/permissions) for more information.
</Note>

<CodeGroup>
  ```typescript Typescript theme={null}
  import Whop from "@whop/sdk";

  const client = new Whop({
    appID: "app_xxxxxxxxxxxxxx",
    apiKey: process.env["WHOP_API_KEY"], // This is the default and can be omitted
  });

  const page = await client.payments.list({ company_id: "biz_xxxxxxxxxxxxxx" });
  const paymentListResponse = page.data[0];

  console.log(paymentListResponse.id);
  ```

  ```python Python theme={null}
  import os
  from whop_sdk import Whop

  client = Whop(
      app_id="app_xxxxxxxxxxxxxx",
      api_key=os.environ.get("WHOP_API_KEY"),  # This is the default and can be omitted
  )

  page = client.payments.list(
      company_id="biz_xxxxxxxxxxxxxx",
  )
  print(page.data)
  ```

  ```ruby Ruby theme={null}
  require "bundler/setup"
  require "whop_sdk"

  whop = WhopSDK::Client.new(
    api_key: ENV["WHOP_API_KEY"], # This is the default and can be omitted
    app_id: "app_xxxxxxxxxxxxxx"
  )

  page = whop.payments.list(company_id: "biz_xxxxxxxxxxxxxx")

  puts(page.id)
  ```
</CodeGroup>


# Permissions
Source: https://docs.whop.com/apps/api/permissions

Configure the permissions that your app needs

To retrieve private data and perform actions on behalf of companies, your app needs to be installed on the company.

A creator can install your app by finding it in the app store, or by visiting your "direct install" link
which looks like: `https://whop.com/apps/app_xxxxxxxxx` (where `app_xxxxxxxxx` is the id of your app).

Your app can only make calls if it has the required permissions for the api call.
Every endpoint documents it's required permissions in the api reference.

<Note>
  We are working on a full OAuth based permission mode that will allow apps to
  request permissions from users directly and operate on their behalf.
</Note>

## Request permissions

<Warning>
  The permissions flow is still required even if you are trying to access data
  on your own company. This will ensure your app works the same on your company
  as well as when it is installed by others.
</Warning>

<Steps>
  <Step title="Go to your app's permissions settings">
    1. Go to the [developer dashboard](https://whop.com/dashboard/developer)
    2. Select or create an app
    3. Click on the **Permissions** tab

    <Frame>
            <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=514a98987e714d5a2542b3d7665020f7" alt="Permissions Settings" data-og-width="2120" width="2120" data-og-height="722" height="722" data-path="images/app-permissions-settings.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=9e74894609d45a0bbe2857c76cc00399 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=04be81b598e282fd0359d8c8793e90bc 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=201f0eac41e07e07a10f98217abf7b70 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=2d20bb743be0fc48d2795ea8cb3ed381 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=9c90e5c4b1aab454c458ecf223c1aaad 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=45a5a4120e250288d1fedfbaa93b652d 2500w" />
    </Frame>
  </Step>

  <Step title="Add permissions">
    1. Click on **Add permissions** 2. Select the permissions you want to add 3.
       Confirm by clicking **Add**
  </Step>

  <Step title="Configure each permission">
    1. Write a short explanation for why your app needs the permission
    2. Choose whether the permission is required or optional. Creators will be able to toggle off optional permissions during install.

    <Frame>
            <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=93ec46a13be088ad236a7fe69f6f6ad2" alt="Permissions Justification" data-og-width="2120" width="2120" data-og-height="722" height="722" data-path="images/app-permissions-settings-justification.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=23d4c43d6b0499fa1692f76e629dfe2d 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=1e5cec827e75f1c00dc52ff62a3a1bcf 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=0425ca1719e908d865eea461537c9010 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=274d43548eb5280cb041102819a6e519 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=00b419d2d18a78ccc91b4094da7c20e0 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=2fa42ef6af92e7ea478efa883f5ca5b5 2500w" />
    </Frame>
  </Step>

  <Step title="Save your permissions">
    <Frame>
            <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=683b42f4dcfed0eeee535d82dcce3e5f" alt="Save Permissions Settings" data-og-width="1074" width="1074" data-og-height="178" height="178" data-path="images/app-permissions-settings-save.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=6d7cb244e974db55fb45234cfe1a8691 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=34c1a0de915a5fffd8fb13098cd7a971 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=cedf493c408909e1d3f6559c68960e68 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=f37453116023135eccdf0f4967bdebbf 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=bf281812d1cbb00d2d86cdbeee713375 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=863e87616324663b894a9b698b7f22da 2500w" />
    </Frame>
  </Step>

  <Step title="Install your app">
    1. Visit your app's direct install link: `https://whop.com/apps/app_xxxxxxxxx/install` (where `app_xxxxxxxxx` is the id of your app).
    2. Select your company you want to install the app on
    3. Approve the permissions you requested
  </Step>
</Steps>

Creators will now need to approve the permissions you requested before installing your app:

<Frame><img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=4b427b52f269ee6b92fcf7434069ad43" alt="Permissions Prompt" data-og-width="2176" width="2176" data-og-height="2222" height="2222" data-path="images/app-permissions-oauth.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=97b15c6bd8a902fa6e011055cb91dfed 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=0849255863e79ab329fcaa466ad5b6f8 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=b530aea102e7985b79d2bbc689e4a45b 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=66504f1c4a3bde37c7689f2a49b5943b 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=478aa77dd200041800559d440e773989 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=24f929bb0528f88df4b5c063e7e5d737 2500w" /></Frame>

## Updating your permissions

You can update your requested permissions anytime. Creators will see a "Re-approve" button when they visit your app.

Creators can always update their granted permissions and re-approve new permissions in their [Authorized apps](https://whop.com/dashboard/settings/authorized-apps) settings page.

To manually navigate to the settings, go to: `Dashboard -> Settings -> Authorized apps`

<video controls className="rounded-xl" src="https://mintcdn.com/whop/_aQsA39rzB5Zq8ZK/how-to-videos/configure-app-permissions.mp4?fit=max&auto=format&n=_aQsA39rzB5Zq8ZK&q=85&s=dff99f10fb43e8914fdcd1b0eb4bd044" data-path="how-to-videos/configure-app-permissions.mp4" />

## FAQ

<AccordionGroup>
  <Accordion title="How many permissions can I request?">
    You can request up to 100 permissions.
  </Accordion>

  <Accordion title="How do I know which permissions I need?">
    You can find the required permissions for each SDK method documented in the
    [SDK reference](/api-reference/payments/list-payments).

    <Frame>
            <img src="https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=141d5a09a00942f216c98d233824dcf9" alt="SDK Reference Permissions" data-og-width="1478" width="1478" data-og-height="358" height="358" data-path="images/sdk-reference-required-permissions.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=280&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=9054080577462932b26190b627bf88be 280w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=560&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=9f607b1f3066694639e436cb2ab964ff 560w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=840&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=c1d4c62b6ad57fb750b398479638d389 840w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=1100&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=71d0d136582da28a0db1247150ee22c3 1100w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=1650&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=6fd43b3ffede9b5ead64879b2222d440 1650w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=2500&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=cbb37841670908b7e1554aa2df76920d 2500w" />
    </Frame>
  </Accordion>

  <Accordion title="Can I request additional permissions afterwards?">
    Yes. You can request additional permissions and the creator will be asked to re-approve them.

    <Note>
      Keep in mind that until the permissions are re-approved, API requests requiring the **newly requested** permissions will fail. Make sure to handle these errors gracefully in your code.
    </Note>

    <Warning>
      When developing your app, make sure you re-approve the permissions yourself in your [Authorized apps](https://whop.com/dashboard/settings/authorized-apps) settings.

      See [Configure your permissions](/apps/api/permissions#updating-your-permissions) for more information.
    </Warning>
  </Accordion>
</AccordionGroup>


# Dashboard View
Source: https://docs.whop.com/apps/app-views/dashboard-view



The dashboard view is a business-focused view that allows creators to access apps directly from their dashboard. This view is designed for apps that help businesses grow and manage operations.

<Frame>
    <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-dashboard-view.jpeg?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=b8c203cd338932683757b8843226da6b" alt="Dashboard View" data-og-width="3416" width="3416" data-og-height="2118" height="2118" data-path="images/app-dashboard-view.jpeg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-dashboard-view.jpeg?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=9809a13953f0a461064c51e9980fb1d2 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-dashboard-view.jpeg?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=338c7aa6a403b7cac3cfcbdc9c85c57f 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-dashboard-view.jpeg?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=98277150a90d1b27a1885cf7828bc7e6 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-dashboard-view.jpeg?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=816cff226a4621d5ca898a667f021b7d 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-dashboard-view.jpeg?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=fd123054c372e355be06bede4c101c4f 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-dashboard-view.jpeg?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=90832ff79b5d9ad8533271d505220b33 2500w" />
</Frame>

## Configure

<Steps>
  <Step title="Go to your app's hosting settings">
    1. Go to the [developer dashboard](https://whop.com/dashboard/developer)
    2. Create a new app or select an existing one
    3. Scroll down to the **Hosting** section

    <Frame>
            <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=428a4fa02ead35e8f4e3de4c368d744b" alt="App Settings" data-og-width="1976" width="1976" data-og-height="726" height="726" data-path="images/app-settings-hosting.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=cca2e1d6c5abd1fd5448c2553f157c02 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=f0306f1e7b23f0a03bab1dd671cbd5c1 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=98d7df9f594b82fba8a4e2c293a1d8f2 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=d6c0d80f233bfc67126a9219ae5379e6 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=aa3dd754d75eab2ba244d642b7f3f618 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=ff85076a24ed473ed46e0aba35b0afca 2500w" />
    </Frame>
  </Step>

  <Step title="Enter your path">
    Enter your path for the dashboard view. The recommended default path is `/dashboard/[companyId]`.

    <Frame>
            <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-view-path.png?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=24abea4609726b03e150679e9081138e" alt="Dashboard View Path" data-og-width="1278" width="1278" data-og-height="180" height="180" data-path="images/dashboard-view-path.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-view-path.png?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=47342d9618db19b75086355b4e1b09b5 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-view-path.png?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=4994f5478e37b605dbbba6afbfaba158 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-view-path.png?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=551dc0c053ebd1d4ea6cdeb72e73f99e 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-view-path.png?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=46eb474ed05efe2174bf3e3aabf7cfbe 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-view-path.png?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=8f233d53f544992e07874b38c8b0a190 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-view-path.png?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=0b3ff1d087228e45c9e672d626bd3955 2500w" />
    </Frame>

    * `[companyId]` is used to provide the accessed company ID: `/dashboard/[companyId] -> /dashboard/biz_***`
    * `[restPath]` is used for deep linking to specific sections of your app: `/dashboard/[companyId]/[restPath] -> /dashboard/biz_***/posts/1`
  </Step>
</Steps>

## Preview

<Steps>
  <Step title="Install your app">
    Click the preview button next to the field, this will take you to your app's dashboard view. You will be prompted to install your app if you haven't already.

    <Frame>
            <img src="https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-dashboard-app-button.png?fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=16043cb9c3553600f4d81942bde76904" alt="Preview App Button" data-og-width="814" width="814" data-og-height="90" height="90" data-path="images/preview-dashboard-app-button.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-dashboard-app-button.png?w=280&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=a46b034bd0772abdfeac5c7a3b70ce4b 280w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-dashboard-app-button.png?w=560&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=5e4bcb206bc7e788dff8cbfdefb8e2b1 560w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-dashboard-app-button.png?w=840&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=32aae01a000aceba54ecc4412fc16481 840w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-dashboard-app-button.png?w=1100&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=05d0ef5a746ef8b60ecd80328e508d91 1100w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-dashboard-app-button.png?w=1650&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=afdde5fddd73878c38bc409b9ead59d9 1650w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-dashboard-app-button.png?w=2500&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=ee928613730b768ca0b3e221f2a4ee3e 2500w" />
    </Frame>

    If you've already installed your app, you can access it from your dashboard under the **apps** section.

    <Frame>
            <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-apps-sidebar-section.png?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=b0ab34c95536596c42f59b51b7dff586" alt="Dashboard Sidebar Apps Section" data-og-width="2048" width="2048" data-og-height="1252" height="1252" data-path="images/dashboard-apps-sidebar-section.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-apps-sidebar-section.png?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=c91f7ed3f11c7534fe9af305b2b8fa64 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-apps-sidebar-section.png?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=abeb881fbc0c1b4a0c5c7018adbd0b12 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-apps-sidebar-section.png?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=0fb0015f5cdf3ce160644b0613c01def 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-apps-sidebar-section.png?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=af571247d2957e7d25eff5995a70797e 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-apps-sidebar-section.png?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=103dac764b91b539de5ca6a023f1d464 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/dashboard-apps-sidebar-section.png?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=0789a47f53b4e6f761cbe0c9bb051bb8 2500w" />
    </Frame>
  </Step>

  <Step title="Set the environment">
    1. Open the dev tools by clicking the **cog** button
    2. Set the environment to **localhost**

    <video controls className="rounded-xl" src="https://mintcdn.com/whop/wmug03bhIwuWRAcH/how-to-videos/dashboard-app-preview-set-localhost.mp4?fit=max&auto=format&n=wmug03bhIwuWRAcH&q=85&s=6f0eb2a0a7c60799a3bae0054697c208" data-path="how-to-videos/dashboard-app-preview-set-localhost.mp4" />
  </Step>
</Steps>

## Validate access

You can check if a user is an authorized member of a company by using the SDK method [checkIfUserHasAccessToCompany](/sdk/api/access/check-if-user-has-access-to-company).

```ts  theme={null}
  const access = await whopSdk.access.checkIfUserHasAccessToCompany({
    companyId: "biz_***",
    userId: "user_***",
  });

  // No access
  // ^? { hasAccess: false, accessLevel: "no_access" }

  // Admin access
  // ^? { hasAccess: true, accessLevel: "admin" }
```

See [Validate company access](/sdk/validate-access#validate-company-access) for more information.

## Examples

* [Next.js](https://github.com/whopio/whop-nextjs-app-template/blob/main/app/dashboard/%5BcompanyId%5D/page.tsx)
* [React Native](https://github.com/whopio/whop-sdk-ts/blob/main/packages/create-react-native/template/src/views/dashboard-view.tsx)


# Discover View
Source: https://docs.whop.com/apps/app-views/discover-view



The discover view is a public-facing view that helps potential users explore what your app offers. This view showcases your app's capabilities and highlights success stories from other communities.

## Configure

<Steps>
  <Step title="Go to your app's hosting settings">
    1. Go to the [developer dashboard](https://whop.com/dashboard/developer)
    2. Create a new app or select an existing one
    3. Scroll down to the **Hosting** section

    <Frame>
            <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=428a4fa02ead35e8f4e3de4c368d744b" alt="App Settings" data-og-width="1976" width="1976" data-og-height="726" height="726" data-path="images/app-settings-hosting.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=cca2e1d6c5abd1fd5448c2553f157c02 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=f0306f1e7b23f0a03bab1dd671cbd5c1 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=98d7df9f594b82fba8a4e2c293a1d8f2 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=d6c0d80f233bfc67126a9219ae5379e6 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=aa3dd754d75eab2ba244d642b7f3f618 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=ff85076a24ed473ed46e0aba35b0afca 2500w" />
    </Frame>
  </Step>

  <Step title="Enter your path">
    Enter your path for the discover view. The recommended default path is `/discover`.

    <Frame>
            <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/discover-view-path.png?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=1d40d472909b6aac575365b814ca119e" alt="Discover View Path" data-og-width="1278" width="1278" data-og-height="180" height="180" data-path="images/discover-view-path.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/discover-view-path.png?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=da754227e871dab16126b42a1a077283 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/discover-view-path.png?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=dfbd6e84f2a7458f6041e71a3999c7a5 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/discover-view-path.png?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=ab9199fc42916771b0625e235f8d1a29 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/discover-view-path.png?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=4e243bac2048b84f9de46d273f346472 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/discover-view-path.png?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=5f229acfd133d0e978865f0073246a62 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/discover-view-path.png?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=91ec6243b5b9a1f342c65d033a780ae0 2500w" />
    </Frame>
  </Step>
</Steps>

## Preview

Click the preview button or access the view at `https://whop.com/discover/app/<app_id>`.

<Frame>
    <img src="https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-discover-view.png?fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=1eee23915957cbd127fe456890d56f1d" alt="Preview Discover View" data-og-width="887" width="887" data-og-height="88" height="88" data-path="images/preview-discover-view.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-discover-view.png?w=280&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=6d85d1670df53e8d14b8aee0544897ff 280w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-discover-view.png?w=560&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=cc8ff719da9a5bb95e1d27cb3a6a97ad 560w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-discover-view.png?w=840&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=a43da85db1bc599a2a5b4ff8ae09337d 840w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-discover-view.png?w=1100&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=ede306f5f26c8e4299b4e04c905d1965 1100w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-discover-view.png?w=1650&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=843e5a1b76f09ed74bed624c87321459 1650w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/preview-discover-view.png?w=2500&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=9d7303ed3be30ac7fbb9b2218ddb8998 2500w" />
</Frame>

## Examples

* [Next.js](https://github.com/whopio/whop-nextjs-app-template/blob/main/app/discover/page.tsx)
* [React Native](https://github.com/whopio/whop-sdk-ts/blob/main/packages/create-react-native/template/src/views/discover-view.tsx)


# Experience View
Source: https://docs.whop.com/apps/app-views/experience-view



The experience view is what users see when they install your app into their Whop and click into it. This is the core functionality of your app - where users interact with your features and services.

<Frame>
    <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-experience-view.jpeg?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=695a5e126942d5b709b641edd3f3a513" alt="Experience View" data-og-width="3416" width="3416" data-og-height="2118" height="2118" data-path="images/app-experience-view.jpeg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-experience-view.jpeg?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=6930c5f89ecd99e0eace8272fa709631 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-experience-view.jpeg?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=2660d60a41ee5054cebb8a19fedad4b8 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-experience-view.jpeg?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=981d11df85e65a9cb1307b3de02b2388 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-experience-view.jpeg?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=4af59f7c195cc2f3f51a3865dd5b3d5f 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-experience-view.jpeg?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=653a624325ea7a3b1eeb53b7995b81d1 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-experience-view.jpeg?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=fc51fda9b39a0c3ebc7c4979199e7c3d 2500w" />
</Frame>

## Configure

<Steps>
  <Step title="Go to your app's hosting settings">
    1. Go to the [developer dashboard](https://whop.com/dashboard/developer)
    2. Create a new app or select an existing one
    3. Scroll down to the **Hosting** section

    <Frame>
            <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=428a4fa02ead35e8f4e3de4c368d744b" alt="App Settings" data-og-width="1976" width="1976" data-og-height="726" height="726" data-path="images/app-settings-hosting.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=cca2e1d6c5abd1fd5448c2553f157c02 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=f0306f1e7b23f0a03bab1dd671cbd5c1 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=98d7df9f594b82fba8a4e2c293a1d8f2 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=d6c0d80f233bfc67126a9219ae5379e6 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=aa3dd754d75eab2ba244d642b7f3f618 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-hosting.png?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=ff85076a24ed473ed46e0aba35b0afca 2500w" />
    </Frame>
  </Step>

  <Step title="Enter your path">
    Enter your path for the experience view. The recommended default path is `/experiences/[experienceId]`.

    <Frame>
            <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/experience-view-path.png?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=09b247eb50e14ee3f0dc4bf5e903d099" alt="Experience View Path" data-og-width="1278" width="1278" data-og-height="180" height="180" data-path="images/experience-view-path.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/experience-view-path.png?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=fc4091a2f50ab6e0287695635054031a 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/experience-view-path.png?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=6df0f55177f6e6b5d329e9aa328c6de9 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/experience-view-path.png?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=edef9475de4860e845a1b2e1e7b3802d 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/experience-view-path.png?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=67d31f35120b6c8a80f7dc6f286e627f 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/experience-view-path.png?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=96f0eb3853ffd4b2ba60a08f2b11465c 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/experience-view-path.png?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=ac16450fa760c934b0a2f40902952a6b 2500w" />
    </Frame>

    * `[experienceId]` is used to provide the accessed experience ID: `/experiences/[experienceId] -> /experiences/exp_***`
    * `[restPath]` is used for deep linking to specific sections of your app: `/experiences/[experienceId]/[restPath] -> /experiences/exp_***/posts/1`
  </Step>
</Steps>

## Preview

<Steps>
  <Step title="Install your app">
    Click the install button or copy the installation link and visit it in your browser. You will be prompted to install your app into your whop.

    <Frame>
            <img src="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-install-app-button.png?fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=9a5bbb5ab8d08cfb419aaa64b0754765" alt="Install App Button" data-og-width="872" width="872" data-og-height="87" height="87" data-path="images/app-settings-install-app-button.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-install-app-button.png?w=280&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=568d69af8fde6837c9ba7b94610b913c 280w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-install-app-button.png?w=560&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=a8094c257af8644a9f6929cf34508f3b 560w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-install-app-button.png?w=840&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=cad80b8792f1e952f9b6ab5172e8d02e 840w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-install-app-button.png?w=1100&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=ec6b086d527a06b925ec427042c491be 1100w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-install-app-button.png?w=1650&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=2959ba16937d45d6c23002b7cd7e9591 1650w, https://mintcdn.com/whop/10U_4RMUCDhk64co/images/app-settings-install-app-button.png?w=2500&fit=max&auto=format&n=10U_4RMUCDhk64co&q=85&s=bd377180b2973e4fba60b3b30bda2e14 2500w" />
    </Frame>

    If you've already installed your app, you can access it from your whop.

    <Frame>
            <img src="https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/whop-experiences.png?fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=3b441cbe9f4a93a4c58d9ab83a6f59f0" alt="Whop Sidebar Apps Section" data-og-width="2048" width="2048" data-og-height="1252" height="1252" data-path="images/whop-experiences.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/whop-experiences.png?w=280&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=f95684e2d5a4178f3c0e921e1808720c 280w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/whop-experiences.png?w=560&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=3d6a923e05ed7641e1d396200e65f530 560w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/whop-experiences.png?w=840&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=4e08784dcfe00036965caec8005a0981 840w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/whop-experiences.png?w=1100&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=7ebc51efee8d25323d29e8ce7b498f8e 1100w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/whop-experiences.png?w=1650&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=c86de5940cdfa6d0f84c2b57eb9be761 1650w, https://mintcdn.com/whop/YCN8CE8TO9oEZrci/images/whop-experiences.png?w=2500&fit=max&auto=format&n=YCN8CE8TO9oEZrci&q=85&s=7943c81b3761c8479b0e86bed1ea70c0 2500w" />
    </Frame>
  </Step>

  <Step title="Set the environment">
    1. Open the dev tools by clicking the **cog** button
    2. Set the environment to **localhost**

    <video controls className="rounded-xl" src="https://mintcdn.com/whop/wmug03bhIwuWRAcH/how-to-videos/experience-app-preview-set-localhost.mp4?fit=max&auto=format&n=wmug03bhIwuWRAcH&q=85&s=707023002211309d87f552fab95a7b5d" data-path="how-to-videos/experience-app-preview-set-localhost.mp4" />
  </Step>
</Steps>

## Validate access

Check if a user has access to an experience by using the SDK method [checkIfUserHasAccessToExperience](/sdk/api/access/check-if-user-has-access-to-experience).

```ts  theme={null}
  const access = await whopSdk.access.checkIfUserHasAccessToExperience({
    experienceId: "exp_***",
    userId: "user_***",
  });

  // No access
  // ^? { hasAccess: false, accessLevel: "no_access" }

  // Customer access
  // ^? { hasAccess: true, accessLevel: "customer" }

  // Admin access
  // ^? { hasAccess: true, accessLevel: "admin" }
```

See [Validate experience access](/sdk/validate-access#validate-experience-access) for more information.

## Examples

* [Next.js](https://github.com/whopio/whop-nextjs-app-template/blob/main/app/experiences/%5BexperienceId%5D/page.tsx)
* [React Native](https://github.com/whopio/whop-sdk-ts/blob/main/packages/create-react-native/template/src/views/experience-view.tsx)


# Affiliate Commissions
Source: https://docs.whop.com/apps/features/affiliate-commissions



Earn affiliate commissions by linking to a Whop's discover page:

```
https://whop.com/discover/{companyRoute}/?app={yourAppId}
```

Available query parameters:

* `?app={yourAppId}` sets your app as the affiliate
* `?productId={accessPassId}` selects the product on the discover page (optional)


# Login with Whop
Source: https://docs.whop.com/apps/features/oauth-guide

Learn how to implement Whop OAuth in a stand-alone application.

## Intro

Use Whop OAuth to authenticate users in your web or iOS app.

<Note>
  This guide only covers the basic steps to implement Whop OAuth and does not cover best practices regarding the OAuth2 protocol. It is recommended to use a library to handle the OAuth2 flow.

  We are going to release a guide on how to implement Whop OAuth with auth.js soon.
</Note>

### Step 1: Create a Whop App and obtain secrets

1. Go to the [Whop Dashboard](https://whop.com/dashboard/developer/) and create a new app or select an existing one.

2. Add a redirect uri in your apps OAuth settings

   To test your app locally you can add a redirect uri on `http://localhost:{PORT}` but it is recommended to use https for production.

3. Copy the app id and api key and set them in your environment variables.

   Keep in mind that the api key is a secret and should not be shared with anyone. The app id is public and can be shared with anyone.

   ```.env  theme={null}
   NEXT_PUBLIC_WHOP_APP_ID=your-app-id
   WHOP_API_KEY=your-api-key
   ```

### Step 2: Initiate the OAuth flow

#### Setup the OAuth flow

To follow this guide you will need to install the `@whop/api` package from npm:

<CodeGroup>
  ```bash pnpm theme={null}
  pnpm i @whop/api
  ```

  ```bash npm theme={null}
  npm i @whop/api
  ```

  ```bash yarn theme={null}
  yarn add @whop/api
  ```
</CodeGroup>

Start off by creating a route that will be hit by the user when they click the `Login with Whop` button:

```ts /api/oauth/init/route.ts theme={null}
import { WhopServerSdk } from "@whop/api";

const whopApi = WhopServerSdk({
  appApiKey: process.env.WHOP_API_KEY!,
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
});

export function GET(request: Request) {
  const url = new URL(request.url);
  const next = url.searchParams.get("next") ?? "/home";

  const { url, state } = whopApi.oauth.getAuthorizationUrl({
    // This has to be defined in the redirect uris outlined in step 1.2
    redirectUri: "http://localhost:3000/api/oauth/callback",
    // These are the authorization scopes you want to request from the user.
    scope: ["read_user"],
  });

  // The state is used to restore the `next` parameter after the user lands on the callback route.
  // Note: This is not a secure way to store the state and for demonstration purposes only.
  return Response.redirect(url, {
    headers: {
      "Set-Cookie": `oauth-state.${state}=${encodeURIComponent(
        next
      )}; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=3600`,
    },
  });
}
```

<Note>
  Read more about available scopes [here](/api-reference/graphql/scopes).
</Note>

#### Adding the `Login with Whop` button

Now continue by adding a link to your app that will initiate the `Login with Whop` flow:

```html  theme={null}
<a href="/api/oauth/init?next=/home">Login with Whop</a>
```

Upon clicking the link the user will be redirected to the Whop OAuth page and is prompted to authorize your app.

### Step 3: Exchange the code for a token

Upon successful authorization the user will be redirected to the redirect uri you specified in the query parameters with `code` and `state` query parameters:

```ts /api/oauth/callback/route.ts theme={null}
import { WhopServerSdk } from "@whop/api";

const whopApi = WhopServerSdk({
  appApiKey: process.env.WHOP_API_KEY!,
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
});

export function GET(request: Request) {
  const url = new URL(request.url);
  const code = url.searchParams.get("code");
  const state = url.searchParams.get("state");

  if (!code) {
    // redirect to error page
    return Response.redirect("/oauth/error?error=missing_code");
  }

  if (!state) {
    // redirect to error page
    return Response.redirect("/oauth/error?error=missing_state");
  }

  const stateCookie = request.headers
    .get("Cookie")
    ?.split(";")
    .find((cookie) => cookie.trim().startsWith(`oauth-state.${state}=`));

  if (!stateCookie) {
    // redirect to error page
    return Response.redirect("/oauth/error?error=invalid_state");
  }

  // exchange the code for a token
  const authResponse = await whopApi.oauth.exchangeCode({
    code,
    redirectUri: "http://localhost:3000/api/oauth/callback",
  });

  if (!authResponse.ok) {
    return Response.redirect("/oauth/error?error=code_exchange_failed");
  }

  const { access_token } = authResponse.tokens;

  // Restore the `next` parameter from the state cookie set in the previous step.
  const next = decodeURIComponent(stateCookie.split("=")[1]);
  const nextUrl = new URL(next, "http://localhost:3000");

  // This is an example, you should not store the plain user auth token in a cookie in production.

  // After setting the cookie you can now identify the user by reading the cookie when the user visits your website.
  return Response.redirect(nextUrl.toString(), {
    headers: {
      "Set-Cookie": `whop_access_token=${access_token}; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=3600`,
    },
  });
}
```

## Implementing with authentication frameworks

### Auth.js

To implement Whop OAuth with auth.js you can use the `authJsProvider` method on the `WhopOAuth` class.

Get started by setting up the relevant auth.js distribution:

* Next.js ([Installation Guide](https://authjs.dev/getting-started/installation?framework=Next.js)) ([Example](https://github.com/whopio/whop-sdk-ts/tree/main/examples/oauth-nextjs)) via `next-auth@beta`
* SvelteKit ([Installation Guide](https://authjs.dev/getting-started/installation?framework=SvelteKit)) via `@auth/sveltekit`
* Qwik ([Installation Guide](https://authjs.dev/getting-started/installation?framework=Qwik)) via `@auth/qwik`
* Express ([Installation Guide](https://authjs.dev/getting-started/installation?framework=Express)) via `@auth/express`

Create a Whop OAuth provider and add it to your auth.js provider configuration:

```ts  theme={null}
const WhopProvider = whopApi.oauth.authJsProvider({
  scope: ["read_user"],
});

const authConfig = {
  providers: [WhopProvider],
  // ... rest of your auth.js configuration
};
```


# Payments and payouts
Source: https://docs.whop.com/apps/features/payments-and-payouts

Use the API to collect payment from users or payout users.

## Collecting Payments

First, create the charge on the server using the Whop API. Then you can either:

1. Open a modal in your app using the iframe SDK (recommended)
2. Redirect the user to Whop's checkout page

### 1. Create the charge on the server

> This step will create a charge on the server and return the inAppPurchase object required for the next step.

On the server, use the [chargeUser](/sdk/api/payments/charge-user) method to create a charge:

```typescript app/api/charge/route.ts theme={null}
import { whopSdk } from "@/lib/whop-sdk";

export async function POST(request: Request) {
  try {
    const { userId, experienceId } = await request.json();

    const result = await whopSdk.payments.chargeUser({
      amount: 100,
      currency: "usd",
      userId: userId,
      // metadata is information that you'd like to receive later about the payment.
      metadata: {
        creditsToPurchase: 1,
        experienceId: experienceId,
      },
    });

    if (!result?.inAppPurchase) {
      throw new Error("Failed to create charge");
    }

    return Response.json(result.inAppPurchase);
  } catch (error) {
    console.error("Error creating charge:", error);
    return Response.json({ error: "Failed to create charge" }, { status: 500 });
  }
}
```

### 2. Confirm the payment on the client

> In this step the user will be prompted to confirm the previously created charge in a modal.

<Warning>
  This function requires the iFrame SDK to be initialized. See [**iFrame
  Overview**](/sdk/iframe-setup) for more information.
</Warning>

Use the iframe SDK to open a payment modal:

<CodeGroup>
  ```tsx React theme={null}
  "use client";
  import { useIframeSdk } from "@whop/react";

  export default function PaymentButton({
    userId,
    experienceId,
  }: {
    userId: string;
    experienceId: string;
  }) {
    const iframeSdk = useIframeSdk();
    
    const [receiptId, setReceiptId] = useState<string>();
    const [error, setError] = useState<string>();
    
    async function handlePurchase() {
      try {
        // 1. Create charge on server
        const response = await fetch("/api/charge", {
          method: "POST",
          body: JSON.stringify({ userId, experienceId }),
        });
        
        if (response.ok) {
          const inAppPurchase = await response.json();
          // 2. Open payment modal
          const res = await iframeSdk.inAppPurchase(inAppPurchase);
          
          if (res.status === "ok") {
            setReceiptId(res.data.receipt_id);
            setError(undefined);
          } else {
            setReceiptId(undefined);
            setError(res.error);
          }
        } else {
          throw new Error("Failed to create charge");
        }
      } catch (error) {
        console.error("Purchase failed:", error);
        setError("Purchase failed");
      }
    }
    
    return <button onClick={handlePurchase}>Purchase Plan</button>;
  }
  ```

  ```tsx Vanilla JS theme={null}
  import { iframeSdk } from "@/lib/iframe-sdk";

  const paymentButton = document.querySelector("button#payment-button");
  const receiptElement = document.querySelector("span#receiptContainer");
  const errorElement = document.querySelector("span#errorContainer");

  function setError(error?: string) {
    if (errorElement instanceof HTMLSpanElement) {
      errorElement.textContent = error ?? "";
    }
  }

  function setReceiptId(receiptId?: string) {
    if (receiptElement instanceof HTMLSpanElement) {
      receiptElement.textContent = receiptId ?? "";
    }
  }

  if (paymentButton instanceof HTMLButtonElement) {
    paymentButton.addEventListener(
      "click",
      async function onPaymentButtonClick() {
        const userId = this.dataset.userId;
        const experienceId = this.dataset.experienceId;
        if (!userId || !experienceId) {
          throw new Error("Missing userId or experienceId");
        }

        try {
          // 1. Create charge on server
          const response = await fetch("/api/charge", {
            method: "POST",
            body: JSON.stringify({ userId, experienceId }),
          });

          if (response.ok) {
            const inAppPurchase = await response.json();
            // 2. Open payment modal
            const res = await iframeSdk.inAppPurchase(inAppPurchase);

            if (res.status === "ok") {
              setReceiptId(res.data.receipt_id);
              setError(undefined);
            } else {
              setReceiptId(undefined);
              setError(res.error);
            }
          } else {
            throw new Error("Failed to create charge");
          }
        } catch (error) {
          console.error("Purchase failed:", error);
          setError("Purchase failed");
        }
      }
    );
  }
  ```
</CodeGroup>

### 3. Validate the payment

> After a payment is processed, you should validate it on your server using webhooks to ensure the payment was successful and update your application accordingly.

Set up a webhook route to handle payment events:

```typescript app/api/webhook/route.ts theme={null}
import { makeWebhookValidator, type PaymentWebhookData } from "@whop/api";
import { after } from "next/server";

const validateWebhook = makeWebhookValidator({
  webhookSecret: process.env.WHOP_WEBHOOK_SECRET,
});

export async function POST(request: Request) {
  // Validate the webhook to ensure it's from Whop
  const webhook = await validateWebhook(request);

  // Handle the webhook event
  if (webhook.action === "payment.succeeded") {
    after(handlePaymentSucceededWebhook(webhook.data));
  }

  // Make sure to return a 2xx status code quickly. Otherwise the webhook will be retried.
  return new Response("OK", { status: 200 });
}

async function handlePaymentSucceededWebhook(data: PaymentWebhookData) {
  const { id, user_id, subtotal, amount_after_fees, metadata, ... } = data;

  // ...
}
```

See [**Webhooks**](/apps/features/webhooks) for more information.

<Warning>
  Make sure to create a webhook in your [dashboard](https://whop.com/dashboard/developer/) app settings and set your `WHOP_WEBHOOK_SECRET` environment variable.
</Warning>

<Frame>
    <img src="https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=770322f79278e3ca244a4269a2cbb45f" alt="Webhook Configuration" data-og-width="2730" width="2730" data-og-height="952" height="952" data-path="images/app-webhooks.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=280&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=d51177e6f01ab1df8a93c38b8680716b 280w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=560&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=71fbc37e8cc3da0331c0259b2dfce61d 560w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=840&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=8ca1f801b4c629469ef367b304661740 840w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=1100&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=1cf8ebe1c0ce1ea74e164a7119a74518 1100w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=1650&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=2c882bb8089d36a040b2ae7ac9ba8f50 1650w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=2500&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=8ffd9c4f4aabffc86293b8315b7da685 2500w" />
</Frame>

## Sending Payouts

You can send payouts to any user using their Whop username. The funds will be transferred from your company's ledger account.

### Transfer Funds

```typescript  theme={null}
import { whopSdk } from "@/lib/whop-sdk";

async function sendPayout(
  companyId: string,
  recipientUsername: string,
  amount: number
) {
  // 1. Get your company's ledger account
  const experience = await whopSdk.experiences.getExperience({ experienceId });
  const companyId = experience.company.id;
  const ledgerAccount = await whopSdk.companies.getCompanyLedgerAccount({
    companyId,
  });

  // 2. Pay the recipient
  await whopSdk.payments.payUser({
    amount: amount,
    currency: "usd",
    // Username or ID or ledger account ID of the recipient user
    destinationId: recipientUsername,
    // Your company's ledger account ID that can be retrieve from whopSdk.companies.getCompanyLedgerAccount()
    ledgerAccountId: ledgerAccount.company?.ledgerAccount.id!,
    // Optional transfer fee in percentage
    transferFee: ledgerAccount.company?.ledgerAccount.transferFee,
  });
}
```


# Create forum post
Source: https://docs.whop.com/apps/features/post-to-feed

Create a forum and a post using the API

## Overview

To post in a forum, you must:

1. Find or create a *Forum Experience*
2. Create a *Forum Post* inside the *Forum Experience*

<Info>
  If you already know what forum experience you want to post in, you can skip
  step 1, and use the experience ID directly in step 2.
</Info>

***

## Find or create a forum experience

A forum post must be created within a **Forum Experience**.
The `findOrCreateForum` method will find an existing forum experience with the specified name,
or create a new one with all the specified options

```typescript  theme={null}
const newForum = await whopSdk
  .withUser("YOUR_AGENT_USER_ID")
  .forums.findOrCreateForum({
    experienceId: experienceId,
    name: "Dino game results",
    whoCanPost: "admins",
    // optional:
    // expiresAt: Date.now() + 24 * 60 * 60 * 1000,
    // price: {
    // baseCurrency: "usd",
    // initialPrice: 100,
    // }
  });
```

> This will create the forum in the same whop as the supplied experience.

***

## Create a forum post.

Once you have the `experienceId` from the above, use it to create a post.

### Basic Forum Post

```ts  theme={null}
const forumPost = await whopSdk
  .withUser("YOUR_AGENT_USER_ID")
  .forums.createForumPost({
    forumExperienceId: newForum.createForum?.id,
    title: "Welcome!",
    content: "Excited to kick things off in our new forum 🎉",
  });
```

* `withUser()`: ID of the user posting
* `forumExperienceId`: The ID of the target forum
* `title` and `content`: Main post body. *(title is optional)*

### Forum post with advanced options

This demonstrates a rich post using all features:

```ts  theme={null}
const forumPost = await whopSdk
  .withUser("YOUR_AGENT_USER_ID")
  .forums.createForumPost({
    forumExperienceId: "exp_XXXXXX",
    // Visible even before purchase.
    title: "Big Launch + Community Poll!",
    // Visible only after purchase
    content: "Hidden content unless purchased. 🔒",
    // Add media to the post.
    // Learn how to upload in the upload-media section
    attachments: [
      {
        directUploadId: "XXXXXXXXXXXXXXXXXXXXXXXXXX",
      },
    ],

    // Do not send a notification to everyone about this post.
    isMention: false,

    // Lock the content and attachments behind a
    // one time purchase in the price + currency.
    paywallAmount: 9.99,
    paywallCurrency: "usd",

    // Add a poll to the post.
    poll: {
      options: [
        { id: "1", text: "New Product Features" },
        { id: "2", text: "Exclusive AMA" },
        { id: "3", text: "Member Giveaways" },
      ],
    },
  });
```


# Send push notification
Source: https://docs.whop.com/apps/features/send-push-notification

Send a push notification to a user or a group of users.

## Send a notification to everyone in an experience.

<Info>
  Make sure you have [setup your whop SDK client on the
  server](/sdk/whop-api-client)
</Info>

```typescript  theme={null}
import { whopSdk } from "@/lib/whop-sdk";

// This could be a server action / api route that create a
// piece of content in your app for this experience
export async function createSomeContentInExperience(
  experienceId: string,
  content: string, // this could be a more complex type depending on your specific app.
  createdByUserId: string
) {
  // Create the content in your app.
  // ... await some database call etc etc...

  // Send a push notification to everyone in the experience.
  await whopSdk.notifications.sendPushNotification({
    title: "New content is available" /* Required! */,
    content: content.slice(0, 100) + "...", // Format the content as you wish.
    experienceId, // send to all users with access to this experience.

    isMention: false, // Set this to true to make everyone immediately
    // get a mobile push notification.

    senderUserId: createdByUserId, // This will render this user's
    // profile picture as the notification image.
  });
}
```

See the full list of accepted parameters [here](/sdk/api/notifications/send-push-notification).

## Adding a deeplink to the notification.

When you send a notification, you will usually want to send the user to specific section in your app upon clicking the notification.
You can do this by using the `restPath` property.

1. Update your app path in the dashboard to handle the additional parameters.

   In the hosting section, set the "App path" field to something like: `/experiences/[experienceId]/[restPath]`

2. In your `sendPushNotification` call, add the `restPath` property.

   ```typescript  theme={null}
   await whopSdk.notifications.sendPushNotification({
     title: "New content is available",
     content: content.slice(0, 100) + "...",
     experienceId,
     restPath: `/posts/${somePostId}`, // The specific posts route is just an example
     // You could also just add a query param like this:
     // restPath: `?id=${specialId}`,
   });
   ```

3. Update you app to handle the following route:

   When clicking on a notification, the user will open this specific url on your app within the whop iframe.

   ```
   https://your-domain.com/experiences/exp_123/posts/post_123
   ```

   If using NextJS, you can add a `page.tsx` file with the path: `app/experiences/[experienceId]/posts/[postId]/page.tsx`

   <Info>
     Note: the exact path will depend on the pathname structure you set in the
     `restPath` property.
   </Info>

## Sending a notification to company admins

Your app may want to alert company admins only, not all members. Use the `companyTeamId` field instead of the `experienceId` when sending the notification.

```typescript  theme={null}
await whopSdk.notifications.sendPushNotification({
  title: "A member just posted a new listing. Review it now.",
  content: `${listingTitle}`,
  companyTeamId,
});
```

<Info>
  You must send either the `companyTeamId` or the `experienceId` when sending a
  notification. Setting both will result in an error.
</Info>

## Sending a notification to a specific subset of users.

Use the `userIds` field to filter the users who will receive the notification.

Whop will first apply either the `experienceId` or the `companyTeamId` filter and then apply the `userIds` filter

Ensure that the `userIds` array contains valid user IDs that are part of the specified experience or company team.

For example if you a building a bidding app you may want to alert the highest bidder if they were just outbid.

```typescript  theme={null}
await whopSdk.notifications.sendPushNotification({
  title: "You were just outbid",
  content: `${listingTitle}`,
  experienceId, // the experience ID that the current item is listed within.
  userIds: [oldHighestBidderUserId],
});
```


# Subscriptions
Source: https://docs.whop.com/apps/features/subscriptions

Gate your app behind a subscription or one-time purchase

## Setup your access pass on the dashboard.

1. Go to the your [app's dashboard](https://whop.com/dashboard/developer).
2. Select the access passes tab and create an access pass. Give it a name like "My App Premium"
3. Create a pricing plan for the access pass by clicking the "Add Pricing" button from the table row.
4. After creating the pricing plan, copy the plan id from the 3 dot menu in the pricing plan card.
5. Also copy the access pass id from the 3 dot menu in the access pass table row.

<Info>
  We recommend storing the access pass id and plan id in environment variables
  for your app. Eg:

  ```bash  theme={null}
  NEXT_PUBLIC_PREMIUM_ACCESS_PASS_ID="prod_XXXXXXXX"
  NEXT_PUBLIC_PREMIUM_PLAN_ID="plan_XXXXXXXX"
  ```
</Info>

## Check if users have access

When a user makes a request to your app, you can easily check if they have access using the whop api.

```typescript  theme={null}
const hasAccess = await whopSdk.access.checkIfUserHasAccessToAccessPass({
  accessPassId: process.env.NEXT_PUBLIC_PREMIUM_ACCESS_PASS_ID, // from step 5 above.
  userId: userId,
});
```

If a user does not have access, you can [prompt them to purchase](#collect-payment-from-users) or show a lite "free" version of the app to upsell them.

## Collect payment from users

<Warning>
  This function requires the iFrame SDK to be initialized. See [**iFrame
  Overview**](/sdk/iframe-setup) for more information.
</Warning>

Use the iframe sdk to collect payment from users. This will show a whop native payment modal in which the user can confirm their purchase.

<CodeGroup>
  ```tsx React theme={null}
  "use client";
  import { useIframeSdk } from "@whop/react";

  export default function GetAccessButton() {
    const iframeSdk = useIframeSdk();
    
    const [receiptId, setReceiptId] = useState<string>();
    const [error, setError] = useState<string>();
    
    async function handlePurchase() {
      try {
  		const res = await iframeSdk.inAppPurchase({ planId: process.env.NEXT_PUBLIC_PREMIUM_PLAN_ID });
  		
  		if (res.status === "ok") {
  			setReceiptId(res.data.receipt_id);
  			setError(undefined);
  		} else {
  			setReceiptId(undefined);
  			setError(res.error);
  		}
      } catch (error) {
        console.error("Purchase failed:", error);
        setError("Purchase failed");
      }
    }
    
    return <button onClick={handlePurchase}>Get Access</button>;
  }
  ```

  ```tsx Vanilla JS theme={null}
  import { iframeSdk } from "@/lib/iframe-sdk";

  const getAccessButton = document.querySelector("button#get-access-button");
  const receiptElement = document.querySelector("span#receiptContainer");
  const errorElement = document.querySelector("span#errorContainer");

  function setError(error?: string) {
    if (errorElement instanceof HTMLSpanElement) {
      errorElement.textContent = error ?? "";
    }
  }

  function setReceiptId(receiptId?: string) {
    if (receiptElement instanceof HTMLSpanElement) {
      receiptElement.textContent = receiptId ?? "";
    }
  }

  if (getAccessButton instanceof HTMLButtonElement) {
    getAccessButton.addEventListener(
      "click",
      async function onGetAccessButtonClick() {
        try {
          const res = await iframeSdk.inAppPurchase({
            planId: process.env.NEXT_PUBLIC_PREMIUM_PLAN_ID,
          });

          if (res.status === "ok") {
            setReceiptId(res.data.receipt_id);
            setError(undefined);
          } else {
            setReceiptId(undefined);
            setError(res.error);
          }
        } catch (error) {
          console.error("Purchase failed:", error);
          setError("Purchase failed");
        }
      }
    );
  }
  ```
</CodeGroup>

# Attaching custom metadata to a subscription

You can attach custom metadata to a subscription by using the `createCheckoutSession` mutation.

For example, you can use this to associate a subscription with an experience or company that it was created for.
Using this you can attribute the source of the subscription and build powerful revenue sharing features into your app.

Before using the `iframeSdk.inAppPurchase` function, you need to create a checkout session, and pass it to the function.

### Create the checkout session in a server action.

Use the whopSdk to create a checkout session on your backend, pass the experienceId to this function.

```typescript  theme={null}
import { whopSdk } from "@/lib/whop-sdk";
import { headers } from "next/headers";

export async function createSubscription(experienceId: string) {
  const { userId } = await whopSdk.verifyUserToken(await headers());

  // Check to make sure the current user has access to the experience.
  const hasAccess = await whopSdk.access.checkIfUserHasAccessToExperience({
    userId,
    experienceId,
  });

  const checkoutSession = await whopSdk.payments.createCheckoutSession({
    planId: process.env.NEXT_PUBLIC_PREMIUM_PLAN_ID,
    metadata: {
      experienceId,
    },
  });

  return checkoutSession;
}
```

### Pass the checkout session to the iframeSdk.inAppPurchase function.

```tsx React theme={null}
"use client";

import { useIframeSdk } from "@whop/react";
import { createSubscription } from "@/lib/actions/create-subscription";

export default function GetAccessButton({
  experienceId,
}: {
  experienceId: string;
}) {
  const iframeSdk = useIframeSdk();

  const [receiptId, setReceiptId] = useState<string>();
  const [error, setError] = useState<string>();

  async function handlePurchase() {
    try {
      const inAppPurchase = await createSubscription(experienceId);
      const res = await iframeSdk.inAppPurchase(inAppPurchase);

      if (res.status === "ok") {
        setReceiptId(res.data.receipt_id);
        setError(undefined);
      } else {
        setReceiptId(undefined);
        setError(res.error);
      }
    } catch (error) {
      console.error("Purchase failed:", error);
      setError("Purchase failed");
    }
  }

  return <button onClick={handlePurchase}>Get Access</button>;
}
```

This custom metadata will be available in the webhook payloads sent to your server (if enabled).

You can use the `payUser` mutation to share your subscription revenue with the creator of the experience.


# Upload media
Source: https://docs.whop.com/apps/features/upload-media

Use Whop to upload images, videos, audio, and other files.

### Client-Side: Set up the Image Upload Component

First, create a component to handle image uploads. This example uses `react-dropzone` for the file upload interface.

```typescript  theme={null}
import { useState, useCallback, useEffect } from "react";
import { useDropzone } from "react-dropzone";

function ImageUploader() {
  // Set up state for the image file and preview
  const [image, setImage] = useState<{
    file: File;
    preview: string;
  } | null>(null);

  // Clean up object URLs when component unmounts
  useEffect(() => {
    const objectUrl = image?.preview;
    if (objectUrl) {
      return () => {
        URL.revokeObjectURL(objectUrl);
      };
    }
  }, [image?.preview]);

  // Handle file drops
  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      setImage({
        file,
        preview: URL.createObjectURL(file),
      });
    }
  }, []);

  // Configure dropzone
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/*": [".jpeg", ".jpg", ".png", ".gif"],
    },
    maxFiles: 1,
  });

  return (
    <div {...getRootProps()} className="border-2 border-dashed rounded-lg p-8">
      <input {...getInputProps()} />
      {image?.preview ? (
        <img src={image.preview} alt="Preview" className="max-w-full h-auto" />
      ) : (
        <p>Drag & drop an image here, or click to select</p>
      )}
    </div>
  );
}
```

### Server-Side: Handle File Uploads

Create an API route to handle the file upload using the Whop SDK:

```typescript  theme={null}
import { whopSdk } from "@/lib/whop-sdk";
import { headers } from "next/headers";
import { NextResponse } from "next/server";

export async function POST(request: Request) {
  try {
    // Verify user authentication
    const headersList = await headers();
    const userToken = await whopSdk.verifyUserToken(headersList);
    if (!userToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Get the file from the request
    const file = await request.blob();

    // Upload to Whop
    const response = await whopSdk.attachments.uploadAttachment({
      file: new File([file], `upload-${Date.now()}.png`, {
        type: "image/png",
      }),
      record: "forum_post", // or other record types
    });

    // The response includes the directUploadId and URL
    return NextResponse.json({
      success: true,
      attachmentId: response.directUploadId,
      url: response.attachment.source.url,
    });
  } catch (error) {
    console.error("Error uploading file:", error);
    return NextResponse.json(
      { error: "Failed to upload file" },
      { status: 500 }
    );
  }
}
```

### Using Uploaded Media

After uploading, you can use the attachment ID in various Whop features. For example, to create a forum post with the uploaded image (server-side):

```typescript  theme={null}
const createForumPost = async (attachmentId: string) => {
  const post = await whopSdk.forums.createForumPost({
    forumExperienceId: "your-forum-id",
    content: "Check out this image!",
    attachments: [{ directUploadId: attachmentId }],
  });

  return post;
};
```

### Supported File Types

The Whop API supports the following file types for upload:

* Images: `.jpg`, `.jpeg`, `.png`, `.gif`
* Videos: `.mp4`, `.mov`
* Documents: `.pdf`

### Best Practices

1. **File Size**: Keep uploads under 100MB for optimal performance
2. **Image Optimization**: Consider using libraries like `sharp` for image processing before upload
3. **Error Handling**: Implement proper error handling on both client and server
4. **Clean Up**: Remember to clean up any preview URLs to prevent memory leaks
5. **Security**: Always verify user authentication before handling uploads
6. **Progress Tracking**: Consider implementing upload progress tracking for better UX

### Complete Example

Here's a complete example showing both client and server integration:

```typescript  theme={null}
// app/components/MediaUploader.tsx (Client)
import { useState, useCallback, useEffect } from "react";
import { useDropzone } from "react-dropzone";

export default function MediaUploader() {
  const [image, setImage] = useState<{
    file: File;
    preview: string;
  } | null>(null);
  const [isUploading, setIsUploading] = useState(false);

  useEffect(() => {
    return () => {
      if (image?.preview) {
        URL.revokeObjectURL(image.preview);
      }
    };
  }, [image]);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      setImage({
        file,
        preview: URL.createObjectURL(file),
      });
    }
  }, []);

  const { getRootProps, getInputProps } = useDropzone({
    onDrop,
    accept: {
      "image/*": [".jpeg", ".jpg", ".png", ".gif"],
    },
    maxFiles: 1,
  });

  const handleUpload = async () => {
    if (!image?.file) return;

    setIsUploading(true);
    try {
      // Send to your API route
      const formData = new FormData();
      formData.append("file", image.file);

      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error);
      }

      // Clear the form after successful upload
      setImage(null);
    } catch (error) {
      console.error("Upload failed:", error);
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="space-y-4">
      <div
        {...getRootProps()}
        className="border-2 border-dashed rounded-lg p-8"
      >
        <input {...getInputProps()} />
        {image?.preview ? (
          <img
            src={image.preview}
            alt="Preview"
            className="max-w-full h-auto"
          />
        ) : (
          <p>Drag & drop an image here, or click to select</p>
        )}
      </div>

      {image && (
        <button
          onClick={handleUpload}
          disabled={isUploading}
          className="px-4 py-2 bg-blue-500 text-white rounded"
        >
          {isUploading ? "Uploading..." : "Upload"}
        </button>
      )}
    </div>
  );
}
```

This implementation provides a complete media upload solution with:

* Drag and drop interface
* File preview
* Upload handling
* Progress states
* Error handling
* Automatic cleanup


# Webhooks
Source: https://docs.whop.com/apps/features/webhooks

Use webhooks to get notified when specific events happen relating to your app.

***

## Create a webhook

<Steps>
  <Step title="Go to your app's webhook settings">
    1. Go to the [developer dashboard](https://whop.com/dashboard/developer)
    2. Create a new app or select an existing one
    3. Click on **Webhooks**

    <Frame>
            <img src="https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=770322f79278e3ca244a4269a2cbb45f" alt="Webhook Settings" data-og-width="2730" width="2730" data-og-height="952" height="952" data-path="images/app-webhooks.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=280&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=d51177e6f01ab1df8a93c38b8680716b 280w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=560&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=71fbc37e8cc3da0331c0259b2dfce61d 560w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=840&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=8ca1f801b4c629469ef367b304661740 840w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=1100&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=1cf8ebe1c0ce1ea74e164a7119a74518 1100w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=1650&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=2c882bb8089d36a040b2ae7ac9ba8f50 1650w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=2500&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=8ffd9c4f4aabffc86293b8315b7da685 2500w" />
    </Frame>
  </Step>

  <Step title="Create a webhook">
    1. Click on **Create webhook**
    2. Set your endpoint URL

    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=4016395a2563955dfb323d797b17409e" alt="Webhook URL" data-og-width="2048" width="2048" data-og-height="1252" height="1252" data-path="images/create-webhook-url.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=421ce287b9328f7c48f4311750036b66 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=361aaa2ff194e467a7d6abd3aeb275ad 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=cd5e9bff42de8bf63801b06f726ebba3 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=d2383ca93c40ccccc5a80829012f8920 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=dd3818cc939c82b08d25ad4dc79415ba 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=5909fd7b40a1fe8ab590e2117c4dbcac 2500w" />
    </Frame>

    <Note>
      When testing locally, you'll need to tunnel your requests to your localhost endpoint. You can use [ngrok](https://ngrok.com/) to do this.
    </Note>

    3. Select the events you want to receive and click on **Save**

    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=079887392e21e4680a82415244aeaea4" alt="Webhook Events" data-og-width="2048" width="2048" data-og-height="1252" height="1252" data-path="images/create-webhook-select-events.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=5b2f296400dc8da0d3a36eb82ce3487b 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=26ebb6c88bb75b7d53bb146e25d7a76f 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=ab4827eb60f4cd868a4a9f7aa9a88e3e 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=501525158f6eb2eec986fa3eeeec18d1 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=91db6e3c8004bd9ef8d8fb8b09d21c56 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=2e00be7fefd453c85f799885585d43d9 2500w" />
    </Frame>
  </Step>

  <Step title="Copy your webhook secret">
    Copy the webhook secret by clicking on it and safely store it in your environment variables.

    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=54e31ca7255fe7894229f7c422e67915" alt="Webhook Secret" data-og-width="1121" width="1121" data-og-height="381" height="381" data-path="images/webhook-copy-secret.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=98774198f045958e76abb5f4fd55b9b0 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=09824e78d96ee2cc4d7e4977b0ef6155 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=bc852c8d02a83cb5e0bebc9e7780d10c 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=57a41517e1c53b49eeeb094a56b8443b 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=b56406d946878efe0ebf41cd9107153b 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=a13ef2f3c87bc252504e43d0396ced90 2500w" />
    </Frame>
  </Step>
</Steps>

## Handle webhook events

Set up a webhook route to handle the selected events:

```typescript app/api/webhook/whop/route.ts theme={null}
import { makeWebhookValidator, type PaymentWebhookData } from "@whop/api";
import { after } from "next/server";

const validateWebhook = makeWebhookValidator({
  webhookSecret: process.env.WHOP_WEBHOOK_SECRET,
});

export async function POST(request: Request) {
  // Validate the webhook to ensure it's from Whop
  const webhook = await validateWebhook(request);

  // Handle the webhook event
  if (webhook.action === "payment.succeeded") {
    after(handlePaymentSucceededWebhook(webhook.data));
  }

  // Make sure to return a 2xx status code quickly. Otherwise the webhook will be retried.
  return new Response("OK", { status: 200 });
}

async function handlePaymentSucceededWebhook(data: PaymentWebhookData) {
  const { id, user_id, subtotal, amount_after_fees, metadata, ... } = data;

  // ...
}
```

## Test webhook events

You can send dummy webhook events to your endpoint for testing purposes.

<Steps>
  <Step title="Open the test webhook popup">
    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=40bd669d9a190db0eb78378aecdfeaad" alt="Test Webhook Popup" data-og-width="721" width="721" data-og-height="354" height="354" data-path="images/test-webhook-dropdown.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=e55ccc5f5360a332a686259ffe930332 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=56cf141db2f6a89db8e4eb7211322968 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=a83b51f087126a932e1f0cceeb26eb77 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=b387eecdaf12c91f87cf5cf40f7bdbb8 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=2820b61f9331a2a9db96971bc1fb3074 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=294ed75af22049d847c6a8255ab8c56e 2500w" />
    </Frame>
  </Step>

  <Step title="Select and send the event you want to test">
    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=6f023e619faa1a14557787c04f0091d8" alt="Test Webhook" data-og-width="697" width="697" data-og-height="353" height="353" data-path="images/test-webhook-send-event.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=b5b04945716b0a3c18678af407c2c98f 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=a99be20f1d28f30b0ea60b68dfd2ed8f 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=43bfd49e82a5aa06a492152a559826ad 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=feaec89c6b4b4b2c7c26aa33b0fe3c11 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=d1d0fcee4ec74675e2a520d5db9b6dd9 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=7ba34a40413317086fb602581548af21 2500w" />
    </Frame>
  </Step>
</Steps>


# Connect to websocket
Source: https://docs.whop.com/apps/features/websocket-guide

Learn how to implement real-time features using Whop's websocket API

You can connect to the websocket from your client side frontend code running in the iFrame.

## Client Setup

### React

When using react, it is recommended to use the `WhopWebsocketProvider` provider from the `@whop/react` package to connect to the websocket.

1. Mount the `WhopWebsocketProvider` provider:

   ```tsx app/layout.tsx theme={null}
   import { WhopWebsocketProvider } from "@whop/react";
   import { handleAppMessage } from "@/lib/handle-websocket-message";

   export default function Layout({ children }: { children: React.ReactNode }) {
     return (
       <WhopWebsocketProvider
         // optional, you can join a specific experience channel (ie, the one you are currently viewing).
         joinExperience="exp_XXXX"
         // optional, you can join a custom channel.
         joinCustom="some_custom_channel"
         // optional, a callback that is called when an app message is received. you can also use the `useOnWebsocketMessage` hook to handle messages.
         onAppMessage={handleAppMessage}
       >
         {children}
       </WhopWebsocketProvider>
     );
   }
   ```

2. Handle app messages:

   ```tsx lib/handle-websocket-message.tsx theme={null}
   export function handleAppMessage(message: proto.common.AppMessage) {
     console.log("Received app message:", message);

     // message.isTrusted is true if and only if the message was sent from your server with your private app API key.

     // message.json is the JSON string you sent from your server / client.

     // if you sent the message from the client using websocket.broadcast,
     // message.fromUserId will include the user id of the user who sent the message.
   }

   // You can also handle messages using the `useOnWebsocketMessage` hook.
   export function MyNestedReactComponent() {
     const [state, setState] = useState<string>("");
     useOnWebsocketMessage((message) => {
       setState(message.json);
     });
     return <div>{state}</div>;
   }
   ```

3. Handle connection status changes:

   ```tsx  theme={null}
   import { useWebsocketStatus } from "@whop/react";

   // inside of a component
   const connectionStatus = useWebsocketStatus();
   ```

### Other frameworks

Alternatively, you can create the websocket client using the `@whop/api` package in any framework.

1. Create the websocket client:

   ```typescript  theme={null}
   import { WhopClientSdk } from "@whop/api";

   const whopApi = WhopClientSdk();

   const websocket = whopApi.websockets.client({
     joinExperience: "exp_XXXX", // optional, you can join a specific experience channel (ie, the one you are currently viewing).
     joinCustom: "some_custom_channel", // optional, you can join a custom channel.
   });
   ```

2. Add event handlers for messages:

   ```typescript  theme={null}
   websocket.on("appMessage", (message) => {
     console.log("Received custom message:", message);

     // message.isTrusted is true if and only if the message was sent from your server with your private app API key.

     // message.json is the JSON string you sent from your server / client.

     // if you sent the message from the client using websocket.broadcast,
     // message.fromUserId will include the user id of the user who sent the message.
   });
   ```

3. Handle connection status changes:

   ```typescript  theme={null}
   websocket.on("connectionStatus", (status) => {
     console.log("Websocket Status Updated:", status);
   });

   websocket.on("connect", () => {
     console.log("Websocket Connected");
   });

   websocket.on("disconnect", () => {
     console.log("Websocket Disconnected");
   });
   ```

4. Connect to the websocket and start receiving events:

   ```typescript  theme={null}
   websocket.connect();
   ```

5. *Optional:* Disconnect from the websocket:

   ```typescript  theme={null}
   websocket.disconnect();
   ```

## Send messages from the client

You can send messages from the client to the server by using the `websocket.broadcast` or `useBroadcastWebsocketMessage` function.

1. Create a websocket client as above.

2. Send a custom message via websocket.

<CodeGroup>
  ```tsx React theme={null}
  import { useBroadcastWebsocketMessage } from "@whop/react";

  export function SendMessageExample() {
    const broadcast = useBroadcastWebsocketMessage();

    function sendMessage () {
       broadcast({
          message: JSON.stringify({ hello: "world" }),
          target: "everyone",
       });
    }

    return <button onClick={sendMessage}>Send Message</button>
  }

  ```

  ```typescript Other frameworks theme={null}
  // make sure you are connected by calling `websocket.connect()`

  websocket.broadcast({
    message: JSON.stringify({ hello: "world" }),
    target: "everyone",
  });
  ```
</CodeGroup>

<Note>
  The target field is the same as the one you would pass to
  `whopApi.websockets.sendMessage` on the server.
</Note>

## Send messages from your server

You can broadcast trusted websocket messages from your server to connected clients by using the `whopApi.websockets.sendMessage` function.

1. Construct an instance of the whop server sdk and pass your API key:

   ```typescript  theme={null}
   import { WhopServerSdk } from "@whop/api";

   const whopApi = WhopServerSdk({
     appApiKey: process.env.WHOP_API_KEY,
     appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
   });
   ```

2. Send a custom string message via websocket.

   ```typescript  theme={null}
   // Send to all users currently on your app across all experiences / views.
   whopApi.websockets.sendMessage({
     message: JSON.stringify({ hello: "world" }),
     target: "everyone",
   });

   // send to all users currently on this experience
   // (only works if the experience belongs to your app)
   whopApi.websockets.sendMessage({
     message: JSON.stringify({ hello: "world" }),
     target: { experience: "exp_XXXX" },
   });

   // create a custom channel that your websocket client can subscribe to.
   // Only works if when connecting on the client, you pass the same custom channel name.
   whopApi.websockets.sendMessage({
     message: JSON.stringify({ hello: "world" }),
     target: { custom: "some_custom_channel" },
   });

   // send to a specific user on your app
   whopApi.websockets.sendMessage({
     message: JSON.stringify({ hello: "world" }),
     target: { user: "user_XXXX" },
   });
   ```

## Receive messages on your server

<Info>
  Before you start, make sure you are using NodeJS 22.4 or higher, or Bun to run
  your server.
</Info>

Use the server websocket API to receive events such as chat messages as forum posts for a particular user on your server.
You can use these events to build real-time apps such as chat bots and AI-agents that react to events on the platform.

1. Construct (or reuse) an instance of the whop server sdk and pass your API key:

   ```typescript  theme={null}
   import { WhopServerSdk } from "@whop/api";

   const whopApi = WhopServerSdk({
     appApiKey: process.env.WHOP_API_KEY,
     appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
   });
   ```

2. Create your websocket client and add handlers for messages / status changes:

   ```typescript  theme={null}
   const websocket = whopApi
     // Pass the user id of the user you want to receive events for
     .withUser("user_v9KUoZvTGp6ID")
     // Construct the websocket client
     .websockets.client();
   ```

3. Add event handlers for messages:

   ```typescript  theme={null}
   websocket.on("message", (message) => {
     console.log("Received Message:", message);

     const chatMessage = message.feedEntity?.dmsPost;
     if (chatMessage) {
       // handle the chat message
     }

     const forumPost = message.feedEntity?.forumPost;
     if (forumPost) {
       // handle the forum post
     }
   });
   ```

4. Add event handlers for status changes (same as client API):

   ```typescript  theme={null}
   websocket.on("connectionStatus", (status) => {
     console.log("Websocket Status Updated:", status);
   });

   // Or you can also listen to the connect and disconnect events:
   websocket.on("connect", () => {
     console.log("Websocket Connected");
   });

   websocket.on("disconnect", () => {
     console.log("Websocket Disconnected");
   });
   ```

5. Connect to the websocket and start receiving events:

   ```typescript  theme={null}
   websocket.connect();
   ```

6. *Optional:* Disconnect from the websocket:

   ```typescript  theme={null}
   websocket.disconnect();
   ```


# Get an API key
Source: https://docs.whop.com/apps/get-api-key

All requests to Whop APIs are managed using a secure API key.

1. Go to [https://whop.com/dashboard/developer/](https://whop.com/dashboard/developer/).
2. Click the **Create app** button.
3. Give your app a name and click **Save**.
4. Copy the API key from the `Environment variables` section and use it in your code.

<video autoPlay loop muted controls className="rounded-xl border border-white/10" src="https://mintcdn.com/whop/TOclYnFut1D-IvN3/how-to-videos/copy-environment-variables.mp4?fit=max&auto=format&n=TOclYnFut1D-IvN3&q=85&s=f7dfde358590bffe795c60fd8fade09d" title="Video demonstrating how to copy environment variables from the Whop dashboard" aria-label="Video demonstrating how to copy environment variables from the Whop dashboard" data-path="how-to-videos/copy-environment-variables.mp4" />

### Company API (deprecated) -- V2 and V5

Legacy. Old system for when you want to automate your own creator account or sync payments/crm data to your internal systems.


# Getting started
Source: https://docs.whop.com/apps/getting-started



1. Clone our Next.js app template:

   <CodeGroup>
     ```bash Next.js theme={null}
     npx create-next-app@latest whop-app -e https://github.com/whopio/whop-nextjs-app-template
     ```
   </CodeGroup>

2. Install packages:

   <CodeGroup>
     ```bash pnpm theme={null}
     pnpm i
     ```

     ```bash npm theme={null}
     npm i
     ```

     ```bash yarn theme={null}
     yarn i
     ```
   </CodeGroup>

3. Run the app locally:

   <CodeGroup>
     ```bash pnpm theme={null}
     pnpm dev
     ```

     ```bash npm theme={null}
     npm run dev
     ```

     ```bash yarn theme={null}
     yarn dev
     ```
   </CodeGroup>

Now open [http://localhost:3000](http://localhost:3000) and follow the directions on the page.

<CardGroup cols={2}>
  <Card title="View our tutorials" href="/apps/tutorials" icon="book-open" color="#16a34a">
    Step-by-step guides to help you get started building with Whop.
  </Card>

  <Card title="SDK Reference" href="/sdk/installation" icon="code" color="#16a34a">
    View available functions from our API to make calls in your app.
  </Card>
</CardGroup>


# Introduction
Source: https://docs.whop.com/apps/introduction

Build Whop apps and sell them into Whop communities with thousands of members.

# What are Whop Apps?

A Whop app is a web app that can be embedded into a whop community. These apps can be installed by any Whop creator through our [app store](https://whop.com/discover/app-store/). As the developer, you can charge for the app using several options offered by our Whop SDK. Our Whop SDK makes it easy to leverage the infrastructure of whop, to build full-blown apps in hours, not weeks.

# Examples of apps

* [AI image generator](https://whop.com/apps/app_KHqcozSfEGNyhl/install/)
* [Pay-to-play game](https://whop.com/apps/app_scKdeUGhiBtYPr/install/)
* [Chat bot](https://whop.com/apps/app_3rqpGo1tsmPDHg/install/)
* [AI car customizer](https://whop.com/apps/app_S42iB0COVVUVwO/install/)

# Why build Whop apps?

## Distribution

You will be placed in the Whop App Store. The app store is visited by tens of thousands of creators who are looking to offer more value to their communities. You focus on building the best app you can, and we will handle getting you customers.

## Authentication

Zero authentication required. Since your app is embedded into a whop, we handle all user authentication for you. You have access to a load of user information via the Whop SDK.

## Payments

Tap into the power of Whop's payment system. Accept payment with extremely low effort.

### Explore how to collect payments

<AccordionGroup>
  <Accordion title="Transaction fees">
    Enable in-app purchases and take a transaction fee on each sale. For example, selling game credits, running a watch marketplace, or letting creators sell custom t-shirts.
  </Accordion>

  <Accordion title="Installation fee">
    Charge a one-time installation fee of \$5000 and let Whop creators offer your app as a free benefit for joining their community.
  </Accordion>

  <Accordion title="Per seat">
    Charge \$1 per member inside of a whop and let creators offer your app as a free benefit for joining their community
  </Accordion>

  <Accordion title="Monthly subscription">
    Charge Whop creators \$300 per month to let their members use your app freely.
  </Accordion>

  <Accordion title="Affiliate commission">
    Let whop creators sell your app inside their community for \$29/month and earn a referral fee for every customer they bring you.
  </Accordion>
</AccordionGroup>

## Get started

<CardGroup cols={2}>
  {" "}

  <Card title="View our tutorials" href="/apps/tutorials" icon="book-open" color="#16a34a">
    Step-by-step guides to help you get started building with Whop.
  </Card>

  <Card title="Clone our starter template" href="/apps/getting-started" icon="code" color="#16a34a">
    Clone our starter template to get started building your app.
  </Card>

  <Card title="Watch a tutorial" href="https://www.youtube.com/watch?v=-zKMt3a8GJ4" icon="video" color="#16a34a" img="https://i.ytimg.com/vi/-zKMt3a8GJ4/maxresdefault.jpg">
    Watch an end to end tutorial on how to build a Whop app with Next.js.
  </Card>
</CardGroup>


# Permissions
Source: https://docs.whop.com/apps/permissions

Permissions allow you to read and write data that isn't publicly available

## Request permissions

<Steps>
  <Step title="Go to your app's permissions settings">
    1. Go to the [developer dashboard](https://whop.com/dashboard/developer)
    2. Create a new app or select an existing one
    3. Click on **Permissions**

    <Frame>
            <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=514a98987e714d5a2542b3d7665020f7" alt="Permissions Settings" data-og-width="2120" width="2120" data-og-height="722" height="722" data-path="images/app-permissions-settings.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=9e74894609d45a0bbe2857c76cc00399 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=04be81b598e282fd0359d8c8793e90bc 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=201f0eac41e07e07a10f98217abf7b70 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=2d20bb743be0fc48d2795ea8cb3ed381 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=9c90e5c4b1aab454c458ecf223c1aaad 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=45a5a4120e250288d1fedfbaa93b652d 2500w" />
    </Frame>
  </Step>

  <Step title="Add permissions">
    1. Click on **Add permissions**
    2. Select the permissions you want to add
    3. Confirm by clicking **Add**
  </Step>

  <Step title="Configure each permission">
    1. Write a short explanation for why your app needs the permission
    2. Choose whether the permission is required or optional

    <Frame>
            <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=93ec46a13be088ad236a7fe69f6f6ad2" alt="Permissions Justification" data-og-width="2120" width="2120" data-og-height="722" height="722" data-path="images/app-permissions-settings-justification.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=23d4c43d6b0499fa1692f76e629dfe2d 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=1e5cec827e75f1c00dc52ff62a3a1bcf 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=0425ca1719e908d865eea461537c9010 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=274d43548eb5280cb041102819a6e519 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=00b419d2d18a78ccc91b4094da7c20e0 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=2fa42ef6af92e7ea478efa883f5ca5b5 2500w" />
    </Frame>
  </Step>

  <Step title="Save your permissions">
    <Frame>
            <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=683b42f4dcfed0eeee535d82dcce3e5f" alt="Save Permissions Settings" data-og-width="1074" width="1074" data-og-height="178" height="178" data-path="images/app-permissions-settings-save.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=6d7cb244e974db55fb45234cfe1a8691 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=34c1a0de915a5fffd8fb13098cd7a971 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=cedf493c408909e1d3f6559c68960e68 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=f37453116023135eccdf0f4967bdebbf 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=bf281812d1cbb00d2d86cdbeee713375 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=863e87616324663b894a9b698b7f22da 2500w" />
    </Frame>
  </Step>
</Steps>

Creators will now need to approve the permissions you requested before installing your app:

<Frame>
    <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=4b427b52f269ee6b92fcf7434069ad43" alt="Permissions Prompt" data-og-width="2176" width="2176" data-og-height="2222" height="2222" data-path="images/app-permissions-oauth.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=97b15c6bd8a902fa6e011055cb91dfed 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=0849255863e79ab329fcaa466ad5b6f8 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=b530aea102e7985b79d2bbc689e4a45b 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=66504f1c4a3bde37c7689f2a49b5943b 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=478aa77dd200041800559d440e773989 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=24f929bb0528f88df4b5c063e7e5d737 2500w" />
</Frame>

## Configure your permissions

You can update your currently granted permissions or re-approve them in your [Authorized apps](https://whop.com/dashboard/settings/authorized-apps) settings.

To manually navigate to the settings, go to: `Dashboard -> Settings -> Authorized apps`

<video controls className="rounded-xl" src="https://mintcdn.com/whop/_aQsA39rzB5Zq8ZK/how-to-videos/configure-app-permissions.mp4?fit=max&auto=format&n=_aQsA39rzB5Zq8ZK&q=85&s=dff99f10fb43e8914fdcd1b0eb4bd044" data-path="how-to-videos/configure-app-permissions.mp4" />

## Configure your SDK

Update your `SDK` configuration by removing the `onBehalfOfUserId` and `companyId` properties.

```js lib/whop-sdk.ts theme={null}
import { WhopServerSdk } from "@whop/api";

export const whopSdk = WhopServerSdk({
	// Add your app id here - this is required.
	// You can get this from the Whop dashboard after creating an app section.
	appId: process.env.NEXT_PUBLIC_WHOP_APP_ID ?? "fallback",

	// Add your app api key here - this is required.
	// You can get this from the Whop dashboard after creating an app section.
	appApiKey: process.env.WHOP_API_KEY ?? "fallback",

	// This will make api requests on behalf of this user. // [!code --:5]
	// This is optional, however most api requests need to be made on behalf of a user.
	// You can create an agent user for your app, and use their userId here.
	// You can also apply a different userId later with the `withUser` function.
	onBehalfOfUserId: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,

	// This is the companyId that will be used for the api requests. // [!code --:5]
	// When making api requests that query or mutate data about a company, you need to specify the companyId.
	// This is optional, however if not specified certain requests will fail.
	// This can also be applied later with the `withCompany` function.
	companyId: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,
});
```

## Examples

### Get a member's email address

```ts  theme={null}
  const member = await whopSdk.companies.getMember({
    companyId: "biz_***",
    companyMemberId: "mber_***",
  });

  // Without member:basic:read
  // ^? null

  // With member:basic:read
  // ^? { user: { id: "user_***", email: null, ... }, ... }

  // With member:basic:read & member:email:read
  // ^? { user: { id: "user_***", email: "***@gmail.com", ... }, ... }
```

## FAQ

<AccordionGroup>
  <Accordion title="How many permissions can I request?">
    You can request as many permissions as you want.
  </Accordion>

  <Accordion title="How do I know which permissions I need?">
    You can find the required permissions for each SDK method documented in the [SDK reference](/sdk/installation).

    <Frame>
            <img src="https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=141d5a09a00942f216c98d233824dcf9" alt="SDK Reference Permissions" data-og-width="1478" width="1478" data-og-height="358" height="358" data-path="images/sdk-reference-required-permissions.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=280&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=9054080577462932b26190b627bf88be 280w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=560&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=9f607b1f3066694639e436cb2ab964ff 560w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=840&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=c1d4c62b6ad57fb750b398479638d389 840w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=1100&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=71d0d136582da28a0db1247150ee22c3 1100w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=1650&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=6fd43b3ffede9b5ead64879b2222d440 1650w, https://mintcdn.com/whop/purcney6SuEUQzS5/images/sdk-reference-required-permissions.png?w=2500&fit=max&auto=format&n=purcney6SuEUQzS5&q=85&s=cbb37841670908b7e1554aa2df76920d 2500w" />
    </Frame>
  </Accordion>

  <Accordion title="Can I request additional permissions afterwards?">
    Yes. You can request additional permissions and the creator will be asked to re-approve them.

    <Note>
      Keep in mind that until the permissions are re-approved, API requests requiring the **newly requested** permissions will fail. Make sure to handle these errors gracefully in your code.
    </Note>

    <Warning>
      When developing your app, make sure you re-approve the permissions yourself in your [Authorized apps](https://whop.com/dashboard/settings/authorized-apps) settings.

      See [Configure your permissions](/apps/permissions#configure-your-permissions) for more information.
    </Warning>
  </Accordion>
</AccordionGroup>


# Advanced
Source: https://docs.whop.com/apps/react-native/advanced



***

## Secret internal features

We are still working on polishing our api's but if you wanna build something cool RIGHT NOW, you can use some internal api's to communicate with the whop app.

<Warning>
  These function may throw. Use within a `try {} catch (e) {}` block.
</Warning>

```tsx  theme={null}
import { __internal_execSync, __internal_execAsync } from "@whop/react-native";

// Example usage:
__internal_execSync("routerPush", {
  path: ["some", "second", "page"],
  params: { query: "hello" },
});
// Pro tip: the `path` and `query` is passed as a prop to the `ExperienceView`
// component. This is how multi level routing works for courses currently.

// Full list of calls and types available here:

export interface PathParams {
  path: string[];
  params: Record<string, string>;
}

export interface ExecSyncApi {
  getAppApiOrigin(params: EmptyObject): { apiOrigin: string };
  cacheGet(params: { key?: string | null }): { data?: string | null };
  cacheSet(params: { key?: string | null; data?: string | null }): EmptyObject;
  routerPush(params: PathParams): EmptyObject;
  routerPop(params: EmptyObject): EmptyObject;
  routerGetCurrent(params: EmptyObject): PathParams;
  setNavigationBarData(params: {
    title?: string | null;
    description?: string | null;
  }): EmptyObject;
  routerPresentSheet(params: PathParams): EmptyObject;
  routerDismissSheet(params: EmptyObject): EmptyObject;
  routerGetCurrentSheet(params: EmptyObject): PathParams | null | undefined;
  downgradeToWebView(params: EmptyObject): EmptyObject;
  getHostAppDetails(params: EmptyObject): {
    build: string;
    version: string;
    platform: "ios" | "android" | "web";
    buildType: "appstore" | "testflight" | "debug";
  };
  setScreenOrientationMode(params: {
    targetScreenOrientationMode: "portrait" | "landscape" | "rotate";
  }): EmptyObject;
}

export interface ExecAsyncApi extends ExecSyncApi {
  inAppPurchase(params: { id?: string | null; planId: string }): {
    sessionId: string;
    receiptId: string;
  };
}
```


# Deploying
Source: https://docs.whop.com/apps/react-native/deploying



***

## Deploy a development build

Use the `ship` command to build and upload a development build of your app:

```bash  theme={null}
pnpm ship
```

* `--ios` Build for iOS
* `--android` Build for Android
* `--web` Build for web

<Info>
  Only owners and admins of the the app can see development builds.
</Info>

If you prefer to separate the build and upload steps, you can use the following commands:

```bash  theme={null}
pnpm build
pnpm upload
```

## Promote to production

Once you're happy with your app go to your [developer dashboard](https://whop.com/dashboard/developer) and click "Promote to production" on your latest development build.

<Frame>
    <img src="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=9e428a92b24390c4b8db785a55b59b57" alt="Promote to production" data-og-width="1614" width="1614" data-og-height="538" height="538" data-path="images/promote-build.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=280&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=83feeeed1fbd4f0750530a247ece62ad 280w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=560&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=242a1b7dcdb2ad60466a8932d0c9ea91 560w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=840&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=0f05c5bcf54b39938c3f2d8c603bc280 840w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=1100&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=91e775c2a85cda0b5dddb83052a41b63 1100w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=1650&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=ce5dc663214b60bf558156ea59472fe1 1650w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=2500&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=f5551b1af248a39a5f9b79082e85a79d 2500w" />
</Frame>

After going through an automated review, the app will be pushed instantly to all users of your app on iOS, Android, and web.

<Info>
  ProTip: the `pnpm ship` command prints out a link you can use to promote your
  app to production.
</Info>

## Rollback

From the builds screen you can also instant rollback to a previous production build which will be pushed live to all users across whop.

<Frame>
    <img src="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=c406c17b97bad3f4241749c45741b33e" alt="Rollback" data-og-width="1614" width="1614" data-og-height="538" height="538" data-path="images/rollback-build.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=280&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=3593a5c2bcd5fbc83926ea425e655d3f 280w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=560&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=1349c9331cdaa319b812abeea332b769 560w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=840&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=2930e144d9c4a0490c7c60c36e84ef40 840w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=1100&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=b0b2b2f0d2b70bafe4201ae9529fde2b 1100w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=1650&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=cf5001ea16c1e794a5af403b247215a1 1650w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=2500&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=6f8d9b907f47ef08ac59839e98c2a2cd 2500w" />
</Frame>


# Fetching Data
Source: https://docs.whop.com/apps/react-native/fetching-data



***

## Whop SDK

The whop sdk is available for use in the react native app out of the box. Using this you can fetch data within the scope of the current user.

<Info>
  We recommend using the [useQuery](https://tanstack.com/query/latest/docs/framework/react/reference/useQuery) hook from [@tanstack/react-query](https://tanstack.com/query/latest) to fetch
  data.
</Info>

```tsx  theme={null}
import { whopSdk } from "@whop/react-native";
import { useQuery } from "@tanstack/react-query";

export function MyComponent() {
  const { data: user } = useQuery({
    queryKey: ["user"],
    queryFn: () => whopSdk.users.getCurrentUser(),
  });

  return <Text>{user?.name}</Text>;
}
```

<Warning>
  Some operations are only available on the server, so make sure you call those from your api. Check out the [SDK reference](/sdk/installation) to see which ones have the "server only" flag.
</Warning>

## Making authenticated requests

You can make authenticated requests to your API by using the same proxy infrastructure used for existing web apps.

1. Set your API origin as the `Base URL` in the [developer dashboard](https://whop.com/dashboard/developer)

<Frame>
    <img src="https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=67da3bca3f3a091176ced262b083b3ae" alt="Base URL" data-og-width="1346" width="1346" data-og-height="264" height="264" data-path="images/app-settings-base-url.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=280&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=ccf4f95fc76df44738b3053e97a9300f 280w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=560&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=a45e8bc88a009107388904541aeac3bc 560w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=840&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=e550fe7b605d2675d4a73cb032888669 840w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=1100&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=d236a5e9edfa7753cb53e5955c15da30 1100w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=1650&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=564087d3e273528fed7d59e0bc5f47ae 1650w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=2500&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=a507e6bcd85c907f69cf35f5c3c8352f 2500w" />
</Frame>

2. Create your API endpoint

```ts app/api/user/route.ts theme={null}
import { whopSdk } from "@/lib/whop";

export async function GET(request: Request) {
  const { userId } = await whopSdk.verifyUserToken(request.headers);

  const user = await whopSdk.users.getUser({ userId });

  return Response.json(user, { status: 200 });
}
```

See the [Set up the API client](/sdk/whop-api-client) page for how to configure the SDK.

3. Make a fetch request to your API endpoint from your react native app using the returned `apiOrigin` from `__internal_execSync("getAppApiOrigin", {})`

<Note>
  It's important to use the `apiOrigin` to make authenticated requests to your API endpoints.
</Note>

<CodeGroup>
  ```tsx TanStack Query theme={null}
  import { useQuery } from "@tanstack/react-query";
  import { __internal_execSync } from "@whop/react-native";
  import { Text } from "react-native";

  const { apiOrigin } = __internal_execSync("getAppApiOrigin", {});

  export function User() {
    const { data: user, isPending } = useQuery({
      queryKey: ["user"],
      queryFn: () => fetch(`${apiOrigin}/api/user`).then((res) => res.json()),
    });

    if (isPending) {
      return <Text>Loading...</Text>;
    }

    return <Text>{user?.name}</Text>;
  }
  ```

  ```tsx SWR theme={null}
  import { __internal_execSync } from "@whop/react-native";
  import { Text } from "react-native";
  import useSWR from "swr";

  const { apiOrigin } = __internal_execSync("getAppApiOrigin", {});

  const fetcher = (url: string) => fetch(url).then((r) => r.json());

  export function User() {
    const { data: user, isLoading } = useSWR(`${apiOrigin}/api/user`, fetcher);

    if (isLoading) {
      return <Text>Loading...</Text>;
    }

    return <Text>{user?.name}</Text>;
  }
  ```
</CodeGroup>

## Examples

### Check for access to an experience

<CodeGroup>
  ```tsx protected-component.tsx theme={null}
  import { useQuery } from "@tanstack/react-query";
  import { __internal_execSync } from "@whop/react-native";
  import { Text } from "react-native";

  const { apiOrigin } = __internal_execSync("getAppApiOrigin", {});

  export function ProtectedComponent({ experienceId }: { experienceId: string }) {
    const { data: access, isPending } = useQuery({
      queryKey: ["access", experienceId],
      queryFn: () =>
        fetch(
          `${apiOrigin}/api/access/experience?experienceId=${experienceId}`,
        ).then((res) => res.json()),
    });

    if (isPending) {
      return <Text>Loading...</Text>;
    }

    if (!access?.hasAccess) {
      return <Text>Forbidden</Text>;
    }

    return <Text>{JSON.stringify(access)}</Text>;
  }
  ```

  ```tsx route.ts theme={null}
  // app/api/access/experience/route.ts

  import { whopSdk } from "@/lib/whop";
  import { NextRequest } from "next/server";

  export async function GET(request: NextRequest) {
    const searchParams = request.nextUrl.searchParams;

    const experienceId = searchParams.get("experienceId");
    if (!experienceId) {
      return new Response("Experience ID is required", { status: 400 });
    }

    const { userId } = await whopSdk.verifyUserToken(request.headers);

    const access = await whopSdk.access.checkIfUserHasAccessToExperience({
      experienceId,
      userId,
    });

    return Response.json(access, { status: 200 });
  }
  ```
</CodeGroup>

### Check for access to a company

<CodeGroup>
  ```tsx protected-component.tsx theme={null}
  import { useQuery } from "@tanstack/react-query";
  import { __internal_execSync } from "@whop/react-native";
  import { Text } from "react-native";

  const { apiOrigin } = __internal_execSync("getAppApiOrigin", {});

  export function ProtectedComponent({ companyId }: { companyId: string }) {
    const { data: access, isPending } = useQuery({
      queryKey: ["access", companyId],
      queryFn: () =>
        fetch(`${apiOrigin}/api/access/company?companyId=${companyId}`).then(
          (res) => res.json(),
        ),
    });

    if (isPending) {
      return <Text>Loading...</Text>;
    }

    if (access?.accessLevel !== "admin") {
      return <Text>Forbidden</Text>;
    }

    return <Text>{JSON.stringify(access)}</Text>;
  }
  ```

  ```tsx route.ts theme={null}
  // app/api/access/company/route.ts

  import { whopSdk } from "@/lib/whop";
  import { NextRequest } from "next/server";

  export async function GET(request: NextRequest) {
    const searchParams = request.nextUrl.searchParams;

    const companyId = searchParams.get("companyId");
    if (!companyId) {
      return new Response("Company ID is required", { status: 400 });
    }

    const { userId } = await whopSdk.verifyUserToken(request.headers);

    const access = await whopSdk.access.checkIfUserHasAccessToCompany({
      companyId,
      userId,
    });

    return Response.json(access, { status: 200 });
  }
  ```
</CodeGroup>


# Installation
Source: https://docs.whop.com/apps/react-native/installation

Create a new Whop React Native app.

***

## System requirements

Before you begin, make sure your system meets the following requirements:

* [Node.js 22](https://nodejs.org/) or later.
* [pnpm 9.15](https://pnpm.io/) or later.

To check run `node -v` and `pnpm -v`.

***

## Create your app

The easiest way to create a new Whop React Native app is by using `create @whop/react-native`, which will set up a new project for you.

```bash  theme={null}
pnpm create @whop/react-native@latest
```

## Preview your app

To preview your app you will need to deploy a [development build](/apps/react-native/deploying#deploy-a-development-build) and install your app into your whop.

<Note>
  Every time you want to preview new changes, you will need to deploy a new development build.
</Note>

### 1. Configure environment variables

Create a `.env.local` file in the root directory and fill in your values:

```
WHOP_API_KEY=your_api_key
NEXT_PUBLIC_WHOP_APP_ID=your_app_id
NEXT_PUBLIC_WHOP_AGENT_USER_ID=your_agent_user_id
NEXT_PUBLIC_WHOP_COMPANY_ID=your_company_id
```

Get these credentials from the [Whop Developer Dashboard](https://whop.com/dashboard/developer):

1. Go to the Whop Developer Dashboard
2. Create a new app or select an existing one
3. Copy the environment variables from the app settings

### 2. Deploy a development build

Use the `ship` command to build and upload a development build of your app:

```bash  theme={null}
pnpm ship
```

<Info>
  The `ship` command will NOT push the app to existing users of your app. It is
  safe to run on existing web apps too, meaning you can progressively migrate
  your app to react native.
</Info>

See the [Deploying](/apps/react-native/deploying) page for more information.

### 3. Preview on your phone

Use the `preview` command to install your app into your whop and preview it on your phone:

```bash  theme={null}
pnpm preview
```

<Warning>
  To preview your app, you must **SHAKE YOUR PHONE**. This enables "dev mode" and allows you to see the latest "non production" react native builds.
</Warning>

See the [Troubleshooting](/apps/react-native/troubleshooting) page if you're having issues.


# Project Structure
Source: https://docs.whop.com/apps/react-native/project-structure



***

<Frame>
    <img src="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=2252ed3982bb73023b2ccc70204071a0" alt="Project Structure" data-og-width="2080" width="2080" data-og-height="1152" height="1152" data-path="images/react-native-project-structure.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=280&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=896706681cc48e47c731089dbe383d2a 280w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=560&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=61419ab654081eee737b8ee4474fec82 560w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=840&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=cc78e724ac38561f5ae39913449646c4 840w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=1100&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=c62a4ad6ebd739addb8421e0b9244e18 1100w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=1650&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=4e66efeea98ab6ae0b9062494a2c03b3 1650w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=2500&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=e13f8dc08819a46e2e94fb54edadffeb 2500w" />
</Frame>

* `src/views` contains the different views that make up your app.
* [`src/views/experience-view.tsx`](https://github.com/whopio/whop-sdk-ts/blob/main/packages/create-react-native/template/src/views/experience-view.tsx) is the entry point for your app's experience view.
* [`src/views/dashboard-view.tsx`](https://github.com/whopio/whop-sdk-ts/blob/main/packages/create-react-native/template/src/views/dashboard-view.tsx) is the entry point for your app's dashboard view.
* [`src/views/discover-view.tsx`](https://github.com/whopio/whop-sdk-ts/blob/main/packages/create-react-native/template/src/views/discover-view.tsx) is the entry point for your app's discover view.


# Styling
Source: https://docs.whop.com/apps/react-native/styling



***

## Color themes

React native by default exposes a `useColorScheme` hook that you can use to get the current color scheme of the device. This works correctly out of the box on whop react native apps too!.

While we are still building our UI kit, you can use the following `useColors` hook as inspiration to build your own dynamic color scheme:

```bash  theme={null}
# Install the radix ui colors package
pnpm i @radix-ui/colors
```

```tsx Usage theme={null}
function MyComponent() {
  const colors = useColors();

  return <View style={{ backgroundColor: colors.gray1 }} />;
}
```

Hook implementation to copy:

```tsx use-colors.ts expandable theme={null}
import {
  amber,
  amberA,
  amberDark,
  amberDarkA,
  blue,
  blueA,
  blueDark,
  blueDarkA,
  gray,
  grayA,
  grayDark,
  grayDarkA,
  green,
  greenA,
  greenDark,
  greenDarkA,
  red,
  redA,
  redDark,
  redDarkA,
} from "@radix-ui/colors";
import { useColorScheme } from "react-native";

export function useColors() {
  const colorScheme = useColorScheme();
  const isDark = colorScheme === "dark";

  // Create all the color groups
  const _grayA = isDark ? grayDarkA : grayA;
  const _gray = isDark ? grayDark : gray;
  const _blueA = isDark ? blueDarkA : blueA;
  const _blue = isDark ? blueDark : blue;
  const _redA = isDark ? redDarkA : redA;
  const _red = isDark ? redDark : red;
  const _amberA = isDark ? amberDarkA : amberA;
  const _amber = isDark ? amberDark : amber;
  const _greenA = isDark ? greenDarkA : greenA;
  const _green = isDark ? greenDark : green;

  // Merge them
  return {
    transparent: "transparent" as const,
    ..._grayA,
    ..._gray,
    ..._blueA,
    ..._blue,
    ..._redA,
    ..._red,
    ..._amberA,
    ..._amber,
    ..._greenA,
    ..._green,
  };
}
```


# Troubleshooting
Source: https://docs.whop.com/apps/react-native/troubleshooting



***

### I can't preview my app

Make sure you installed the app into your whop and enabled dev mode by **shaking your phone**.

<Frame>
    <img src="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=f240d70ac15b40dc48c0723a70401fb9" alt="Dev mode" data-og-width="586" width="586" data-og-height="313" height="313" data-path="images/react-native-dev-mode.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=280&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=61c0cbb8afc95f83fc1fabff9c6d9f3a 280w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=560&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=9a1467e3f549da360c23438d6b61817d 560w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=840&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=66148c0f31051ba567d70afc60a13bd5 840w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=1100&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=3ecb7fab1baaca1661c87edd454da7f6 1100w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=1650&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=64ef377e732085bdf0d522132a0e6c85 1650w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=2500&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=09f220b9d26c7d08055682cc2de661b4 2500w" />
</Frame>

### Command "preview" not found

If you're missing the `preview` command, you can instead use:

```bash  theme={null}
whop-react-native install
```


# Using Libraries
Source: https://docs.whop.com/apps/react-native/using-libraries



***

## Native Integration

The beauty of react native is its rich integration with native platform features and APIs.

The Whop app exposes a set of common powerful native building blocks your can directly use in your react native app.

Features like video playback, camera access, native gestures and animations are available already on mobile platforms.
Web support provides access to browser APIs and web-specific features.
We plan on expanding the capabilities to allow many different kinds of apps to be built!

You can use these libraries pinned to these version:

* `react-native-nitro-modules@0.26.3`
* `react-native-video@6.10.2`
* `@d11/react-native-fast-image@8.10.0`
* `react-native-svg@15.12.0`
* `react-native-webview@13.15.0`
* `react-native-reanimated@3.18.0`
* `react-native-gesture-handler@2.27.2`
* `react-native-haptic-feedback@2.3.3`
* `react-native-vision-camera@4.7.1`
* `react-native-safe-area-context@5.5.2`
* `lottie-react-native@7.3.2`
* `react-native-image-picker@8.2.1`


# null
Source: https://docs.whop.com/apps/tutorials



Welcome to Whop's tutorials section! Here you'll find detailed, step-by-step guides to help you build various types of applications using Whop's API.

## Getting Started

More tutorials coming soon! Check back regularly for new content.

<CardGroup cols={2}>
  <Card title="Sell an AI image generator to creators" href="/apps/tutorials/ai-image-generator" icon="webhook" color="#8b5cf6">
    Build a ChatGPT-powered image generator and creators will be able to install it to their whops.
  </Card>

  <Card title="Build a chat bot agent" href="/apps/tutorials/chat-bot" icon="robot" color="#0ea5e9">
    Learn how to build an AI chatbot that can respond to DMs using Whop's API.
  </Card>

  <Card title="Sell an AI car customizer" icon="car" color="#16a34a" href="/apps/tutorials/ai-car-customizer">
    Build an app to customize cars with AI. Charge users to customize their cars.
  </Card>

  <Card title="Build a creator led betting game" href="https://www.youtube.com/watch?v=-zKMt3a8GJ4" icon="video" color="#16a34a" img="https://i.ytimg.com/vi/-zKMt3a8GJ4/maxresdefault.jpg">
    Watch an end to end tutorial on how to build a creator led betting game with Next.js and Whop APIs.
  </Card>
</CardGroup>


# AI car customizer
Source: https://docs.whop.com/apps/tutorials/ai-car-customizer

Build a GPT-powered car modification app and creators will be able to install it to their whops

<Tip>
  This tutorial was submitted by
  [@AbdullahZHD](https://whop.com/@abdullahzahid), a member of the Whop
  Developers community. [Submit your own tutorial](https://whop.com/developers)
  and get paid real \$!
</Tip>

## Summary

This tutorial will guide you through building a car modification AI app using Next.js, Shadcn UI, and OpenAI.

View the final product [here](https://whop.com/apps/app_S42iB0COVVUVwO/install/) by installing the app to your whop.

## 1. Set up your Next.js project

Clone the Car Modification AI repository:

```bash  theme={null}
git clone https://github.com/AbdullahZHD/car-modification-ai-whop
cd car-modification-ai-whop
```

Install dependencies:

<CodeGroup>
  ```bash pnpm theme={null}
  pnpm i
  ```

  ```bash npm theme={null}
  npm i
  ```

  ```bash yarn theme={null}
  yarn i
  ```
</CodeGroup>

## 2. Get your Whop API credentials

<Steps>
  <Step title="Create a Whop App">
    1. Go to [https://whop.com/dashboard](https://whop.com/dashboard)
    2. Navigate to **Developer**
    3. Click the **Create App** button
    4. Give your app a name like "Car Modification AI"
    5. Click **Create**
  </Step>

  <Step title="Get your API Key, Agent User ID, and App ID">
    After creating your app:

    1. Copy the **App API Key** - you'll need this for `WHOP_API_KEY`
    2. Copy the **Agent User ID** - you'll need this for `WHOP_AGENT_USER_ID`
    3. Copy the **App ID** - you'll need this for `WHOP_APP_ID`

    <Note>
      The Agent User ID is what allows your app's agent to send post the results in forum.
    </Note>
  </Step>
</Steps>

## 3. Get OpenAI API Key

<Steps>
  <Step title="Create OpenAI Account">
    1. Go to [platform.openai.com](https://platform.openai.com/)
    2. Click **Sign In** or **Sign Up**
    3. Complete the registration process
  </Step>

  <Step title="Get API Key">
    1. Go to **API Keys** in the dashboard
    2. Click **Create Key**
    3. Give it a name like **"Car Modification AI"**
    4. Copy the API key - you'll need this for `OPENAI_API_KEY` (ensure you have balance/payment method)
  </Step>
</Steps>

## 5. Configure Environment Variables

<Steps>
  <Step title="Create local environment file">
    ```bash  theme={null}
    touch .env.local
    ```
  </Step>

  <Step title="Fill in Required Variables">
    Open `.env` in your text editor and fill in these required fields:

    ```env  theme={null}
    # AI Service Configuration (Required)
    OPENAI_API_KEY=your_openai_api_key

    # Whop Integration (Required)
    WHOP_API_KEY=your_whop_api_key_here
    NEXT_PUBLIC_WHOP_AGENT_USER_ID=your_whop_agent_user_id_here
    NEXT_PUBLIC_WHOP_APP_ID=your_whop_app_id_here
    ```
  </Step>
</Steps>

## 7. Install Whop Dev Proxy

For Whop integration to work in development, you need to install the Whop dev proxy globally:

```bash  theme={null}
npm install @whop-apps/dev-proxy -g
```

<Note>
  The Whop dev proxy is required for the iframe integration to work properly
  during development.
</Note>

## 8. Run the Application

**Lets start the Web Server with Whop Proxy**.
Run this command to start both the Whop proxy and Next.js development server:

```bash  theme={null}
whop-proxy --command 'npx next dev --turbopack'
```

You should see output indicating both the proxy and Next.js are running. The web app will be available at [http://localhost:3000](http://localhost:3000)

{" "}

<Warning>
  Do NOT use `npm run dev` alone - it won't include the Whop proxy and the
  iframe integration won't work!
</Warning>

## 9. Configure App Settings in Whop

**Important**: You must configure these settings BEFORE installing the app to your community.

<Steps>
  <Step title="Set Base URL and App Path">
    1. Go to your Whop app dashboard → **Developer** → Your App
    2. In the **Hosting** section, configure:
       * **Base URL**: `http://localhost:3000/`
       * **App path**: `/experiences/[experienceId]`
    3. Click **Save** to update the settings

    <Warning>
      If you skip this step, the app installation and iframe integration won't work properly!
    </Warning>
  </Step>
</Steps>

## 10. Accessing the app (locally)

<Steps>
  <Step title="Access the application via Whop iframe">
    1. After installing the app, click **Open Whop** in the top right 2. When
       redirected to Whop, click the **Settings** button 3. Change the dropdown
       from **Production** to **Localhost** 4. Choose your port (usually **3000**)
    2. You'll now see the app running in Localhost.
  </Step>
</Steps>

## 11. Deploy to Vercel

Now let's deploy your car modification AI app to production so users can access it from anywhere.

**Push your code to GitHub**

First, commit all your changes and push to GitHub:

```bash  theme={null}
git add .
git commit -m "Complete car modification AI app"
git remote add origin https://github.com/your-username/your-repo.git
git branch -M main
git push -u origin main
```

**Create and deploy on Vercel**

<Steps>
  <Step title="Create a new project on Vercel">
    Go to [vercel.com](https://vercel.com) and click "New Project"
  </Step>

  <Step title="Import your GitHub repository">
    Connect your GitHub account and import the repository containing your car
    modification app
  </Step>

  <Step title="Add environment variables">
    In the Vercel deployment settings, add all your environment variables:

    ```env  theme={null}
    # AI Service Configuration (Required)
    OPENAI_API_KEY=your_openai_api_key

    # Whop Integration (Required)
    WHOP_API_KEY=your_whop_api_key_here
    NEXT_PUBLIC_WHOP_AGENT_USER_ID=your_whop_agent_user_id_here
    NEXT_PUBLIC_WHOP_APP_ID=your_whop_app_id_here
    ```
  </Step>

  <Step title="Deploy">Click "Deploy" and wait for the build to complete</Step>

  <Step title="Copy your Vercel URL">
    Once deployed, copy your production URL (e.g., `https://your-app.vercel.app`)
  </Step>
</Steps>

**Update your Whop app settings**

<Steps>
  <Step title="Open Whop Developer Settings">
    Go to Whop dashboard and navigate to your app's settings in the developer panel
  </Step>

  <Step title="Update Base URL">
    In the "App Settings" section, change the Base URL from
    `http://localhost:3000` to your Vercel URL: `https://your-app.vercel.app`
  </Step>

  <Step title="Save and test">
    Save the changes and test your app installation to ensure production mode is working (by switching to **Production** in the iframe)
  </Step>
</Steps>

<Warning>
  **Vercel Timeout Limitation**: Vercel functions automatically timeout after 60
  seconds on a hobby account. AI image generation might take longer than 60
  seconds, which may cause errors. You can upgrade to a paid Vercel account to
  extend timeout limits.
</Warning>

## 12. Install to Your Whop Community

<Steps>
  <Step title="Install the App">
    1. Go to your Whop company dashboard 2. Navigate to **Settings** → **API
       keys** 3. Click on your Car Modification AI app (or whatever name you gave
       it) 4. Find and copy the **Installation Link** 5. Visit the installation
       link and grant the necessary permissions
  </Step>
</Steps>

## Troubleshooting

<AccordionGroup>
  <Accordion title="AI responses not working">
    1. Verify your OpenAI API key is correct
    2. Verify you have balance in the OpenAI Developer account
  </Accordion>

  {" "}

  <Accordion title="Expected car modification not happening">
    1. Ensure you use a high quality image with a car in it 2. Use a clear prompt,
       such as "add a spoiler to this car"
  </Accordion>

  <Accordion title="Can't access in Localhost">
    1. Make sure you're using the Whop iframe method
    2. Ensure you've set the environment to localhost with correct port
    3. Check that your Whop App API key is correct, and all other environment variables as well
  </Accordion>
</AccordionGroup>

## Need Help?

* Join the [Developer Whop](https://whop.com/developers)
* View the source code of this app [here](https://github.com/AbdullahZHD/car-modification-ai-whop)
* DM [@AbdullahZHD on Whop](https://whop.com/@abdullahzahid)

***


# AI image generator
Source: https://docs.whop.com/apps/tutorials/ai-image-generator

Build a ChatGPT-powered image generator and creators will be able to install it to their whops.

<Tip>
  This tutorial was submitted by [@s](https://whop.com/@s), a member of the Whop
  Developers community. [Submit your own tutorial](https://whop.com/developers)
  and get paid real \$!
</Tip>

## Summary

This tutorial will guide you through building a ChatGPT-powered image generator using Next.js, Shadcn UI, and OpenAI.

View the final product [here](https://whop.com/apps/app_KHqcozSfEGNyhl/install/) by installing the app to your whop.

## 1. Set up your Next.js project

Clone our Next.js app template:

```bash  theme={null}
npx create-next-app@latest ai-image-generator -e https://github.com/whopio/whop-nextjs-app-template
```

Enter the project directory:

```bash  theme={null}
cd ai-image-generator
```

Install dependencies:

<CodeGroup>
  ```bash pnpm theme={null}
  pnpm i
  ```

  ```bash npm theme={null}
  npm i
  ```

  ```bash yarn theme={null}
  yarn i
  ```
</CodeGroup>

Run the app locally:

<CodeGroup>
  ```bash pnpm theme={null}
  pnpm dev
  ```

  ```bash npm theme={null}
  npm run dev
  ```

  ```bash yarn theme={null}
  yarn dev
  ```
</CodeGroup>

Now open [http://localhost:3000](http://localhost:3000) and follow the directions on the page.

## 2. Start developing your app

After following the instructions on the page, you'll be able to start developing your app. You should have:

* Created your app
* Set up your `.env.local` file
* Installed your app into your whop

Ensure you're developing in `localhost` mode. See example:

<Frame>
  <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/change-to-localhost-mode.gif?s=f1e8d61f6b70d057cb73f10116a84764" alt="How to change to localhost mode" data-og-width="800" width="800" data-og-height="538" height="538" data-path="how-to-videos/change-to-localhost-mode.gif" data-optimize="true" data-opv="3" />
</Frame>

## 3. Set up your database

### Create a Supabase database

Go to [Supabase](https://supabase.com) and create a new account if you don't have one

Create a new project and copy your database password

### Set up Prisma

Now, let's set up Prisma in your project:

<CodeGroup>
  ```bash pnpm theme={null}
  pnpm add prisma @prisma/client
  pnpm prisma init
  ```

  ```bash npm theme={null}
  npm install prisma @prisma/client
  npx prisma init
  ```

  ```bash yarn theme={null}
  yarn add prisma @prisma/client
  yarn prisma init
  ```
</CodeGroup>

The `prisma init` command will create a new `prisma` directory with a `schema.prisma` file

Now, go copy your database connection strings from Supabase for Prisma to use. Then paste the values in your `.env.local` file.

Replace your password with `[YOUR-PASSWORD]`

<Frame>
  <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/prisma-setup.gif?s=f5daabef84b11a1ab7daab9c390817e3" alt="How to setup Prisma with Supabase" data-og-width="800" width="800" data-og-height="504" height="504" data-path="how-to-videos/prisma-setup.gif" data-optimize="true" data-opv="3" />
</Frame>

Replace the contents of `prisma/schema.prisma` with:

```prisma prisma/schema.prisma theme={null}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Experience {
  id           String @unique
  prompt       String
}
```

Now generate your database and Prisma client:

> These are custom scripts we defined in the package.json file to load your env from .env.local and run the prisma commands. If you want to use the native prisma CLI, you'll need to move your `.env.local` to `.env` and run the commands manually.

<CodeGroup>
  ```bash pnpm theme={null}
  pnpm prisma:generate
  pnpm prisma:db:push
  ```

  ```bash npm theme={null}
  npm run prisma:generate
  npm run prisma:db push
  ```

  ```bash yarn theme={null}
  yarn prisma:generate
  yarn prisma:db:push
  ```
</CodeGroup>

## 4. Install additional dependencies

### Add the required packages

<CodeGroup>
  ```bash pnpm theme={null}
  pnpm add openai sharp react-dropzone @radix-ui/react-slot gsap
  ```

  ```bash npm theme={null}
  npm install openai sharp react-dropzone @radix-ui/react-slot gsap
  ```

  ```bash yarn theme={null}
  yarn add openai sharp react-dropzone @radix-ui/react-slot gsap
  ```
</CodeGroup>

### Install a Shadcn button

<CodeGroup>
  ```bash pnpm theme={null}
  pnpm dlx shadcn@latest add button
  ```

  ```bash npm theme={null}
  npx shadcn@latest add button
  ```

  ```bash yarn theme={null}
  yarn shadcn@latest add button
  ```
</CodeGroup>

### Add your OpenAI API key

Add to your `.env.local`:

```env .env.local theme={null}
# OpenAI API Key for image generation
OPENAI_API_KEY=your_openai_api_key_here
```

## 5. Create components

### `<ImageUploader>`

This component handles image upload and generation.

```typescript app/components/image-uploader.tsx [expandable] theme={null}
"use client";

import { Button } from "@/components/ui/button";
import gsap from "gsap";
import { DrawSVGPlugin } from "gsap/DrawSVGPlugin";
import Image from "next/image";
import { useCallback, useEffect, useRef, useState } from "react";
import { useDropzone } from "react-dropzone";

gsap.registerPlugin(DrawSVGPlugin);

function Loader() {
  const svgRef = useRef<SVGSVGElement>(null);

  useEffect(() => {
    if (!svgRef.current) return;

    const mid = gsap.utils.toArray("#mid *").reverse();

    const fatTl = gsap.timeline();
    fatTl.fromTo(
      "#fat *",
      {
        drawSVG: "0% 20%",
      },
      {
        drawSVG: "40% 69%",
        stagger: {
          each: 0.05,
          repeat: -1,
          yoyo: true,
        },
        duration: 0.75,
        ease: "sine.inOut",
      }
    );

    const midTl = gsap.timeline();
    midTl.fromTo(
      mid,
      {
        drawSVG: "0% 20%",
      },
      {
        drawSVG: "56% 86%",
        stagger: {
          each: 0.08,
          repeat: -1,
          yoyo: true,
        },
        duration: 0.81,
        ease: "sine.inOut",
      }
    );

    const thinTl = gsap.timeline();
    thinTl.fromTo(
      "#thin *",
      {
        drawSVG: "20% 51%",
      },
      {
        drawSVG: "40% 80%",
        stagger: {
          each: 0.092,
          repeat: -1,
          yoyo: true,
        },
        duration: 1.4,
        ease: "sine.inOut",
      }
    );

    const mainTl = gsap.timeline();
    mainTl.add([fatTl, midTl, thinTl], 0);

    return () => {
      mainTl.kill();
    };
  }, []);

  return (
    <div className="w-full h-full flex items-center justify-center">
      <svg
        ref={svgRef}
        id="mainSVG"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 800 600"
        className="w-100 h-100"
        role="img"
        aria-label="Loading animation"
      >
        <title>Loading animation</title>

        <linearGradient
          id="grad1"
          x1="393.05"
          y1="400"
          x2="393.05"
          y2="200"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0" stopColor="#3D28F7" />

          <stop offset="1" stopColor="#FF3C20" />
        </linearGradient>

        <linearGradient
          id="grad2"
          x1="393.05"
          y1="391.01"
          x2="393.05"
          y2="247.71"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0" stopColor="#F72785" />

          <stop offset="1" stopColor="#FFEE2A" />
        </linearGradient>

        <linearGradient
          id="grad3"
          x1="393.05"
          y1="400"
          x2="393.05"
          y2="200"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0" stopColor="#FF6820" />

          <stop offset="1" stopColor="#D1FE21" />
        </linearGradient>

        <linearGradient
          id="grad4"
          x1="393.05"
          y1="400"
          x2="393.05"
          y2="250"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0" stopColor="#35AAF9" />

          <stop offset="1" stopColor="#993BDC" />
        </linearGradient>

        <g>
          <g
            id="bg"
            stroke="url(#grad3)"
            fill="none"
            strokeLinecap="round"
            strokeMiterlimit="10"
          >
            <path d="M594.5,250v-.29L594.6,350" />

            <line x1="580.5" y1="390" x2="580.32" y2="210" />

            <line x1="565.5" y1="415" x2="565.28" y2="185" />

            <line x1="550.5" y1="434" x2="550.24" y2="166" />

            <line x1="535.5" y1="449" x2="535.22" y2="151" />

            <line x1="520.5" y1="462" x2="520.2" y2="138" />

            <line x1="505.5" y1="472" x2="505.18" y2="128" />

            <line x1="490.5" y1="480" x2="490.16" y2="120" />

            <line x1="475.5" y1="487" x2="475.14" y2="113" />

            <line x1="460.5" y1="492" x2="460.14" y2="108" />

            <line x1="445.5" y1="496" x2="445.12" y2="104" />

            <line x1="430.5" y1="499" x2="430.12" y2="101" />

            <line x1="415.5" y1="501" x2="415.12" y2="99" />

            <line x1="400.5" y1="501" x2="400.12" y2="99" />

            <line x1="385.5" y1="501" x2="385.12" y2="99" />

            <line x1="370.5" y1="499" x2="370.12" y2="101" />

            <line x1="355.5" y1="496" x2="355.12" y2="104" />

            <line x1="340.5" y1="492" x2="340.14" y2="108" />

            <line x1="325.5" y1="487" x2="325.14" y2="113" />

            <line x1="310.5" y1="480" x2="310.16" y2="120" />

            <line x1="295.5" y1="472" x2="295.18" y2="128" />

            <line x1="280.5" y1="462" x2="280.2" y2="138" />

            <line x1="265.5" y1="449" x2="265.22" y2="151" />

            <line x1="250.5" y1="434" x2="250.24" y2="166" />

            <line x1="235.5" y1="415" x2="235.28" y2="185" />

            <line x1="220.5" y1="390" x2="220.32" y2="210" />

            <polyline points="204.5 250 204.5 350.29 204.5 350" />
          </g>

          <g
            id="thin"
            stroke="url(#grad1)"
            fill="none"
            strokeLinecap="round"
            strokeMiterlimit="10"
            strokeWidth="2"
          >
            <path d="M594.6,350l-.1-100.29V250" />

            <line x1="580.5" y1="390" x2="580.32" y2="210" />

            <line x1="565.5" y1="415" x2="565.28" y2="185" />

            <line x1="550.5" y1="434" x2="550.24" y2="166" />

            <line x1="535.5" y1="449" x2="535.22" y2="151" />

            <line x1="520.5" y1="462" x2="520.2" y2="138" />

            <line x1="505.5" y1="472" x2="505.18" y2="128" />

            <line x1="490.5" y1="480" x2="490.16" y2="120" />

            <line x1="475.5" y1="487" x2="475.14" y2="113" />

            <line x1="460.5" y1="492" x2="460.14" y2="108" />

            <line x1="445.5" y1="496" x2="445.12" y2="104" />

            <line x1="430.5" y1="499" x2="430.12" y2="101" />

            <line x1="415.5" y1="501" x2="415.12" y2="99" />

            <line x1="400.5" y1="501" x2="400.12" y2="99" />

            <line x1="385.5" y1="501" x2="385.12" y2="99" />

            <line x1="370.5" y1="499" x2="370.12" y2="101" />

            <line x1="355.5" y1="496" x2="355.12" y2="104" />

            <line x1="340.5" y1="492" x2="340.14" y2="108" />

            <line x1="325.5" y1="487" x2="325.14" y2="113" />

            <line x1="310.5" y1="480" x2="310.16" y2="120" />

            <line x1="295.5" y1="472" x2="295.18" y2="128" />

            <line x1="280.5" y1="462" x2="280.2" y2="138" />

            <line x1="265.5" y1="449" x2="265.22" y2="151" />

            <line x1="250.5" y1="434" x2="250.24" y2="166" />

            <line x1="235.5" y1="415" x2="235.28" y2="185" />

            <line x1="220.5" y1="390" x2="220.32" y2="210" />

            <polyline points="204.5 350 204.5 350.29 204.5 250" />
          </g>

          <g
            id="mid"
            stroke="url(#grad2)"
            fill="none"
            strokeLinecap="round"
            strokeMiterlimit="10"
            strokeWidth="4"
          >
            <path d="M594.6,350l-.1-100.29V250" />

            <line x1="580.5" y1="390" x2="580.32" y2="210" />

            <line x1="565.5" y1="415" x2="565.28" y2="185" />

            <line x1="550.5" y1="434" x2="550.24" y2="166" />

            <line x1="535.5" y1="449" x2="535.22" y2="151" />

            <line x1="520.5" y1="462" x2="520.2" y2="138" />

            <line x1="505.5" y1="472" x2="505.18" y2="128" />

            <line x1="490.5" y1="480" x2="490.16" y2="120" />

            <line x1="475.5" y1="487" x2="475.14" y2="113" />

            <line x1="460.5" y1="492" x2="460.14" y2="108" />

            <line x1="445.5" y1="496" x2="445.12" y2="104" />

            <line x1="430.5" y1="499" x2="430.12" y2="101" />

            <line x1="415.5" y1="501" x2="415.12" y2="99" />

            <line x1="400.5" y1="501" x2="400.12" y2="99" />

            <line x1="385.5" y1="501" x2="385.12" y2="99" />

            <line x1="370.5" y1="499" x2="370.12" y2="101" />

            <line x1="355.5" y1="496" x2="355.12" y2="104" />

            <line x1="340.5" y1="492" x2="340.14" y2="108" />

            <line x1="325.5" y1="487" x2="325.14" y2="113" />

            <line x1="310.5" y1="480" x2="310.16" y2="120" />

            <line x1="295.5" y1="472" x2="295.18" y2="128" />

            <line x1="280.5" y1="462" x2="280.2" y2="138" />

            <line x1="265.5" y1="449" x2="265.22" y2="151" />

            <line x1="250.5" y1="434" x2="250.24" y2="166" />

            <line x1="235.5" y1="415" x2="235.28" y2="185" />

            <line x1="220.5" y1="390" x2="220.32" y2="210" />

            <polyline points="204.5 350 204.5 350.29 204.5 250" />
          </g>

          <g
            id="fat"
            stroke="url(#grad4)"
            fill="none"
            strokeLinecap="round"
            strokeMiterlimit="10"
            strokeWidth="7"
          >
            <path d="M594.6,350l-.1-100.29V250" />

            <line x1="580.5" y1="390" x2="580.32" y2="210" />

            <line x1="565.5" y1="415" x2="565.28" y2="185" />

            <line x1="550.5" y1="434" x2="550.24" y2="166" />

            <line x1="535.5" y1="449" x2="535.22" y2="151" />

            <line x1="520.5" y1="462" x2="520.2" y2="138" />

            <line x1="505.5" y1="472" x2="505.18" y2="128" />

            <line x1="490.5" y1="480" x2="490.16" y2="120" />

            <line x1="475.5" y1="487" x2="475.14" y2="113" />

            <line x1="460.5" y1="492" x2="460.14" y2="108" />

            <line x1="445.5" y1="496" x2="445.12" y2="104" />

            <line x1="430.5" y1="499" x2="430.12" y2="101" />

            <line x1="415.5" y1="501" x2="415.12" y2="99" />

            <line x1="400.5" y1="501" x2="400.12" y2="99" />

            <line x1="385.5" y1="501" x2="385.12" y2="99" />

            <line x1="370.5" y1="499" x2="370.12" y2="101" />

            <line x1="355.5" y1="496" x2="355.12" y2="104" />

            <line x1="340.5" y1="492" x2="340.14" y2="108" />

            <line x1="325.5" y1="487" x2="325.14" y2="113" />

            <line x1="310.5" y1="480" x2="310.16" y2="120" />

            <line x1="295.5" y1="472" x2="295.18" y2="128" />

            <line x1="280.5" y1="462" x2="280.2" y2="138" />

            <line x1="265.5" y1="449" x2="265.22" y2="151" />

            <line x1="250.5" y1="434" x2="250.24" y2="166" />

            <line x1="235.5" y1="415" x2="235.28" y2="185" />

            <line x1="220.5" y1="390" x2="220.32" y2="210" />

            <polyline points="204.5 350 204.5 350.29 204.5 250" />
          </g>
        </g>
      </svg>
    </div>
  );
}

export default function ImageUploader({
  experienceId,
}: {
  experienceId: string;
}) {
  const [image, setImage] = useState<{
    file: File;
    preview: string;
  } | null>(null);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);

  // Clean up the object URL when the image is changed
  useEffect(() => {
    const objectUrl = image?.preview;
    if (objectUrl) {
      return () => {
        URL.revokeObjectURL(objectUrl);
      };
    }
  }, [image?.preview]);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      setImage({
        file,
        preview: URL.createObjectURL(file),
      });
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/*": [".jpeg", ".jpg", ".png", ".gif"],
    },
    maxFiles: 1,
  });

  const handleUpload = async () => {
    if (!image) return;
    try {
      const response = await fetch(
        `/api/experiences/${experienceId}/generate`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: image.file,
        }
      );

      if (!response.ok) {
        throw new Error("Failed to get upload URL");
      }

      const data = await response.json();
      setGeneratedImage(data.imageUrl);
    } catch (error) {
      console.error("Error uploading image:", error);
      throw error;
    }
  };

  const handleGenerate = async () => {
    if (!image) return;
    setIsGenerating(true);
    setUploadProgress(0);
    try {
      await handleUpload();
    } catch (error) {
      console.error("Error generating image:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleReset = () => {
    setImage(null);
    setGeneratedImage(null);
    setUploadProgress(0);
  };

  if (isGenerating) {
    return (
      <div className="w-full max-w-2xl mx-auto p-4 space-y-8">
        <div className="w-full aspect-square flex items-center justify-center">
          <Loader />
        </div>
        <div className="flex gap-4">
          <Button onClick={handleReset} variant="outline" className="flex-1">
            Cancel
          </Button>
          <Button disabled className="flex-1">
            Generating...
          </Button>
        </div>
      </div>
    );
  }

  const displayImage = generatedImage || image?.preview;

  return (
    <div className="w-full max-w-2xl mx-auto p-4 space-y-8">
      <div
        {...getRootProps()}
        className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors
            ${
              isDragActive
                ? "border-blue-500 bg-blue-50"
                : "border-gray-300 hover:border-blue-400"
            }`}
      >
        <input {...getInputProps()} capture="environment" />
        {displayImage ? (
          <div className="relative w-full aspect-square">
            <Image
              src={displayImage}
              alt="Uploaded image"
              fill
              className="object-contain rounded-lg"
            />
          </div>
        ) : (
          <div className="space-y-4">
            <div className="text-4xl">📸</div>
            <p className="text-gray-600">
              {isDragActive
                ? "Drop the image here..."
                : "Drag & drop an image here, or click to select"}
            </p>
            <p className="text-sm text-gray-500">Supports JPG, PNG, GIF</p>
          </div>
        )}
      </div>

      {image && (
        <div className="flex flex-col gap-4">
          {uploadProgress > 0 && uploadProgress < 100 && (
            <div className="w-full bg-gray-200 rounded-full h-2.5">
              <div
                className="bg-blue-600 h-2.5 rounded-full"
                style={{ width: `${uploadProgress}%` }}
              />
            </div>
          )}
          <div className="flex gap-4">
            <Button onClick={handleReset} variant="outline" className="flex-1">
              Reset
            </Button>
            <Button onClick={handleGenerate} className="flex-1">
              Generate Image
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}
```

### `<ExperiencePrompt>`

This component displays the experience prompt and image uploader.

```typescript app/components/experience-prompt.tsx [expandable] theme={null}
import type { AccessLevel } from "@whop/api";
import Link from "next/link";
import ImageUploader from "./image-uploader";
import { Button } from "./ui/button";

export default function ExperiencePrompt({
  prompt,
  accessLevel,
  experienceId,
}: {
  prompt: string;
  accessLevel: AccessLevel;
  experienceId: string;
}) {
  return (
    <div>
      <div className="flex justify-center items-center">
        <div className="text-4xl font-bold text-center">
          {prompt ? `"${prompt}"` : "Creator has not set a prompt yet."}
        </div>
      </div>
      {accessLevel === "admin" && (
        <div className="flex justify-center items-center">
          <Link href={`/experiences/${experienceId}/edit`}>
            <Button variant={"link"}>Edit prompt</Button>
          </Link>
        </div>
      )}
      {prompt ? <ImageUploader experienceId={experienceId} /> : null}
    </div>
  );
}
```

### `<EditExperiencePrompt>`

This component allows admins to edit the experience prompt.

```typescript app/components/edit-experience-prompt.tsx [expandable] theme={null}
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";

export default function EditExperiencePage({
  experienceId,
}: {
  experienceId: string;
}) {
  const router = useRouter();
  const [prompt, setPrompt] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const response = await fetch(`/api/experiences/${experienceId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        throw new Error("Failed to update experience");
      }

      router.push(`/experiences/${experienceId}`);
      router.refresh();
    } catch (error) {
      console.error("Error updating experience:", error);
      // You might want to show an error message to the user here
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">Edit Prompt</h1>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="prompt"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Prompt
          </label>
          <textarea
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="w-full min-h-[200px] p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter a new prompt here..."
            required
          />
        </div>

        <div className="flex gap-4">
          <Button
            type="submit"
            disabled={isLoading}
            className="bg-blue-500 hover:bg-blue-600 text-white"
          >
            {isLoading ? "Saving..." : "Save Changes"}
          </Button>

          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            disabled={isLoading}
          >
            Cancel
          </Button>
        </div>
      </form>
    </div>
  );
}
```

## 6. Create pages

### `app/experiences/[experienceId]/page.tsx`

This page displays the experience prompt and the image uploader. If the user is an admin, they can edit the prompt.

```typescript app/experiences/[experienceId]/page.tsx [expandable] theme={null}
import ExperiencePrompt from "@/components/experience-prompt";
import { whopSdk } from "@/lib/whop-sdk";
import { PrismaClient } from "@prisma/client";
import { headers } from "next/headers";

const prisma = new PrismaClient();

async function findOrCreateExperience(experienceId: string) {
  let experience = await prisma.experience.findUnique({
    where: { id: experienceId },
  });

  if (!experience) {
    experience = await prisma.experience.create({
      data: {
        id: experienceId,
        prompt: "",
      },
    });
  }

  return experience;
}

export default async function ExperiencePage({
  params,
}: {
  params: Promise<{ experienceId: string }>;
}) {
  const headersList = await headers();
  const { userId } = await whopSdk.verifyUserToken(headersList);

  const { experienceId } = await params;
  const experience = await findOrCreateExperience(experienceId);

  const hasAccess = await whopSdk.access.checkIfUserHasAccessToExperience({
    userId,
    experienceId,
  });

  return (
    <div className="flex flex-col gap-4 p-4 h-screen items-center justify-center">
      <ExperiencePrompt
        prompt={experience.prompt}
        accessLevel={hasAccess.accessLevel}
        experienceId={experienceId}
      />
    </div>
  );
}
```

### `app/experiences/[experienceId]/edit/page.tsx`

This page allows admins to edit the experience prompt.

```typescript app/experiences/[experienceId]/edit/page.tsx [expandable] theme={null}
import EditExperiencePrompt from "@/components/edit-experience-prompt";

export default async function Page({
  params,
}: {
  params: Promise<{ experienceId: string }>;
}) {
  const { experienceId } = await params;
  return <EditExperiencePrompt experienceId={experienceId} />;
}
```

## 7. Create the API routes

### `app/api/experiences/[experienceId]/generate/route.ts`

This API route generates images using OpenAI's DALL-E API.

```typescript app/api/experiences/[experienceId]/generate/route.ts [expandable] theme={null}
import { whopSdk } from "@/lib/whop-sdk";
import { PrismaClient } from "@prisma/client";
import { headers } from "next/headers";
import { NextResponse } from "next/server";
import OpenAI from "openai";
import sharp from "sharp";

const prisma = new PrismaClient();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(
  request: Request,
  { params }: { params: Promise<{ experienceId: string }> }
) {
  try {
    const { experienceId } = await params;

    if (!experienceId) {
      return NextResponse.json(
        { error: "Missing experienceId" },
        { status: 400 }
      );
    }

    const headersList = await headers();
    const userToken = await whopSdk.verifyUserToken(headersList);
    if (!userToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const hasAccess = await whopSdk.access.checkIfUserHasAccessToExperience({
      userId: userToken.userId,
      experienceId,
    });

    if (!hasAccess.hasAccess) {
      return NextResponse.json(
        { error: "Unauthorized, no access" },
        { status: 401 }
      );
    }

    const [publicUser, experience] = await Promise.all([
      whopSdk.users.getUser({
        userId: userToken.userId,
      }),
      prisma.experience.findUnique({
        where: {
          id: experienceId,
        },
      }),
    ]);

    if (!request.body || !experience?.prompt) {
      return NextResponse.json(
        { error: "Image and prompt are required" },
        { status: 400 }
      );
    }

    const originalFile = new File(
      [
        await sharp(await request.clone().arrayBuffer())
          .png()
          .toBuffer(),
      ],
      `${Date.now()}-original.png`,
      {
        type: "image/png",
      }
    );

    // Generate image using DALL-E with prompt
    const response = await openai.images.edit({
      model: "gpt-image-1",
      image: originalFile,
      prompt: experience.prompt,
      n: 1,
      size: "auto",
      quality: "low",
    });

    console.log("Response:", response);

    // Get the base64 image data from the response
    const base64Image = response.data?.[0]?.b64_json;
    if (!base64Image) {
      throw new Error("No image data returned from OpenAI");
    }
    const generatedImageBuffer = Buffer.from(base64Image, "base64");

    const generationId = crypto.randomUUID();

    const [originalFileUploadResponse, uploadResponse] = await Promise.all([
      whopSdk.attachments.uploadAttachment({
        file: originalFile,
        record: "forum_post",
      }),
      whopSdk.attachments.uploadAttachment({
        file: new File(
          [generatedImageBuffer],
          `${generationId}-generated.png`,
          {
            type: "image/png",
          }
        ),
        record: "forum_post",
      }),
    ]);

    const whopExperience = await whopSdk.experiences.getExperience({
      experienceId,
    });
    const companyId = whopExperience.experience.company.id;

    const generatedAttachmentId = uploadResponse.directUploadId;
    const originalAttachmentId = originalFileUploadResponse.directUploadId;

    const forum = await whopSdk.forums.findOrCreateForum({
      experienceId: experience.id,
      name: "AI Uploads",
    });

    const forumId = forum.createForum?.id;

    const post = await whopSdk.forums.createForumPost({
      forumExperienceId: forumId,
      content: `@${publicUser.publicUser?.username} generated this image with the prompt: "${experience.prompt}"\n\nTry it yourself here: https://whop.com/hub/${companyId}/${experience.id}/app\n\nBefore vs After ⬇️`,
      attachments: [
        { directUploadId: originalAttachmentId },
        { directUploadId: generatedAttachmentId },
      ],
    });

    return NextResponse.json({
      success: true,
      imageUrl: uploadResponse.attachment.source.url,
      postId: post?.id,
    });
  } catch (error) {
    console.error("Error generating image:", error);
    return NextResponse.json(
      { error: "Failed to generate image" },
      { status: 500 }
    );
  }
}
```

### `app/api/experiences/[experienceId]/route.ts`

This API route is a PUT operation to an experience in the database.

```typescript app/api/experiences/[experienceId]/route.ts [expandable] theme={null}
import { whopSdk } from "@/lib/whop-sdk";
import { PrismaClient } from "@prisma/client";
import { headers } from "next/headers";
import { NextResponse } from "next/server";
import { prisma } from "@/lib/db";

export async function PUT(request: Request) {
  try {
    const { prompt } = await request.json();
    const headersList = await headers();
    const userToken = await whopSdk.verifyUserToken(headersList);
    if (!userToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    const url = new URL(request.url);
    const match = url.pathname.match(/experiences\/([^/]+)/);
    const experienceId = match ? match[1] : null;

    if (!experienceId) {
      return NextResponse.json(
        { error: "Missing experienceId" },
        { status: 400 }
      );
    }

    const hasAccess = await whopSdk.access.checkIfUserHasAccessToExperience({
      userId: userToken.userId,
      experienceId,
    });
    if (hasAccess.accessLevel !== "admin") {
      return NextResponse.json(
        { error: "Unauthorized, not admin" },
        { status: 401 }
      );
    }

    const updatedExperience = await prisma.experience.update({
      where: {
        id: experienceId,
      },
      data: {
        prompt,
      },
    });

    await whopSdk.notifications.sendNotification({
      content: prompt,
      experienceId,
      title: "Prompt updated ✨",
    });

    return NextResponse.json(updatedExperience);
  } catch (error) {
    console.error("Error updating experience:", error);
    return NextResponse.json(
      { error: "Failed to update experience" },
      { status: 500 }
    );
  }
}
```

## 8. Deploy to Vercel

1. Add this script to the `scripts` section of your `package.json` to generate the Prisma client:

```json package.json theme={null}
  "scripts": {
    "postinstall": "prisma generate"
  }
```

2. Push your code to GitHub
3. Create a new project on [Vercel](https://vercel.com)
4. Import your GitHub repository
5. Add all environment variables
6. Deploy and copy your Vercel URL
7. Update your Whop app settings with the new URL in the "Base URL" field

> Vercel functions automatically timeout after 60 seconds on a hobby account. Images might take longer than 60 seconds. This will cause errors. You can upgrade to a paid account to avoid this or swap out the image generator to a different API.

Your AI image generation app is now ready! Users can upload images, apply AI transformations based on prompts, and share their creations in the community forum.

## Need Help?

* Join the [Developer Whop](https://whop.com/developers)
* View the source code of this app [here](https://github.com/whopio/whop-sdk-ts/tree/main/examples/ai-image-generator)
* DM [@s on Whop](https://whop.com/@s)

***


# Chat bot
Source: https://docs.whop.com/apps/tutorials/chat-bot

Build a production-ready AI support bot that intelligently answers questions in whop communities.

<Tip>
  This tutorial was submitted by [@script](https://whop.com/@script), a member
  of the Whop Developers community. [Submit your own
  tutorial](https://whop.com/developers) and get paid real \$!
</Tip>

## Summary

This tutorial will guide you through building a chat bot that can answer questions in whop communities. View the final product
[here](https://whop.com/apps/app_3rqpGo1tsmPDHg/install/) by installing the app to your whop.

## 1. Set up your Next.js project

Clone the AI Support Bot repository:

```bash  theme={null}
git clone https://github.com/VortexxJS/whop-ai-support (not available yet)
cd whop-ai-bot
```

Install dependencies:

<CodeGroup>
  ```bash npm theme={null}
   npm install
  ```

  ```bash pnpm theme={null}
  pnpm install
  ```

  ```bash yarn theme={null}
  yarn instal
  ```
</CodeGroup>

## 2. Get your Whop API credentials

<Steps>
  <Step title="Create a Whop App">
    1. Go to [https://whop.com/dashboard/developer](https://whop.com/dashboard/developer)
    2. Navigate to **Developer**
    3. Click the **Create App** button
    4. Give your app a name like "AI Support Bot"
    5. Click **Create**
  </Step>

  <Step title="Get your API Key, Agent User ID, and App ID">
    After creating your app:

    1. Copy the **App API Key** - you'll need this for `WHOP_API_KEY`
    2. Copy the **Agent User ID** - you'll need this for `NEXT_PUBLIC_WHOP_AGENT_USER_ID`
    3. Copy the **App ID** - you'll need this for `NEXT_PUBLIC_WHOP_APP_ID`

    {" "}

    <Note>
      The Agent User ID is what allows your bot to send messages on behalf of your
      app.
    </Note>
  </Step>
</Steps>

## 3. Set up Supabase Database

<Steps>
  <Step title="Create a Supabase Project">
    1. Go to [https://supabase.com](https://supabase.com)
    2. Click **Start your project**
    3. Sign in or create an account
    4. Click **New project**
    5. Choose your organization
    6. Enter a **Database Name** (e.g., "ai-support-bot")
    7. Enter a **Database Password** (save this!)
    8. Select a **Region** close to your users
    9. Click **Create new project**
  </Step>

  <Step title="Get Database Connection Strings">
    Once your project is created:

    1. Go to **Settings** → **Database**
    2. Scroll down to **Connection string**
    3. Copy the **URI** format for `DATABASE_URL`
    4. Copy the **Direct connection** for `DIRECT_URL`

    {" "}

    <Warning>
      Replace `[YOUR-PASSWORD]` in both URLs with the database password you created.
    </Warning>
  </Step>
</Steps>

## 4. Get OpenRouter AI API Key

<Steps>
  <Step title="Create OpenRouter Account">
    1. Go to [https://openrouter.ai](https://openrouter.ai)
    2. Click **Sign In** or **Sign Up**
    3. Complete the registration process
  </Step>

  <Step title="Get API Key">
    1. Go to **Keys** in the dashboard
    2. Click **Create Key**
    3. Give it a name like "AI Support Bot"
    4. Copy the API key - you'll need this for `OPENROUTER_API_KEY`

    {" "}

    <Info>
      OpenRouter gives you \$1 free credit when you sign up, which is more than
      enough for testing with Gemini 2.0 Flash!
    </Info>
  </Step>
</Steps>

## 5. Configure Environment Variables

<Steps>
  <Step title="Copy Environment Template">
    ```bash  theme={null}
    cp env.example .env
    ```
  </Step>

  <Step title="Fill in Required Variables">
    Open `.env` in your text editor and fill in these required fields:

    ```env  theme={null}
    # Database Configuration (Required)
    DATABASE_URL="postgresql://postgres:[YOUR-PASSWORD]@[HOST]:6543/postgres?pgbouncer=true"
    DIRECT_URL="postgresql://postgres:[YOUR-PASSWORD]@[HOST]:5432/postgres"

    # AI Service Configuration (Required)
    OPENROUTER_API_KEY="your_openrouter_api_key_here"
    OPENROUTER_MODEL="google/gemini-2.0-flash-001"

    # Whop Integration (Required)
    WHOP_API_KEY="your_whop_app_api_key_here"
    NEXT_PUBLIC_WHOP_AGENT_USER_ID="your_bot_user_id_here"
    NEXT_PUBLIC_WHOP_APP_ID="your_whop_app_id_here"
    ```

    {" "}

    <Info>All other variables are optional and have sensible defaults.</Info>
  </Step>
</Steps>

## 6. Set up the Database

Push the database schema to Supabase:

```bash  theme={null}
npm run db:push
```

This will create the necessary tables:

* `companies` - Store bot settings for each Whop company
* `experience_mappings` - Map Whop experiences to companies

## 7. Install Whop Dev Proxy

For Whop integration to work in development, you need to install the Whop dev proxy globally:

```bash  theme={null}
npm install @whop-apps/dev-proxy -g
```

<Note>
  The Whop dev proxy is required for the iframe integration to work properly
  during development.
</Note>

## 8. Run the Application

<Steps>
  <Step title="Start the Web Server with Whop Proxy">
    Run this command to start both the Whop proxy and Next.js development server:

    ```bash  theme={null}
    whop-proxy --command 'npx next dev --turbopack'
    ```

    You should see output indicating both the proxy and Next.js are running. The web app will be available at [http://localhost:3000](http://localhost:3000)

    <Warning>
      Do NOT use `npm run dev` alone - it won't include the Whop proxy and the iframe integration won't work!
    </Warning>
  </Step>

  <Step title="Start the AI Bot (New Terminal)">
    In a new terminal window:

    ```bash  theme={null}
    npm run bot
    ```

    You should see:

    ```
    🚀 Starting Whop AI Bot...

    Features:
      • Smart AI question detection
      • Admin-only configuration
      • Real-time responses
      • Rate limiting & caching

    ✅ Bot connected to Whop
    🤖 Listening for messages and commands...
    ```
  </Step>
</Steps>

## 9. Configure App Settings in Whop

**Important**: You must configure these settings BEFORE installing the app to your community.

<Steps>
  <Step title="Set Base URL and App Path">
    1. Go to your Whop app dashboard → **Developer** → Your App
    2. In the **Hosting** section, configure:
       * **Base URL**: `http://localhost:3000/`
       * **App path**: `/company/[companyId]`
    3. Click **Save** to update the settings

    <Warning>
      If you skip this step, the app installation and iframe integration won't work properly!
    </Warning>
  </Step>
</Steps>

## 10. Install to Your Whop Community

1. Go to your Whop company dashboard
2. Navigate to **Settings** → **API
   keys**
3. Click on your AI Support Bot app
4. Find and copy the **Installation Link**
5. Visit the installation link and grant the necessary
   permissions

## 11. Configure Your Bot

<Steps>
  <Step title="Access Bot Settings via Whop iframe">
    1. After installing the app, click **Open Whop** in the top right
    2. When redirected to Whop, click the **Settings** button
    3. Change the dropdown from **Production** to **Localhost**
    4. Choose your port (usually **3000**)
    5. You'll now see the bot configuration dashboard

    <Note>
      Only company admins can access the bot settings page.
    </Note>
  </Step>

  <Step title="Set Up Your Bot">
    Configure these settings:

    * **Enable Bot**: Turn on the AI responses
    * **Knowledge Base**: Add information about your community
    * **Response Style**: Choose professional, friendly, casual, or technical
    * **Preset Q\&A**: Add common questions with instant answers
    * **Custom Instructions**: Fine-tune the AI's behavior
  </Step>
</Steps>

## 12. Test Your Bot

1. Go to your Whop community chat
2. Ask a question like "How do I join?"
3. The bot should respond within a few seconds

## Troubleshooting

<AccordionGroup>
  <Accordion title="Bot not responding to messages">
    1. Check that both the web server and bot are running
    2. Verify your environment variables are correct
    3. Look for errors in the bot console output
    4. Make sure the bot is enabled in the settings dashboard
  </Accordion>

  <Accordion title="Database connection errors">
    1. Verify your Supabase database URLs are correct
    2. Make sure you replaced
       `[YOUR-PASSWORD]` with your actual password
    3. Check that your Supabase
       project is active
    4. Try running `npm run db:push` again
  </Accordion>

  <Accordion title="AI responses not working">
    1. Verify your OpenRouter API key is correct
    2. Make sure the bot is enabled
    3. Verify the knowledge base is not empty
    4. Check the bot console for any
       AI-related errors
  </Accordion>

  <Accordion title="Can't access bot settings">
    1. Make sure you're using the Whop iframe method
    2. Ensure you've set the environment to localhost with correct port
    3. Verify you're a company admin in Whop
    4. Check that your Whop App API key is correct
  </Accordion>
</AccordionGroup>

## What's Next?

Your AI Support Bot is now ready! Here are some next steps:

* **Customize responses**: Add more preset Q\&A pairs for instant answers
* **Train the AI**: Update the knowledge base with community-specific information
* **Monitor usage**: Check the bot console for statistics and performance
* **Scale up**: Deploy to production using Vercel, Railway, or your preferred platform

<Note>
  The bot saves 80-90% on AI costs through smart question detection and caching.
  Perfect for high-volume communities!
</Note>

## Need Help?

* Join the [Developer Whop](https://whop.com/developers)
* View the source code of this app [here](https://github.com/AbdullahZHD/car-modification-ai-whop)
* DM [@script on Whop](https://whop.com/@script)

***


# Fees
Source: https://docs.whop.com/fees

We want to be the cheapest, most resilient place to accept pure payments.

import { Button } from "@/components/ui/button";

<Frame>
  <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/fees.gif?s=886d19958b6417a8d123cc54856b56c2" alt="Fees" data-og-width="1728" width="1728" data-og-height="1080" height="1080" data-path="how-to-videos/fees.gif" data-optimize="true" data-opv="3" />
</Frame>

<CardGroup cols={3}>
  <Card style={{ border: "none" }} title="Global access" icon="globe">
    195 countries, 135+ currencies, 100+ payment methods.
  </Card>

  <Card style={{ border: "none" }} title="Fraud prevention" icon="shield-check">
    Powerful machine learning that adapts to new fraud patterns.
  </Card>

  <Card title="Optimized checkout" icon="cart-shopping">
    Flexible UI components and accelerated checkout.
  </Card>

  <Card title="Payment optimizations" icon="chart-line">
    Real-time retries & auto-updated cards to boost revenue.
  </Card>

  <Card title="Financing options" icon="chart-line">
    Let your customers pay over time with Klarna, Afterpay, and more.
  </Card>

  <Card title="Embedded payments" icon="building-columns">
    Instant onboarding and platform management tools.
  </Card>

  <Card title="Fast, predictable payouts" icon="check">
    Flexible payout options with like-for-like settlement.
  </Card>

  <Card title="24×7 support" icon="headset">
    Phone, chat, and email assistance whenever you need.
  </Card>

  <Card title="Security & compliance" icon="shield">
    99.999% uptime and PCI-compliant infrastructure.
  </Card>
</CardGroup>

<Update label="Global payments" description="100+ payment methods" collapse>
  <div className="bg-white dark:bg-[#0f0f13] rounded-2xl border border-gray-200 dark:border-gray-800  p-6 pb-0 space-y-4">
    <div className="flex justify-between items-baseline">
      <div className="flex gap-3 items-start">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=6955c07c9b75d157afd4ae12a6c3407f" className="mt-0 mb-0" alt="Fees" data-og-width="88" width="88" data-og-height="88" height="88" data-path="images/payments.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a73367878dc7003913024a63b0647d8f 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=0a2a32f01b055759a5d1fdb0f6c19938 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a3734bc241504a3038983e5e518342d3 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=0fb7e73550029a929201ce9ee01adb91 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=42d571499c27d04a15796dff2cfda757 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=ce276486edbf5bfb13c74b2debe7c5ea 2500w" />
        </div>

        <div className="flex flex-col">
          <h2 className="p-0 mx-0 my-0">Payments</h2>
          <p className="m-0 p-0">An online payments platform engineered for growth.</p>
        </div>
      </div>

      <div>
        [Start today →](/apps/docs/payments/taxes)
      </div>
    </div>

    <div className="space-y-2">
      <div>
        <Icon icon="check" iconType="solid" /> Increase customer acquisition with 100+ payment methods.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Improve conversion with Whop's accelerated checkout.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Save engineering time with prebuilt UIs.
      </div>
    </div>

    <div className="-mx-6 border-t mb-6 border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
        <div>
          <h3>Cards and wallets</h3>

          <p className="mb-4">
            Accept widely used credit and debit cards, prepaid cards, and digital
            wallets for online payments.
          </p>

          <div className="flex flex-wrap items-center gap-2">
            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#1434CB" />

              <path d="m16.4161 7.21719-1.9594 9.41161h-2.3794l1.9595-9.41161h2.3793Zm9.8674 6.08131 1.2597-3.54741.6998 3.54741h-1.9595Zm2.6593 3.3303h2.1694l-1.8895-9.41161h-2.0294c-.4199 0-.8398.28959-.9798.72397l-3.499 8.68764h2.4493l.4899-1.3755h3.0092l.2799 1.3755Zm-6.1584-3.1131c0-2.4615-3.2891-2.6063-3.2891-3.69222.07-.50678.4899-.79636.9798-.79636.7697-.0724 1.6095.07239 2.3093.43438l.4199-2.02712C22.5045 7.14479 21.7347 7 21.0349 7c-2.3094 0-3.9889 1.30315-3.9889 3.1131 0 1.3755 1.1897 2.0995 2.0294 2.5339.9098.4343 1.2597.7239 1.1897 1.1583 0 .6516-.6998.9412-1.3996.9412-.8398 0-1.6796-.2172-2.4494-.5792l-.4198 2.0271c.8397.362 1.7495.5068 2.5893.5068 2.5893.0724 4.1988-1.2308 4.1988-3.1855ZM13.057 7.21719 9.27805 16.6288H6.75873l-1.8895-7.52929c0-.36198-.27992-.65157-.55985-.79636C3.60957 7.94116 2.83978 7.65157 2 7.50678l.06998-.28959h3.98893c.55985 0 .97974.43438 1.04972.94116l.97974 5.42975 2.51933-6.37091h2.4493Z" fill="#fff" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30 0H4C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#000" />

              <path d="M21.8342 19.4082c4.0195 0 7.278-3.2585 7.278-7.2781 0-4.01955-3.2585-7.27805-7.278-7.27805-4.0196 0-7.2781 3.2585-7.2781 7.27805 0 4.0196 3.2585 7.2781 7.2781 7.2781Z" fill="#F9A000" />

              <path d="M12.1301 19.4082c4.0195 0 7.278-3.2585 7.278-7.2781 0-4.01955-3.2585-7.27805-7.278-7.27805-4.01957 0-7.27806 3.2585-7.27806 7.27805 0 4.0196 3.25849 7.2781 7.27806 7.2781Z" fill="#ED0006" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M16.9833 6.7063c1.4883 1.33263 2.4248 3.26885 2.4248 5.4238 0 2.155-.9365 4.0912-2.4248 5.4238-1.4902-1.3317-2.4272-3.2683-2.4272-5.4238 0-2.0902.8811-3.97453 2.2921-5.30196l.1351-.12184Z" fill="#FF5D00" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30 0H4C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#000" />

              <path d="M21.9821 19.3061c4.0196 0 7.2781-3.2585 7.2781-7.278 0-4.01961-3.2585-7.2781-7.2781-7.2781-4.0195 0-7.278 3.25849-7.278 7.2781 0 4.0195 3.2585 7.278 7.278 7.278Z" fill="#00A1DF" />

              <path d="M12.2781 19.3061c4.0195 0 7.278-3.2585 7.278-7.278 0-4.01961-3.2585-7.2781-7.278-7.2781C8.25849 4.75 5 8.00849 5 12.0281c0 4.0195 3.25849 7.278 7.2781 7.278Z" fill="#EB001B" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M17.1312 6.60425c1.4883 1.33263 2.4249 3.26885 2.4249 5.42385 0 2.1549-.9366 4.0912-2.4249 5.4238-1.4901-1.3318-2.4271-3.2684-2.4271-5.4238 0-2.0902.8811-3.97458 2.2921-5.30201l.135-.12184Z" fill="#7673C0" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30.1184 0H3.88163C1.73786 0 0 1.73786 0 3.88163V20.1184C0 22.2621 1.73786 24 3.88163 24H30.1184C32.2621 24 34 22.2621 34 20.1184V3.88163C34 1.73786 32.2621 0 30.1184 0Z" fill="#016FD0" />

              <path d="M3.56625 8.1438 2 11.893h1.01971l.28899-.7507h1.68005l.2875.7507h1.04217L4.75367 8.1438H3.56625Zm.57948.87256.5121 1.31194h-1.0257l.5136-1.31194ZM6.42631 11.8921V8.14282l1.44906.00554.84282 2.41724.82264-2.42278h1.43747v3.74928h-.9104V9.12947l-.96504 2.76263h-.79842l-.96773-2.76263v2.76263h-.9104ZM11.6011 11.8921V8.14282h2.9708v.83865h-2.0508v.64131h2.0029v.78932h-2.0029v.666h2.0508v.814h-2.9708ZM15.099 8.14331v3.74919h.9104v-1.3319h.3834l1.0915 1.3319h1.1126l-1.1979-1.3812c.4916-.0428.9988-.4772.9988-1.15164 0-.78897-.6015-1.21635-1.2728-1.21635h-2.026Zm.9104.83864h1.0407c.2497 0 .4313.20106.4313.39466 0 .24908-.2353.39466-.4178.39466h-1.0542v-.78932ZM19.699 11.8921h-.9296V8.14282h.9296v3.74928ZM21.9031 11.8921h-.2007c-.9708 0-1.5602-.7875-1.5602-1.8592 0-1.09826.5828-1.89008 1.8088-1.89008h1.0062v.88798h-1.043c-.4977 0-.8497.39987-.8497 1.0113 0 .7261.4025 1.0311.9823 1.0311h.2396l-.3833.8189ZM23.8841 8.14331l-1.5662 3.74919h1.0197l.289-.7507h1.68l.2875.7507h1.0422l-1.5648-3.74919h-1.1874Zm.5795.87256.5121 1.31193H23.95l.5136-1.31193ZM26.7426 11.8921V8.14282H27.9l1.4779 2.35558V8.14282h.9104v3.74928h-1.12L27.653 9.47479v2.41731h-.9104ZM7.582 16.7133v-3.7492h2.9708v.8386H8.50198v.6414h2.00282v.7893H8.50198v.6659h2.05082v.814H7.582ZM22.1387 16.7133v-3.7492h2.9707v.8386h-2.0507v.6414h1.9932v.7893h-1.9932v.6659h2.0507v.814h-2.9707ZM10.668 16.7133l1.4465-1.8515-1.4809-1.8977h1.1469l.882 1.1732.8849-1.1732h1.1021l-1.4614 1.8746 1.4491 1.8746h-1.1468l-.8564-1.1547-.8355 1.1547H10.668ZM14.7452 12.9648v3.7492h.9344v-1.1839h.9583c.8109 0 1.4255-.4429 1.4255-1.3042 0-.7135-.4821-1.2611-1.3072-1.2611h-2.011Zm.9344.8479h1.0092c.262 0 .4492.1653.4492.4317 0 .2502-.1863.4316-.4522.4316h-1.0062v-.8633ZM18.4587 12.9641v3.7492h.9104v-1.3319h.3833l1.0916 1.3319h1.1125l-1.1979-1.3813c.4916-.0427.9987-.4771.9987-1.1516 0-.7889-.6014-1.2163-1.2727-1.2163h-2.0259Zm.9104.8386h1.0406c.2497 0 .4313.2011.4313.3947 0 .2491-.2353.3947-.4178.3947h-1.0541v-.7894ZM25.531 16.7133v-.814h1.822c.2695 0 .3863-.1499.3863-.3144 0-.1577-.1164-.317-.3863-.317h-.8234c-.7156 0-1.1142-.4489-1.1142-1.1229 0-.6012.365-1.1809 1.4285-1.1809h1.7728l-.3833.8436h-1.5333c-.2931 0-.3833.1583-.3833.3095 0 .1555.1115.3269.3354.3269h.8625c.7978 0 1.144.4659 1.144 1.076 0 .656-.3858 1.1932-1.1875 1.1932H25.531ZM28.8723 16.7133v-.814h1.822c.2696 0 .3863-.1499.3863-.3144 0-.1577-.1164-.317-.3863-.317h-.8234c-.7156 0-1.1142-.4489-1.1142-1.1229 0-.6012.365-1.1809 1.4285-1.1809h1.7728l-.3833.8436h-1.5333c-.2931 0-.3833.1583-.3833.3095 0 .1555.1115.3269.3354.3269h.8625c.7978 0 1.144.4659 1.144 1.076 0 .656-.3858 1.1932-1.1874 1.1932h-1.9403Z" fill="#fff" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30 0H4C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#FFA201" />

              <path d="m14.1089 9.79783.1561.00638c.3396 0 .7278.04852 1.0189.24259v.9704c-.2426-.2911-.6308-.4852-1.0189-.4852-.7763.0485-1.4071.7278-1.3586 1.5041v.0971c0 .7763.6308 1.3586 1.4071 1.3586.3882 0 .7278-.1941.9704-.4853v.9705c-.3396.1455-.6793.2426-1.0674.2426-1.213 0-2.1835-1.019-2.1835-2.232 0-1.2615.9705-2.28043 2.232-2.18339l-.1561-.00638Zm6.6578.00638 1.116 2.91119 1.1645-2.91119h.8733l-1.7952 4.41539h-.4367l-1.7953-4.41539h.8734Zm-10.5095-.09942.1262.00238c.4366 0 .8733.19408 1.213.48523l-.4367.5822c-.1941-.1941-.4367-.3396-.6793-.3396-.2911-.0485-.53373.1941-.58225.4852 0 .2426.14555.3396.63075.5337.9704.3882 1.213.6793 1.2615 1.2615v.1456c-.0485.7763-.6792 1.3586-1.4556 1.31-.58221 0-1.16446-.2911-1.45558-.8248l.53373-.5337c.14556.3396.4852.5822.87335.5822h.0485c.2912 0 .5823-.2911.5823-.6308 0-.194-.0971-.3396-.2426-.4366-.1941-.0971-.3882-.1941-.5823-.2426-.7763-.2426-1.0189-.5823-1.0189-1.1645v-.0485c.04852-.6793.63077-1.21305 1.3101-1.16453l-.1262-.00238Zm-4.91996.09942c1.16448.04852 2.08637 1.01889 2.03785 2.18339 0 .6308-.29112 1.213-.77632 1.6497-.43669.3397-.97041.5337-1.50413.4852H3.88163V9.80421h1.45561Zm3.20234 0v4.31829h-.82485V9.80421h.82485Zm18.09812 0v.72779h-1.5042v.9704h1.4556v.7278h-1.4556v1.1645h1.5042v.7278h-2.329V9.80421h2.329Zm1.7467 0c.9704 0 1.5041.43669 1.5041 1.26149.0486.6308-.3881 1.1645-.9704 1.2616l1.3101 1.7952h-1.019l-1.1159-1.7467h-.0971v1.7467h-.8248V9.80421h1.213Zm-23.28787.71849-.14746.0093h-.2426v2.8627h.2426c.38817.0485.82485-.097 1.11597-.3396.29112-.2912.43668-.6793.43668-1.116 0-.3882-.14556-.7763-.43668-1.0674-.29112-.2426-.7278-.3882-1.11597-.3397l.14746-.0093Zm23.14227-.0392h-.2426v1.31h.2426c.5338 0 .7764-.2426.7764-.6792 0-.3882-.2426-.6308-.7764-.6308Z" fill="#fff" />

              <path opacity=".8" d="M17.807 9.75562c-1.213 0-2.232.97038-2.232 2.23198 0 1.213.9704 2.2319 2.232 2.2804 1.2615.0485 2.2319-.9704 2.2804-2.2319-.0485-1.2616-1.0189-2.28048-2.2804-2.28048Z" fill="#fff" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#fff" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M30 1H4C2.34315 1 1 2.34315 1 4v16c0 1.6569 1.34315 3 3 3h26c1.6569 0 3-1.3431 3-3V4c0-1.65685-1.3431-3-3-3ZM4 0C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4H4Z" fill="#C4CCD8" />

              <path d="M4.85204 6.01643v7.76327c.77632.4852 1.64969.7763 2.62009.7763.87337 0 1.55266-.6793 1.6497-1.5526V8.73357h2.62007v4.07573c0 1.5526-.8733 2.9112-3.68752 2.9112-1.06745 0-2.1349-.1941-3.1053-.3882v6.0166h4.65795c1.74677 0 3.10527-1.3586 3.10527-3.1053V2.91113H7.95734c-1.74674 0-3.1053 1.35857-3.1053 3.1053Z" fill="#1B6BAF" />

              <path d="M16.691 2.91113c-1.7467 0-3.1053 1.35857-3.1053 3.1053v3.68755c.7763-.77632 2.1349-1.26153 4.3668-1.16449.8734.09704 1.6497.19408 2.426.38817v1.45564c-.6792-.3882-1.5526-.67932-2.3289-.77636-1.3586-.09704-2.5231.87336-2.7172 2.13486-.097 1.3586.8734 2.5231 2.1349 2.7172h.4852c.8734-.0971 1.6497-.3882 2.329-.7764v1.4557c-.7763.194-1.6497.3881-2.426.3881-2.2319.0971-3.5905-.3881-4.3668-1.1645v6.7929h4.6579c1.7467 0 3.1053-1.3586 3.1053-3.1053V2.91113H16.691Z" fill="#D02644" />

              <path d="M25.4247 2.91113c-1.7468 0-3.1053 1.35857-3.1053 3.1053v2.71714h4.755c.8733-.09704 1.6496.67929 1.7467 1.55263v.0971c0 .8733-.5823 1.5526-1.4556 1.6497.9704 0 1.7467.7763 1.8437 1.7467 0 .9704-.8733 1.7467-1.8437 1.7467h-5.0461v5.8225h4.5609c1.7467 0 3.1053-1.3586 3.1053-3.1053V2.91113h-4.5609ZM24.2602 14.459h2.2319c.4852-.1941.7763-.6793.6793-1.2616-.097-.2911-.3882-.5822-.6793-.6792h-2.2319v1.9408Zm2.7171-3.8817c0-.3881-.2911-.77628-.6793-.87332h-2.0378v1.74672h2.0378c.3882-.097.6793-.4852.6793-.8734Z" fill="#46A548" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#0079BE" />

              <path d="M18.8314 19.9999c4.3729.0209 8.3644-3.5664 8.3644-7.9304 0-4.77238-3.9915-8.07109-8.3644-8.0695h-3.7635C10.6425 3.99841 7 7.29811 7 12.0695c0 4.365 3.6425 7.9514 8.0679 7.9304h3.7635Z" fill="#fff" />

              <path d="M15.0857 4.66138c-4.0438.00127-7.32056 3.27902-7.32151 7.32442.00095 4.0447 3.27771 7.3222 7.32151 7.3234 4.0448-.0012 7.3222-3.2787 7.3228-7.3234-.0006-4.0454-3.278-7.32315-7.3228-7.32442Zm-4.6409 7.32442c.0038-1.9768 1.2384-3.66251 2.9794-4.33238v8.66378c-1.741-.6695-2.9756-2.3543-2.9794-4.3314Zm6.3019 4.3333V7.65314c1.7416.66825 2.9781 2.35486 2.9812 4.33266-.0031 1.9784-1.2396 3.6638-2.9812 4.3333Z" fill="#0079BE" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M15.0712 0c.0253.281017.0081.581568-.0565.894128L10.2242 23.3075c-.0512.239-.1277.4709-.22551.6925H4.12121C1.84513 24 0 22.1313 0 19.8261V4.17391C0 1.86872 1.84513 0 4.12121 0H15.0712Z" fill="#E21836" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M7.31804 24c-.00296-.2216.01997-.4536.0712-.6926L12.1797.894032c.067-.312524.1771-.613042.3219-.894032h15.3851c-.0043.0171633-.0087.0343995-.0131.0517068-.0677.2660402-.1396.5488902-.2002.8423252L22.8829 23.3074c-.0512.239-.0925.471-.1306.6926H7.31804Z" fill="#00447C" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M19.8819 24c-.003-.2216.02-.4536.0712-.6926L24.7436.894032c.067-.312524.1771-.613042.3218-.894032h4.8134C32.1549 0 34 1.86872 34 4.17391V19.8261C34 22.1313 32.1549 24 29.8788 24h-9.9969Z" fill="#007B84" />

              <path d="M8.01382 6.98846c-.84752.0089-1.09782 0-1.17777-.01945-.03073.15046-.60265 2.86844-.60425 2.87072-.12314.54987-.21274.94187-.51707 1.19497-.17276.1472-.37445.2181-.60828.2181-.37585 0-.59481-.1922-.63157-.5569l-.00703-.1252s.1145-.73656.1145-.7407c0 0 .60024-2.47688.70771-2.80428.00562-.01863.00723-.02836.00864-.03726-1.16833.01056-1.37544 0-1.38971-.01945-.00783.0267-.03676.18026-.03676.18026l-.61289 2.79166-.05263.23677-.10185.7744c0 .2298.04379.4173.13098.5758.27922.5027 1.07572.578 1.5263.578.58055 0 1.12514-.1271 1.49316-.3591.6388-.3888.80594-.9967.95499-1.5368l.06911-.27714s.61831-2.57249.72337-2.90714c.00402-.01863.00563-.02836.01105-.03726Zm2.10378 2.07526c-.14905 0-.42145.03725-.66612.1608-.08879.04698-.17276.10121-.26135.15522l.07995-.2974-.04379-.05008c-.51888.10824-.63499.12273-1.1143.19226l-.04017.02753c-.05565.47538-.10506.83275-.31137 1.76725-.07854.3443-.1601.692-.24186 1.0356l.02209.0437c.49116-.0267.64022-.0267 1.06709-.0195l.03455-.0387c.05424-.2862.06127-.3533.1814-.933.05645-.2748.17416-.8787.23222-1.0937.10667-.05096.21193-.10104.31237-.10104.23925 0 .21013.21504.20088.30074-.01024.1438-.09742.6136-.18682 1.017l-.05966.2603c-.04158.1923-.08718.3792-.12876.5698l.01808.0381c.48412-.0267.63177-.0267 1.04517-.0195l.0486-.0387c.0748-.447.0967-.5667.2292-1.2175l.0667-.2991c.1296-.58527.1947-.88205.0967-1.12378-.1037-.2709-.3524-.3363-.5808-.3363Zm2.3502.61278c-.2574.05091-.4215.08485-.5846.10679-.1617.0267-.3194.05091-.5681.08651l-.0197.01842-.0181.01469c-.0259.19079-.044.35579-.0783.54969-.0291.2005-.0739.4284-.1469.7558-.0564.2506-.0855.338-.1177.4261-.0313.0882-.0659.1739-.1293.4204l.0148.0227.0125.0209c.2324-.0113.3845-.0194.5408-.0209.156-.0058.3178 0 .5681.0015l.0218-.0184.0236-.0203c.0361-.2223.0415-.2821.0636-.3906.0219-.1163.0597-.2773.1523-.7073.0438-.202.0926-.4034.138-.6095.0472-.2053.0966-.40753.1436-.60952l-.007-.02442-.0094-.02256Zm.0054-.82622c-.2338-.14218-.6442-.09706-.9204.09934-.2754.19247-.3067.46566-.0737.6097.2298.13825.6418.09706.9156-.10099.2748-.19662.3092-.46732.0785-.60805Zm1.4142 3.29282c.473 0 .958-.1343 1.323-.5329.2808-.3233.4096-.8043.4542-1.0023.1452-.6565.0321-.963-.1099-1.14968-.2158-.28457-.597-.37583-.9926-.37583-.2378 0-.8043.02421-1.2469.44454-.3177.3032-.4646.71467-.5532 1.10907-.0894.4019-.1922 1.1255.4536 1.3947.1993.0882.4865.1124.6718.1124Zm-.037-1.4771c.1091-.4971.2378-.91431.5665-.91431.2575 0 .2762.31041.1617.80921-.0205.1107-.1145.5224-.2417.6977-.0888.1293-.1938.2077-.3099.2077-.0346 0-.2401 0-.2433-.3143-.0016-.1553.0291-.3138.0667-.486Zm2.9968 1.4132.0369-.0387c.0525-.2863.0611-.3535.1772-.933.0581-.2748.1782-.8788.2346-1.0938.1069-.0511.2104-.10118.314-.10118.2377 0 .2087.21498.1993.30068-.0087.1441-.0958.6137-.1868 1.017l-.0565.2604c-.0432.1924-.0902.3791-.1318.5699l.0181.0381c.4858-.0267.6278-.0267 1.0436-.0194l.0502-.0387c.0729-.4473.0926-.5669.2292-1.2176l.0651-.2992c.1302-.58531.1961-.88189.0997-1.12361-.1067-.27091-.357-.33631-.5822-.33631-.1493 0-.4231.03705-.6663.16081-.087.04698-.1742.10099-.2598.15522l.0746-.2974-.04-.05029c-.5187.10844-.6372.12293-1.1159.19247l-.0368.02752c-.058.47539-.1052.83259-.3116 1.76719-.0785.3444-.1601.6921-.2416 1.0356l.0219.0437c.4919-.0267.6388-.0267 1.0649-.0194Zm3.5687.0193c.0306-.1535.212-1.0638.2136-1.0638 0 0 .1545-.6678.1639-.692 0 0 .0486-.0696.0972-.0971h.0715c.6748 0 1.4367 0 2.034-.4526.4064-.31044.6842-.76885.8081-1.32598.0322-.1366.0559-.29906.0559-.46152 0-.21338-.0416-.42447-.1617-.58942-.3046-.43896-.9111-.44703-1.6111-.45034-.0022 0-.3451.00331-.3451.00331-.8962.01138-1.2556.00807-1.4032-.01055-.0125.06726-.036.18688-.036.18688s-.321 1.53273-.321 1.53522c0 0-.7681 3.2588-.8043 3.4123.7824-.0097 1.1032-.0097 1.2382.0056Zm.5948-2.72273s.3413-1.52963.3397-1.52383l.0111-.07844.0048-.05981.1364.01448s.7039.0623.7204.06395c.2778.11073.3923.39612.3123.76865-.0729.34044-.2872.62667-.5626.76492-.2268.11713-.5046.12686-.7909.12686h-.1852l.014-.07678Zm2.1251 1.31863c-.0902.3961-.1939 1.1196.4487 1.3775.2049.0898.3885.1165.5752.1068.197-.011.3796-.1128.5488-.2594-.0153.0603-.0306.1205-.0458.1809l.0291.0387c.4622-.02.6057-.02 1.1065-.0161l.0454-.0356c.0731-.4429.142-.873.332-1.7202.0926-.40589.185-.8078.28-1.21199l-.0148-.0445c-.5171.09872-.6553.11983-1.1527.19247l-.0378.03167c-.005.04118-.0102.08071-.015.12024-.0774-.12873-.1895-.23862-.3624-.30713-.2212-.08961-.7407.02587-1.1872.44476-.3138.29905-.4645.70878-.55 1.10188Zm1.0859.0242c.1107-.4882.2379-.90133.5673-.90133.2083 0 .318.19803.2957.53583-.0177.0842-.0367.173-.0594.2734-.033.1451-.0687.2889-.1035.4329-.0354.0985-.0765.1915-.1217.2534-.0848.1237-.2865.2005-.4026.2005-.0329 0-.2362 0-.2433-.3088-.0016-.1538.0292-.3121.0675-.4859Zm5.671-1.61204-.0399-.04698c-.5117.10679-.6043.12376-1.0744.18916l-.0345.0356c-.0016.00579-.003.01469-.0054.02276l-.0016-.00807c-.35.83177-.3397.65233-.6246 1.30717-.0016-.0298-.0016-.0485-.0032-.0801l-.0713-1.41954-.0448-.04698c-.536.10679-.5486.12376-1.0436.18916l-.0386.0356c-.0054.01697-.0054.03559-.0086.05587l.0032.00725c.0619.32575.047.25311.1091.76724.0289.2522.0675.506.0964.7551.0488.4171.0762.6224.1358 1.2588-.3343.5683-.4134.7833-.7352 1.2821l.0022.0049-.2266.3693c-.0259.0389-.0494.0656-.0824.0769-.0361.0185-.0831.0218-.1484.0218h-.1256l-.1866.6395.6402.0114c.3759-.0017.6121-.1828.7393-.4262l.4025-.7107h-.0064l.0424-.0501c.2708-.6005 2.3306-4.24094 2.3306-4.24094Zm-6.757 8.39884h-.2716l1.0053-3.4253h.3334l.1059-.3529.0102.3924c-.0124.2426.1728.4576.6593.422h.5627l.1937-.6596h-.2118c-.1217 0-.1782-.0316-.1711-.0995l-.0103-.3993h-1.0419v.0021c-.3369.0073-1.3429.0333-1.5466.0892-.2465.0654-.5063.2579-.5063.2579l.1021-.3533h-.9747l-.2031.701-1.0187 3.4777h-.1976l-.1939.6548h1.9413l-.065.2184h.9566l.0634-.2184h.2684l.2103-.7072Zm-.7965-2.7293c-.156.0445-.4465.1794-.4465.1794l.2583-.8754h.7744l-.1868.6378s-.2393.0145-.3994.0582Zm.0149 1.2506s-.2433.0315-.4034.0687c-.1577.0493-.4534.2045-.4534.2045l.2668-.911h.7784l-.1884.6378Zm-.4339 1.4868h-.7768l.2252-.7688h.7744l-.2228.7688Zm1.8707-2.1246h1.1198l-.161.5368h-1.1345l-.1704.587h.9928l-.7517 1.0904c-.0527.0801-.0999.1085-.1523.131-.0526.0276-.1217.0598-.2017.0598h-.2754l-.1892.6429h.7203c.3745 0 .5957-.1755.759-.4059l.5154-.7268.1107.738c.0235.1382.12.2192.1852.2506.0722.0373.1467.1012.2519.1107.1129.005.1945.0089.2487.0089h.354l.2125-.7194h-.1396c-.0801 0-.2181-.0138-.2416-.0397-.0235-.0314-.0236-.0799-.0362-.1536l-.1123-.7396h-.4598l.2017-.2473h1.1323l.1742-.587h-1.0484l.1633-.5368h1.0452l.1939-.6621h-3.1161l-.1907.6621Zm-9.4571 2.2741.2613-.8957h1.0741l.1963-.6662h-1.0751l.1641-.5514h1.0506l.1947-.645H13.571l-.1906.645h.5972l-.1593.5514h-.5988l-.1985.6776h.597l-.3483 1.185c-.047.1569.0221.2167.0659.2895.0448.071.0902.118.1922.1447.1053.0242.1774.0387.2754.0387h1.2109l.2158-.738-.5368.076c-.1036 0-.3907-.0129-.3593-.1116Zm.1232-4.2879-.2722.5068c-.0583.1107-.1107.1794-.1579.2111-.0416.0267-.124.0379-.2433.0379h-.142l-.1899.6484h.4717c.2268 0 .401-.0857.4841-.1285.0894-.0493.1129-.0211.182-.0899l.1593-.1421h1.4729l.1955-.6751H15.339l.1883-.3686H14.457Zm2.1744 4.3009c-.0251-.0372-.007-.1028.0313-.2394l.4026-1.3728h1.4321c.2087-.0031.3594-.0056.4574-.0128.1053-.0114.2198-.0501.3445-.1196.1288-.0729.1947-.1497.2503-.2378.0621-.088.1617-.2805.2473-.5772l.506-1.7372-1.4861.0089s-.4576.0695-.6591.1463c-.2033.0856-.4938.3249-.4938.3249l.1342-.4762h-.918l-1.2853 4.3914c-.0456.1706-.0761.2943-.0832.3686-.0023.0801.0981.1594.1632.2192.0769.0598.1906.0501.2997.0598.1147.0089.2778.0145.503.0145h.7055l.2166-.7533-.6316.0614c-.0675 0-.1163-.0372-.1366-.0687Zm.6936-2.5394h1.5042l-.0956.3088c-.0134.0073-.0456-.0153-.1986.0033h-1.3026l.0926-.3121Zm.3014-1.0356h1.5168l-.1091.3719s-.7149-.0072-.8294.0145c-.5038.0898-.7981.3672-.7981.3672l.2198-.7536Zm1.1409 2.3784c-.0125.0462-.0321.0743-.0597.0955-.0305.0202-.0799.0275-.1536.0275h-.2144l.0127-.3761h-.8915l-.0362 1.8384c-.0014.1327.011.2095.1053.271.0942.0767.3844.0865.7752.0865h.5586l.2017-.6882-.4863.0276-.1617.0097c-.0221-.0097-.0432-.0186-.0667-.0429-.0205-.0209-.0551-.008-.0495-.1407l.0039-.4712.51-.0218c.2754 0 .3931-.0923.4936-.1802.0958-.0843.1271-.1811.1633-.3121l.0856-.4172h-.7009l-.0894.2942Z" fill="#FEFEFE" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30 0H4C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#fff" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M30 1H4C2.34315 1 1 2.34315 1 4v16c0 1.6569 1.34315 3 3 3h26c1.6569 0 3-1.3431 3-3V4c0-1.65685-1.3431-3-3-3ZM4 0C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4H4Z" fill="#000" />

              <path d="M9.00201 8.55144c.3061-.38287.51383-.89696.45904-1.42229-.4481.02228-.99491.29563-1.31149.6788-.28426.32813-.53585.86374-.47026 1.36705.50302.04363 1.00556-.25143 1.32271-.62356ZM9.45529 9.27318c-.73049-.04351-1.35159.41459-1.70044.41459-.34904 0-.88324-.39266-1.46102-.38208-.75202.01104-1.44981.43624-1.83143 1.11251-.78492 1.3529-.20714 3.3596.55616 4.4615.37067.5451.8174 1.1453 1.40603 1.1237.55615-.0218.77414-.3601 1.45017-.3601.67554 0 .8719.3601 1.46063.3492.61052-.0109.99221-.5454 1.36291-1.091.4252-.6214.5993-1.2214.6102-1.2544-.0109-.0109-1.1772-.4583-1.1881-1.7999-.011-1.1234.9157-1.6577.9593-1.6908-.5233-.77402-1.34094-.86129-1.62441-.88322ZM15.8159 7.75293c1.5877 0 2.6933 1.09443 2.6933 2.68787 0 1.5991-1.1284 2.6992-2.7331 2.6992h-1.758v2.7955h-1.27V7.75293h3.0678Zm-1.7978 4.32097h1.4574c1.1058 0 1.7351-.5954 1.7351-1.6274 0-1.03202-.6293-1.62178-1.7294-1.62178h-1.4631v3.24918ZM18.841 14.24c0-1.0434.7995-1.6842 2.2173-1.7636l1.633-.0963v-.4593c0-.6635-.448-1.0604-1.1964-1.0604-.709 0-1.1513.3401-1.2589.8732h-1.1568c.068-1.0774.9866-1.8713 2.461-1.8713 1.446 0 2.3702.7655 2.3702 1.962v4.1112h-1.1738v-.981h-.0283c-.3458.6634-1.1001 1.083-1.8826 1.083-1.1681 0-1.9847-.7258-1.9847-1.7975Zm3.8503-.5387v-.4706l-1.4687.0907c-.7316.051-1.1454.3742-1.1454.8846 0 .5216.4309.8619 1.0887.8619.8562 0 1.5254-.5898 1.5254-1.3666ZM25.0187 18.1299v-.9923c.0905.0226.2946.0226.3968.0226.567 0 .8732-.2381 1.0603-.8505 0-.0114.1078-.3629.1078-.3686l-2.1547-5.97113h1.3267l1.5086 4.85403h.0225l1.5085-4.85403h1.2929l-2.2344 6.27723c-.5101 1.4461-1.0999 1.9111-2.3361 1.9111-.1021 0-.4084-.0114-.4989-.0284Z" fill="#000" />
            </svg>
          </div>
        </div>

        <div className="text-sm ">
          <h3>2.7% + \$0.30</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful transaction for domestic cards<br /><br />
            <span className="text-gray-500">+ 1.5% for international cards</span><br />
            <span className="text-gray-500">+ 1% if </span><span className="text-[#6366f1]">currency conversion</span><span className="text-gray-500"> is required</span>
          </div>
        </div>
      </div>
    </div>

    <br />

    <div className="-mx-6 border-t mb-6 border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
        <div>
          <h3>Financing</h3>

          <p className="mb-4">
            Give your customers the flexibility to split their purchases into monthly installments while you get paid upfront.
          </p>

          <div className="flex flex-wrap items-center gap-2">
            <svg class="PaymentLogo variant--Card " width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#00D64F" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M17.5573 8.29028c1.1141 0 2.1819.43275 2.8797 1.02677.1763.15028.4405.14935.6062-.01163l.8301-.80765c.1753-.17046.1688-.44958-.0203-.60534-.5571-.45938-1.305-.9111-2.2255-1.20032l.2605-1.18928C19.9444 5.24362 19.7386 5 19.4623 5h-1.6041c-.2052 0-.3827.13772-.4254.33023l-.2345 1.05768c-2.1325.10221-3.9399 1.12287-3.9399 3.21713 0 1.81296 1.4954 2.59006 3.0737 3.12776 1.4954.5377 2.2844.7373 2.2844 1.4942 0 .777-.789 1.2351-1.9522 1.2351-1.0606 0-2.1715-.3357-3.0336-1.151-.1691-.1601-.4396-.1613-.6087-.0013l-.8921.8441c-.1745.1649-.1729.4361.0029.5995.6955.6476 1.5761 1.1166 2.5812 1.3792l-.2449 1.1016c-.057.2584.1469.502.4225.5041l1.6067.0117c.2068.0015.3864-.1371.4286-.3315l.2319-1.0592c2.5533-.1512 4.116-1.4825 4.116-3.4311 0-1.7928-1.5573-2.5499-3.4473-3.1675-1.08-.3789-2.0148-.6375-2.0148-1.41427 0-.75684.8726-1.05615 1.7446-1.05615Z" fill="#fff" />
            </svg>

            <svg class="PaymentLogo " width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#FFB3C7" />

              <path d="M24.7288 15.4746c-.869 0-1.5735.7041-1.5735 1.5727 0 .8684.7045 1.5725 1.5735 1.5725.869 0 1.5736-.7041 1.5736-1.5725 0-.8686-.7046-1.5727-1.5736-1.5727ZM21.2924 6.3418h-2.7198c0 2.22778-1.0248 4.2725-2.8117 5.6103l-1.0776.8064 4.175 5.6896h3.4327l-3.8416-5.2353c1.821-1.8122 2.843-4.25019 2.843-6.871ZM11.5718 18.4476h2.7792V6.3418h-2.7792v12.1058Z" fill="#17120F" />
            </svg>

            <svg class="PaymentLogo " width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#4A4AF4" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M8.9788 14.7853c0 1.5817.47151 3.0531 1.2808 4.2859H8.06811c-.65622-1.3334-.99681-2.7998-.99541-4.2859 0-5.37168 4.3707-9.74233 9.7423-9.74233s9.7423 4.36954 9.7423 9.74233c.0014 1.4861-.3392 2.9525-.9954 4.2859h-2.1937c.8081-1.2328 1.2808-2.7053 1.2808-4.2859 0-4.3205-3.5146-7.83512-7.8351-7.83512-4.3205 0-7.8351 3.51462-7.8351 7.83512Zm4.0061-3.2457c.8918-.7112 2.5337-1.3834 3.9605-1.3834 2.1101 0 3.7297.9464 3.7286 3.275v5.6391h-2.3141v-1.3454c-.5261.9107-1.5015 1.6007-2.7432 1.6007-1.856 0-2.984-.9452-2.984-2.5103 0-1.9729 1.9975-2.7755 4.568-3.0118.6844-.0624 1.0478-.3155 1.0478-.7647 0-.6677-.5462-.9987-1.5372-.9987-1.0422 0-2.1981.5584-2.9127 1.2127l-.8137-1.7132Zm2.1235 5.1297c0 .5273.4113.8483 1.1615.8483 1.1604 0 1.9306-1.0623 1.9306-2.2126-1.7489 0-3.0921.2652-3.0921 1.3643Z" fill="#fff" />
            </svg>

            <svg class="PaymentLogo " width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4C0 1.79086 1.79086 0 4 0H30C32.2091 0 34 1.79086 34 4V20C34 22.2091 32.2091 24 30 24H4C1.79086 24 0 22.2091 0 20V4Z" fill="#1A0826" />

              <path d="M12.8687 8.89868L13.682 15.5161H21.6355L20.822 8.89868H12.8687Z" fill="#AA8FFF" />

              <path d="M15.1376 6.37334C15.6448 6.85023 15.7144 7.60027 15.293 8.04864C14.8715 8.49701 14.1186 8.47388 13.6114 7.997C13.1041 7.52013 13.0345 6.77009 13.4559 6.32172C13.8774 5.87336 14.6303 5.89646 15.1376 6.37334Z" fill="#FFFFFA" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M29.9706 11.2815C29.7875 9.79323 28.6185 8.89348 27.0309 8.8987H21.7427L22.556 15.5161H24.936L24.7739 14.1926H27.2925C29.2723 14.1926 30.1798 12.9581 29.9706 11.2815ZM27.0335 12.3382L24.5437 12.3408L24.3475 10.7532L26.8505 10.7558C27.4389 10.7636 27.7397 11.0932 27.7894 11.5483C27.8207 11.8386 27.6873 12.3382 27.0335 12.3382Z" fill="#FFFFFA" />

              <path d="M4.58584 13.6669L4.81337 15.5161H12.7588L12.4973 13.4001H8.79396L8.75996 13.1359L12.173 10.7531L11.9455 8.89868H4L4.25892 11.0173H7.97013L8.00413 11.2815L4.58584 13.6669Z" fill="#FFFFFA" />
            </svg>
          </div>
        </div>

        <div className="text-sm ">
          <h3>15%</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful transaction through our financing partners<br /><br />
          </div>
        </div>
      </div>
    </div>

    <Expandable title="Klarna supported countries & transaction limits">
      | Country        | Min Amount | Max Amount    |
      | -------------- | ---------- | ------------- |
      | Austria        | €25.00     | €10,000.00    |
      | Finland        | €25.00     | €5,000.00     |
      | France         | €1.00      | €1,500.00     |
      | Germany        | €25.00     | €10,000.00    |
      | Greece         | €1.00      | €1,000.00     |
      | Ireland        | €1.00      | €1,500.00     |
      | Italy          | €1.00      | €1,500.00     |
      | Netherlands    | €35.00     | €4,000.00     |
      | Norway         | kr 0.00    | kr 150,000.00 |
      | Portugal       | €1.00      | €1,000.00     |
      | Spain          | €1.00      | €1,500.00     |
      | United Kingdom | £1.00      | £2,000.00     |
      | United States  | \$0.50     | \$10,000.00   |
    </Expandable>

    <br />

    <div className="-mx-6 border-t mb-6 border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
        <div>
          <h3>ACH</h3>

          <p className="mb-4">
            Accept ACH direct debit payments from US bank accounts.
          </p>

          <div className="flex flex-wrap items-center gap-2" />
        </div>

        <div className="text-sm ">
          <h3>1.5%</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful ACH debit transaction
          </div>
        </div>
      </div>
    </div>

    <br />
  </div>
</Update>

<Update label="Global payouts" description="200+ countries">
  <div className="space-y-4 rounded-2xl border border-gray-200 bg-white p-6 pb-0 dark:border-gray-800 dark:bg-[#0f0f13]">
    <div className="flex items-baseline justify-between">
      <div className="flex items-start gap-3">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=8f0f8fd4a00941062a09cee28a318f39" className="mt-0 mb-0" alt="Fees" data-og-width="88" width="88" data-og-height="88" height="88" data-path="images/payouts.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=d37cac1aaaf56d35bc528d1328e7b455 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=fb629a87212d86c895e3ec2caa61f0f7 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a21b7afc8da424de2cc7c5e4d55e7518 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f76cd2d282fb06e2ae9b5bc51f67c8ca 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=99242af9f0456679c90d73c69de0456a 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=09e743185aace947595f0109ec998729 2500w" />
        </div>

        <div className="flex flex-col mx-0 my-0">
          <h2 className="m-0 p-0 mx-0 my-0">Payouts</h2>
          <p className="m-0 p-0">Accept money and get paid out as fast as you want.</p>
        </div>
      </div>

      <div>[Start today →](/apps/docs/payments/taxes)</div>
    </div>

    <div className="space-y-2">
      <div>
        <Icon icon="check" iconType="solid" /> Get paid anywhere in the world with global payout options.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Flexible payout methods including crypto, Venmo, and wire transfers.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Same-day payouts available for immediate cash flow.
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Next day ACH</h3>

          <p className="mb-4">
            Accelerated ACH transfer to U.S. bank accounts, delivered by the next business day (faster settlement speed).
          </p>
        </div>

        <div className="text-sm">
          <h3>\$2.50</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Instant Bank Deposit (RTP)</h3>

          <p className="mb-4">
            Real-time bank transfer to supported accounts with funds available instantly (where supported).
          </p>
        </div>

        <div className="text-sm">
          <h3>4% + \$1.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Crypto</h3>

          <p className="mb-4">
            Cryptocurrency payout (e.g. Bitcoin, Ethereum) with global reach.
          </p>
        </div>

        <div className="text-sm">
          <h3>5% + \$1.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Venmo</h3>

          <p className="mb-4">
            Instant payout to a recipient's Venmo wallet (available for U.S. recipients only).
          </p>
        </div>

        <div className="text-sm">
          <h3>5% + \$1.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Bank wire</h3>

          <p className="mb-4">
            Traditional bank wire transfer (will typically take 1–2 business days to process in the US).
          </p>
        </div>

        <div className="text-sm">
          <h3>\$23.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>International local banks</h3>

          <p className="mb-4">
            Local bank transfer in your country and currency (timing varies by country).
          </p>
        </div>

        <div className="text-sm">
          <h3>Varies by country</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>
  </div>
</Update>

<Update label="Fraud and security">
  <div className="space-y-4 rounded-2xl border border-gray-200 bg-white p-6 pb-0 dark:border-gray-800 dark:bg-[#0f0f13]">
    <div className="flex items-baseline justify-between">
      <div className="flex items-start gap-3">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=6ba6d3ace3fa3f59ae62842ec034eb05" className="mt-0 mb-0" alt="Fees" data-og-width="88" width="88" data-og-height="88" height="88" data-path="images/fraud.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a26c1c7e477a260335a3f38cff20c49e 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=eba14e1b129e54e8069674c1e93e9de8 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=df04024ed713619ad221d909fffb2e20 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=11ec290eaa88878f22a7ade09fb13ec0 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=3d133c804a8f903fbb4e7ffe21422521 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=81599082788b8b3dff28dee1c529f563 2500w" />
        </div>

        <div className="flex flex-col">
          <h2 className="m-0 p-0">Fraud and security</h2>
          <p className="m-0 p-0">Protect your business against fraud and disputes.</p>
        </div>
      </div>

      <div>[Start today →](/apps/docs/payments/taxes)</div>
    </div>

    <div className="space-y-2">
      <div>
        <Icon icon="check" iconType="solid" /> 0% of transaction amount.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Transparent flat-rate pricing per event.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> No hidden fees. No guessing.
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>3DS</h3>

          <p className="mb-4">
            Fee for authenticating cards using 3D Secure to reduce fraud.
          </p>
        </div>

        <div className="text-sm">
          <h3>\$0.03</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per transaction
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-4 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Radar</h3>

          <p className="mb-4">
            ML-based fraud detection fee.
          </p>
        </div>

        <div className="text-sm">
          <h3>\$0.07</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per transaction
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Dispute</h3>

          <p className="mb-4">
            Flat fee applied when a chargeback or dispute occurs.
          </p>
        </div>

        <div className="text-sm">
          <h3>\$15.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per dispute
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Early dispute alert (RDR)</h3>

          <p className="mb-4">
            Proactive chargeback notification fee.
          </p>
        </div>

        <div className="text-sm">
          <h3>\$29.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per alert
          </div>
        </div>
      </div>
    </div>

    <br />

    <br />
  </div>
</Update>

<Update label="Revenue optimization">
  <div className="space-y-4 rounded-2xl border border-gray-200 bg-white p-6 pb-0 dark:border-gray-800 dark:bg-[#0f0f13]">
    <div className="flex items-baseline justify-between">
      <div className="flex items-start gap-3">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=928aeafa6fb3ec779a7f2732cff16632" className="mt-0 mb-0" alt="Fees" data-og-width="88" width="88" data-og-height="88" height="88" data-path="images/revenue.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=cd582a3b0443a52cbc810573c331a035 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f34c08b9d116b5fe0e276d0045bd679c 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=56b1a74b56cf9b6d78e3ea22821b2e92 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=12eb268c029e4c67884ba384f9dc3673 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=b9d41d07e4ecb8b725acb3cead0d5bf6 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4d6b4b02da345bb24e08f7c68f515a0a 2500w" />
        </div>

        <div className="flex flex-col">
          <h2 className="m-0 p-0">Revenue optimization and automation</h2>
          <p className="m-0 p-0">Tools to reduce payment failures and increase revenue.</p>
        </div>
      </div>

      <div>[Start today →](/apps/docs/payments/taxes)</div>
    </div>

    <div className="space-y-2">
      <div>
        <Icon icon="check" iconType="solid" /> Automated systems that boost revenue and reduce churn.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Pricing optimized to reflect real cost of global scale infra.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Transparent and minimal fees per event.
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Orchestration</h3>

          <p className="mb-4">
            Route payments through multiple payment service providers to boost revenue by \~6%.
          </p>
        </div>

        <div className="text-sm">
          <h3>0.8%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction (when enabled)</div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Billing</h3>

          <p className="mb-4">
            Automated invoice generation, retries, and lifecycle handling.
          </p>
        </div>

        <div className="text-sm">
          <h3>0.5%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction</div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Tax and remittance</h3>

          <p className="mb-4">
            Handle global tax calculation, collection, and compliance.
          </p>
        </div>

        <div className="text-sm">
          <h3>0.5%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction (when enabled)</div>
        </div>
      </div>
    </div>

    <br />

    <br />
  </div>
</Update>

<Update label="Service fees">
  <div className="space-y-4 rounded-2xl border border-gray-200 bg-white p-6 pb-0 dark:border-gray-800 dark:bg-[#0f0f13]">
    <div className="flex items-baseline justify-between">
      <div className="flex items-start gap-3">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=192e70b58ac070c23b3652dbcf3b0481" className="mt-0 mb-0" alt="Fees" data-og-width="88" width="88" data-og-height="88" height="88" data-path="images/service.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=6907544d23a414c3ba94bfea93b90455 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=8d66539c67a284edc2023af6f435e40c 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=8018087c48e6b9de72a28bda9ee0c976 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a24172f5fb2fba8ece90c8520080b2ac 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a050e6d1fcede417f47d7b82770929e4 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=11eceef84908c28c1ad4f56d10c9b9aa 2500w" />
        </div>

        <div className="flex flex-col">
          <h2 className="m-0 p-0">Service fees</h2>
          <p className="m-0 p-0">Transparent service fees with no hidden costs or surprises.</p>
        </div>
      </div>

      <div>[Start today →](/apps/docs/payments/taxes)</div>
    </div>

    <div />

    <div className="space-y-2" />

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Whop platform fee</h3>

          <p className="mb-4">
            Applied only to purchases with automations like Discord, Telegram, and Trading View.
          </p>
        </div>

        <div className="text-sm">
          <h3>3%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction</div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Service Fee</h3>

          <p className="mb-4">
            General platform and infrastructure fee to support core functionality (charged to buyers).
          </p>
        </div>

        <div className="text-sm">
          <h3>0%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction</div>
        </div>
      </div>
    </div>
  </div>
</Update>

Interested in what other platforms charge? Pricing above is applicable to new merchants that sign up today. For enterprise customers, please book a call with our sales team [here](https://calendly.com/d/cv3h-5mq-vc2/whop-payments-enterprise-call).

| Platform  | Pricing                                                                    |
| --------- | -------------------------------------------------------------------------- |
| Stripe    | [stripe.com/pricing](https://stripe.com/pricing)                           |
| Square    | [squareup.com/pricing](https://squareup.com/us/en/pricing)                 |
| Shopify   | [shopify.com/pricing](https://www.shopify.com/pricing)                     |
| Braintree | [braintreepayments.com/pricing](https://www.braintreepayments.com/pricing) |
| Adyen     | [adyen.com/pricing](https://www.adyen.com/pricing)                         |


# What is Whop?
Source: https://docs.whop.com/get-started

Whop is a platform to launch and scale internet businesses.

Whop is on a mission to deliver everyone a sustainable income. That means that we help people choose what to sell, build their product, and get them customers. Businesses use Whop to sell information, software, and services.

<iframe className="w-full aspect-video rounded-xl" width="100%" height="400" src="https://www.youtube.com/embed/9gZS9SQn_B0?si=0BPZ1dlKqUnJBVhV&modestbranding=1&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin " allowfullscreen />

<Check>Businesses on Whop earn over \$1 billion every year.</Check>

## Get started

<CardGroup cols={1}>
  <Card title="Launch your business" icon="sparkles" href="/launch-your-business">
    Start an online business with a few clicks.
  </Card>
</CardGroup>

## Using Whop to accept payments

This works well if you've already built your business on other tools but want better payment processing.

<CardGroup cols={1}>
  <Card title="Start with payment processing" icon="credit-card" href="/payments/overview">
    Use Whop to process payments and create checkout links.
  </Card>
</CardGroup>

## Common business models

Learn how to set up popular business models on Whop:

<CardGroup cols={3}>
  <Card title="Educational programs" icon="people-group" href="/supported-business-models/educational-programs">
    Sell courses, workshops, and other educational programs.
  </Card>

  <Card title="Agency services" icon="gear" href="/supported-business-models/agency-services">
    Send invoices, chat with clients, and get paid.
  </Card>

  <Card title="Coaching" icon="graduation-cap" href="/supported-business-models/coaches">
    Charge for your services and organize your clients in one spot.
  </Card>
</CardGroup>

<CardGroup cols={3}>
  <Card title="Newsletters" icon="chart-line" href="/supported-business-models/newsletters">
    Publish long form writing and charge subscribers for exclusive content.
  </Card>

  <Card title="Paid groups" icon="people-group" href="/supported-business-models/paid-groups">
    Build a paid community where members connect and share alpha.
  </Card>

  <Card title="SaaS" icon="laptop" href="/supported-business-models/saas">
    Launch your app with built-in payments and user management.
  </Card>
</CardGroup>

<CardGroup cols={3}>
  <Card title="Events" icon="calendar" href="/supported-business-models/events">
    Run paid masterminds, events, and give attendees a unified place to chat.
  </Card>

  <Card title="DTC Ecommerce" icon="gear" href="/supported-business-models/dtc-ecommerce">
    Sell physical products online with an out of the box social layer.
  </Card>

  <Card title="Brick and Mortar" icon="store" href="/supported-business-models/brick-and-mortar">
    Accept in-store payments and manage memberships for your physical location.
  </Card>
</CardGroup>


# Launch your business
Source: https://docs.whop.com/launch-your-business

Create an account on Whop and launch your business.

To launch your online business on Whop, you first need to make an account.

<Steps>
  <Step title="Go to whop.com/sell" titleSize="h3">
    * Head over to [**whop.com/sell**](https://whop.com/sell)
    * Click **Start selling**
  </Step>

  <Step title="Choose how you plan to use Whop" titleSize="h3">
    Select the option that matches how you plan to use Whop

    1. **Build & sell digital products on Whop:** Choose this option if you plan to use Whop for building, hosting, and selling your digital products as well as accepting payments.
    2. **Use Whop for payment processing only:** Choose this option if you want to use Whop to process payments and create checkout links only - but host and deliver your product elsewhere.

    Select the option that best fits how you plan to use Whop, then click **Next**.
  </Step>

  <Step title="Name your business" titleSize="h3">
    Choose a name for your business.

    <Tip>
      You can always change this later.
    </Tip>
  </Step>
</Steps>

## Next steps

To launch your internet business, make sure you’ve completed the rest of the setup steps:

<CardGroup cols={3}>
  <Card title="Add apps to your whop" icon="block-brick" href="/add-apps">
    Choose from dozens of apps to create exactly what you need.
  </Card>

  <Card title="Set up pricing" icon="dollar-sign" href="/set-up-products-pricing">
    Choose your pricing model and what members get when they join.
  </Card>

  <Card title="Set up your store page" icon="store" href="/set-up-store-page">
    Your store page is where visitors come to learn about your offer.
  </Card>
</CardGroup>


# Affiliate program
Source: https://docs.whop.com/manage-your-business/growth-marketing/affiliate-program

Learn how to set up an affiliate program for your whop

Set up your affiliate program to automatically pay commissions when someone refers a new paying member to your whop.

## How the affiliate program works

When someone uses a referral link to join your whop and makes a purchase, the person who referred them earns a commission.

Here's how it works:

* You turn on the affiliate program
* Users get access to their unique affiliate link for your whop
* They share their link anywhere they want
* When someone joins through their link, Whop automatically tracks the referral and pays the commission
* You can customize commission rates anytime to fit your business model

## How to set up your affiliate program

<Steps>
  <Step title="Go to your affiliate settings" titleSize="h3">
    To find your affiliate program:

    1. Go to your **Dashboard**
    2. Make sure you're viewing the correct whop using the selection modal at the top left
    3. Click the **Marketing** dropdown
    4. Select **Affiliates**
  </Step>

  <Step title=" Set commission rates for your whop" titleSize="h3">
    1. Click **Set the affiliate commission for a specific whop**
    2. You'll see all your whops with two key settings:
       * **Global affiliate rate:** This is the commission rate offered to any user who refers others to your whop. The default is 30%, but you can adjust it to any percentage you prefer
       * **Member affiliate rate:** This is the commission rate specifically for your existing members who refer others. This allows you to reward your community differently than general affiliates (e.g. members get 50% commission while the global rate is 30%)

    <Tip>
      If you set the 'Member affiliate rate' to 0%, members will earn the global affiliate rate instead.
    </Tip>
  </Step>

  <Step title="Activate your affiliate program" titleSize="h3">
    After making changes, click the blue tick button to confirm your new rates.
  </Step>
</Steps>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/affiliates720p30fps.gif" alt="Affiliates program" />

### How to create custom rates for partnerships

For special partnerships or top performers, you can create custom commission structures:

1. Click **Set an affiliate commission for a specific user**
2. Enter the user's Whop account email address
3. Configure their reward:
   * Choose between **Percent** and **Fixed amount**
   * Select **Recurring payments** (ongoing commissions) or **First payment** (one-time commission)
   * Select which whops this rate applies to
4. Click **Invite** to send them an invitation

## Payment timing

Whop automatically handles all affiliate payments for you. There is a 30-day waiting period between when a referred customer makes their purchase and when the affiliate receives their commission.


# Automated messages
Source: https://docs.whop.com/manage-your-business/growth-marketing/automated-messaging

Learn how to send automated marketing messages on Whop

You can set up automated messages on Whop to send personalized DMs and emails when:

1. Someone joins your whop;
2. Someone leaves your whop; and
3. Someone checks out your store page but doesn't buy.

## How to find the automated messages settings

1. **Open your Dashboard**: From your Whop account, click **Dashboard** on the left side of your screen to access your whop's advanced settings.
2. **Find Automated messages**: Under the **Marketing** section in your sidebar, click **Automated messages**.

Here, you'll see three automated message options: User joined, User left, and New lead.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/automessages.gif" alt="Automatic messages" />

## How to set up 'User joined' messages

Send welcome messages automatically when new members join your whop. Use this feature to greet new members, let them know what their next steps should be, or upsell your higher ticket offers (potentially even offering a discount code).

<Steps>
  <Step title="Enable the automation" titleSize="h3">
    Click **Enable automation** on the **User joined** card to activate this automated message.
  </Step>

  <Step title="Set up your automated message" titleSize="h3">
    After enabling, you'll see several customization options:

    * **Toggle button**: Turn this on or off anytime (top right)
    * **Message field**: Write the message that's sent to new members
    * **Variables**: Add these variables to personalize the message:
      * recipient\_name - Shows their actual name
      * whop\_name - Shows your whop's name
    * **Add media**: Upload images or videos to your message
    * **Send email option**: Check this box if you want users to also receive an email notification (in addition to the DM on Whop)
    * **Send message as**: Select which team member the message should appear to come from
  </Step>

  <Step title="Save your settings" titleSize="h3">
    Click **Save** to activate your User joined automation.
  </Step>
</Steps>

## How to set up 'User left' messages

Send a message when someone leaves your whop and decides they don't want to be a member anymore. Use this feature to gather feedback (to learn why they left), or even try entice them back with a discount.

<Steps>
  <Step title="Enable the automation" titleSize="h3">
    Click **Enable automation** on the **User left** card to activate this automated message.
  </Step>

  <Step title="Set up your automated message" titleSize="h3">
    After enabling, you'll see several customization options:

    * **Toggle button**: Turn this on or off anytime (top right)
    * **Message field**: Write the message that will be sent to churned members
    * **Variables**: Add these variables to personalize the message:
      * recipient\_name - Shows their actual name
      * whop\_name - Shows your whop's name
    * **Add media**: Upload images or videos to your message
    * **Send email option**: Check this box if you want users to also receive an email notification (in addition to the DM on Whop)
    * **Send message as**: Select which team member the message should appear to come from
  </Step>

  <Step title="Save your settings" titleSize="h3">
    Click **Save** to activate your User left automation.
  </Step>
</Steps>

## How to set up 'New lead' messages

Send messages to people who click on your popup promotions.

<Tip>
  For the 'New lead' messages to work properly, you first need to enable popup promotions.
</Tip>

<Steps>
  <Step title="Enable popup promotions on Whop" titleSize="h3">
    Before setting up New lead messages, enable popup promotions on your store page.

    <Card title="Set up popup promotions" icon="hand-wave" href="/manage-your-whop/popup-promotions">
      Learn how to set up popup promotions on your store page.
    </Card>
  </Step>

  <Step title="Enable the automation" titleSize="h3">
    Click **Enable automation** on the **New lead** card to activate this automated message.
  </Step>

  <Step title="Set up your automated message" titleSize="h3">
    * **Toggle button**: Turn this on or off anytime (top right)
    * **Message field**: Write the message that will be sent to new leads
    * **Variables**: Add these variables to personalize the message:
      * recipient\_name - Shows their actual name
      * whop\_name - Shows your whop's name
      * store\_page\_url - Direct link to your store page
      * discount\_percentage - The discount percentage from your popup promotion
    * **Add media**: Upload images or videos to your message
    * **Send email option**: Check this box if you want users to also receive an email notification (in addition to the DM on Whop)
    * **Send message as**: Select which team member the message should appear to come from
  </Step>

  <Step title="Save your settings" titleSize="h3">
    Click **Save** to activate your New lead automation.
  </Step>
</Steps>

You can return to these settings anytime to change your messages or turn automations on and off.


# Content Rewards
Source: https://docs.whop.com/manage-your-business/growth-marketing/content-rewards

Learn how to use Content Rewards to grow your social presence 

Content Rewards is a marketing tool that connects your brand with content creators - they make content about your brand and you pay them for the number of views they get.

## What are Content Rewards?

Content Rewards is a tool to incentivize your customers to talk about your brand. They create content, post it to their social media, and you pay them based on views - but only after you approve their post.

**There are two types of campaigns you can run with Content Rewards:**

* **Content clipping:** Creators turn your existing long-form content (podcasts, livestreams, webinars) into short clips for TikTok, YouTube Shorts, X and Instagram Reels. Perfect when you have:
  * Podcasts or livestreams with great moments
  * Webinars with key talking points
  * Educational videos with quotable segments
  * Any long-form content that could work as short clips
* **User-generated content (UGC):** Creators produce original content featuring your brand based on guidelines you provide. Great for:
  * Customer testimonials and success stories
  * Brand awareness campaigns
  * Showing your services in action

You tell them what you want, and creators make original content that hits your requirements.

## How do Content Rewards work?

Content Rewards is an automated system that manages creator relationships and payments:

1. **Set up your campaign:** Choose your campaign type (clipping or UGC) and provide details about your brand and campaign goals
2. **Configure payment settings**: Set how much you will pay per 1,000 views and your budget for the campaign
3. **Creators make and distribute content**: Creators post content to their social media accounts, following your guidelines and requirements
4. **Review submissions:** Check submissions to see whether creators have followed your requirements, approving the ones that do and rejecting the ones that don’t
5. **Performance tracking and payments**: After approving a submission, Whop automatically pays the content creator based on the number of views they got

## Set up your first campaign

### Step 1: Add the Content Rewards app to your whop

* Go to your whop and click **Add app** to go to the Whop App Store
* Select **Content Rewards** from the available apps
* Click **Add** to include it in your whop

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/setupcontentrewards.gif" alt="Add Content Rewards app" />

<Card title="Create your whop" icon="sparkles" href="/create-account">
  If you don't have a whop yet, click on this card to learn how to set up your
  account.
</Card>

### Step 2: Create your first campaign

When you add the Content Rewards app, you'll see a form with all the settings you need to configure. Here's what each field means and how to set it up:

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/croptions1.png" alt="Configure Content Rewards" />

<Steps>
  <Step title="Campaign name">
    Your campaign name will be seen publicly by creators, so make it clear and appealing.

    * Enter a descriptive name that represents your brand or specific campaign (e.g. Laptop Lunch Prep UGC Campaign)
    * You can also include your reward rate in your title (Fanatics UGC - \$3 per 1,000 views) to entice content creators
  </Step>

  <Step title="Campaign type">
    Select the type of content you want creators to make:

    * **Clipping**: Creators take your existing videos or podcasts and turn them into short-form content
    * **UGC (User-Generated Content)**: Creators make original content featuring your brand
  </Step>

  <Step title="Brand category">
    Pick the category that best represents your brand. This helps creators understand your niche and create better targeted content.
  </Step>

  <Step title="Campaign budget">
    Enter the total amount you're willing to spend on this campaign. Think of this like ad spend, but instead of paying a platform directly, you're investing in creators who will promote your brand. You can select your preferred currency from the dropdown menu.

    <Tip>
      Note: You will not be charged until you set up your payments on Whop and deposit funds.
    </Tip>
  </Step>

  <Step title="Reward rate">
    Set how much creators earn per 1,000 views on their videos.

    <Tip>
      * UGC content typically pays higher rates than clipping
      * Higher rates attract better creators
    </Tip>
  </Step>

  <Step title="Minimum payout">
    Set the minimum amount a creator can earn from their video before it gets submitted for your review. If you set this to \$0, every single video submission (even with just a few views) will need to be reviewed. To focus on quality content that's actually performing, set a minimum payout amount.

    * **Example**: With a \$3 reward rate and \$6 minimum payout, only videos with at least 2,000 views will be submitted for review (\$3 × 2 = \$6 earned).
  </Step>

  <Step title="Maximum payout">
    Cap how much a single creator can earn from one video to protect your campaign budget. Without a cap, one video with hundreds of millions of views could consume your entire budget, leaving nothing for other creators. The maximum payout ensures your budget gets distributed across multiple creators and videos.

    * **Example**: With a \$3,000 max payout and \$3 reward rate, a creator stops earning once their video hits 1 million views, even if it continues growing.
  </Step>

  <Step title="Flat fee bonus (optional)">
    When you set a flat fee bonus, every approved submission earns both the view-based reward AND the flat fee amount. This can help attract more creators, especially when you're launching a new campaign.

    * **Example**: With a \$3 reward rate, \$10 flat fee, and 2,000 views, a creator earns \$16 total (\$6 from views + \$10 flat fee).
  </Step>

  <Step title="Platform selection">
    Choose which social media platforms you'll accept submissions from.
  </Step>

  <Step title="Available content">
    This is where you communicate what you want and give creators everything they need to make great content for your brand. Here's what to include:

    * Brand guidelines and details about your brand
    * Your campaign goals and messaging
    * Examples of content that's worked for your brand (case studies, successful hooks, etc.)
    * For clipping campaigns: Access to your video footage and any assets they can use

    <Tip>
      Pro tip: Upload a comprehensive Google Doc with all your guidelines and examples, then paste the shareable link here. You can always update the document later without changing your campaign settings.
    </Tip>
  </Step>

  <Step title="Requirements">
    Clearly outline the rules creators must follow for their submissions to be approved and paid:

    * Content quality standards
    * Brand mention requirements
    * Prohibited content guidelines
    * Video length or format specifications
    * Any specific messaging that must be included

    This protects your brand and ensures you only pay for content that meets your standards.
  </Step>
</Steps>

### Step 3: Fund and launch your campaign

After creating your campaign, you'll see the Add budget popup automatically.

To add funds:

1. Pick how you want to pay (whop balance, card, Cash App, etc.)
2. Enter the amount
3. Click **Send**

The payment takes about a minute to process. Your Content Reward will automatically move from **Pending budget** to the **Active** tab once it is complete.

### **Top up your balance**

You can add more money anytime by:

1. Clicking the 3 dots (···) on your campaign
2. Selecting **Add budget**
3. Entering the amount and clicking **Send**


# Popup promotions
Source: https://docs.whop.com/manage-your-business/growth-marketing/popup-promotions

Learn how to set up popup promotions on your store page

Popup promotions show a discount offer to people who've been browsing your store page for 45+ seconds or are about to click away. Even if they don't purchase immediately, you capture their contact info so you can follow up later.

## Enable popup promotions

<Steps>
  <Step title="Access your store settings" titleSize="h3">
    Go to your **Dashboard** and click **Edit store page** under the Admin area of your whop, then click the **Edit details** button on the store page.
  </Step>

  <Step title="Turn on popup promotions" titleSize="h3">
    In the Edit details popup, scroll down to find the **Enable popup promotion** setting and toggle it on.
  </Step>
</Steps>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/enablepopup720p30fps.gif" alt="Popup" />

## Set up your popup promotion

When you enable popup promotions, you'll need to configure the settings:

* **Set your discount percentage**: Use the **Discount percentage** field to decide how much of a deal you want to offer. This is what visitors will see when they've been browsing for 45+ seconds or are trying to leave your store page (showing exit intent).

## View and contact your leads

When popup promotions are running, you can view your leads and follow up with them directly.

<Tip>
  Your list of leads includes everyone who has clicked the 'Claim' button on your popup promotion
</Tip>

<Steps>
  <Step title="Check your leads" titleSize="h3">
    Go to **Dashboard** > **Leads** to see everyone who has interacted with your popup promotions.
  </Step>

  <Step title="Review lead details" titleSize="h3">
    For each lead, you'll find:

    * Username
    * Which whop they visited
    * Email address
    * Visit date
  </Step>

  <Step title="Reach out to your leads" titleSize="h3">
    Click the **Send message** button next to any lead to contact them directly and encourage them to complete their purchase.
  </Step>

  <Step title="Export your data (optional)" titleSize="h3">
    Click **Export** in the top right to download your list of leads.
  </Step>
</Steps>


# Promo codes
Source: https://docs.whop.com/manage-your-business/growth-marketing/promo-codes

Learn how to create and manage promo codes

Use promo codes to offer percentage discounts (like 10% off) or fixed amounts (like \$10 off) that people can apply at checkout to join your whop.

<iframe width="100%" height="400" src="https://www.youtube.com/embed/tIdnAPTwt7g?si=jtsX6HJOG-Lh3KlE&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

## How to create a promo code

<Steps>
  <Step title="Access your dashboard" titleSize="h3">
    Head over to your **Dashboard.**

    <Tip>
      Make sure you're viewing the whop you want to create a discount for (using the whop selection modal at the top left).
    </Tip>
  </Step>

  <Step title="Navigate to Promo codes" titleSize="h3">
    Click the **Marketing** dropdown and select **Promo codes**. You'll see any existing promo codes you've already created for your whop here.
  </Step>

  <Step title="Create a new code" titleSize="h3">
    If this is your first promo code, click **+ Create Promo Code** in the center of your page. If you've already created a promo code (and you want to create a new one) click **+ Create promo code** at the top right of your screen. A popup will appear where you'll set up your code.
  </Step>

  <Step title="Set up your promo code" titleSize="h3">
    Configure the settings for your promo code:

    1. **Code**: This is the actual promo code name, like "SAVE20" or "WELCOME10." Type what you want your code to be called.
    2. **Discount**: Decide how much your discount will be
       * Use the dropdown to pick either a **Percentage** (like 10% off) or a **Fixed amount** (like \$10 off).
       * Then, enter the discount value in the field above the dropdown.
    3. **Discount duration:** Decide how long the discount applies
       * **One-time (default)**: The discount is applied only once.
       * **Forever**: The discount applies to all future payments.
       * **Multiple months**: The discount applies for a specific number of months (a field will pop up for you to enter the number).
    4. **Eligible users**: Who can use this code?
       * **Everyone (default)**: Anyone can use it.
       * **Only new**: Only new customers can use this code.
       * **Only churned**: Only previous customers who have left can use it.
    5. **Expires**: Set when the promo code expires using the date and time selector. This is enabled by default and set to one month from creation.
    6. **Usage limit section**: Enter the maximum number of times this code can be used. Default is set to 100 uses.
    7. **One per customer**: If you enable this, each customer can only use the promo code once. This is enabled by default.
    8. **Apply to specific whops**: This is off by default. If you turn it on, you can limit the promo code to certain checkout links within your organization.
  </Step>

  <Step title="Activate your code" titleSize="h3">
    Click **Create** at the bottom of the popup to make your promo code live.
  </Step>
</Steps>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/promocode720p30fps.gif" alt="Promo code" />

## Manually expire a promo code

If you need to deactivate a promo code before its set expiration date, you can manually expire it.

1. **Access the promo code options**: Click the three dots (︙) next to the promo code you want to expire.
2. **Click Expire**: Select **Expire** from the dropdown menu that appears.
3. **Confirm expiration**: A confirmation message will pop up. Click **Expire** to permanently deactivate the promo code.

<Warning>
  When a promo code is expired, you can't reactivate it. If you want to offer that same discount again, you'll need to create a brand new promo code.
</Warning>


# Tracking links
Source: https://docs.whop.com/manage-your-business/growth-marketing/tracking-links

Set up tracking links to see where your users are coming from 

Create custom tracking links to see exactly where traffic is coming from and which marketing efforts are working.

<Tip>
  Use different links for your emails, Twitter posts, Instagram bio, YouTube descriptions - then compare which channels convert best.
</Tip>

### How to set up tracking links

1. Go to **Dashboard** > **Marketing** > **Tracking links**
2. Click **+ Create tracking link**
3. Fill out these details:
   * **Name**: A name only you can see
   * **Whop**: Choose which whop it links to
   * **Destination**: This is where the user will be sent after they click the link
     * Select **Checkout** if you want the link to send them straight to a checkout page
     * Select **Store** if you want the link to send them to your store page
   * **Plan**: Pick the pricing plan you want to link to
4. Create a custom URL for each link
5. Click **Create**
6. Copy your link by clicking the 3 dots (︙) > **Copy link**

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/trackinglinks720p30fps.gif" alt="Tracking links" />

### What you can measure with tracking links

When your tracking links are live, you'll see exactly how each link performs with detailed analytics.

Here's what you can track:

* **Clicks**: Total number of people who clicked your link
* **Revenue generated**: Actual dollars earned from each link
* **Conversion rate**: Percentage of clicks that turn into paying customers
* **Converted users**: Number of people who actually bought after clicking

<Card title="Set up external tracking integrations" icon="magnifying-glass" href="/manage-your-whop/integrations">
  Whop integrates with major analytics platforms to help you get the full picture of your marketing and monitor your traffic
</Card>


# Analytics
Source: https://docs.whop.com/manage-your-business/manage-business/analytics

Understand Whop's built-in analytics

Whop’s built-in analytics help you understand how your business is growing, your financial performance, and who your customers are.

## How to view your analytics

To view your analytics:

1. Go to your **Dashboard**
2. Click **Home**

### How to add analytics widgets to your Dashboard

Widgets are metric cards that show your most important business stats at a glance. Choose which metrics you want to track and customize your dashboard layout.

Here's how:

1. Go to **Dashboard** > **Home**
2. Click **+ Add** on the right side under **Stats**
3. Click **+** on the widgets you want
4. Click **Apply** when you're done
5. Drag them around to organize them how you want
6. Click **Done** (next to **+ Add**) to save your new widget layout

<Tip>
  The dashboard widgets are organized into three main categories: Users,
  Payments, and Resolution Center. Each category provides specific stats to help
  you understand different aspects of your business performance.
</Tip>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/analytics720p30fps.gif" alt="Analytics" />

## Understanding your analytics data

### 1. User analytics

The Users category helps you understand who your customers are and how they interact with your business.

**Customer engagement metrics**

* **Top users**: The members that have spent the most amount (excluding refunds and disputes)
* **New users**: Total number of new users in the time period specified. This does not include existing users who renew their memberships or add additional subscriptions
* **Time spent** : The amount of time spent by users in your whop
* **Page visits**: Estimated number of visits to your store pages in the specified period of time
* **Users breakdown**: Total number of users per status (e.g. Joined, Renewing, Trialing, Paused)

**User status breakdown**

* **Paid active users**: Total number of paid active users in your whop in the specified time period
* **Users with app installed**: The number of users with an active membership who have the mobile app installed

**Conversion & Revenue metrics**

* **Spend per paying user**: Estimated revenue for all payments made by customers, divided by the total number of customers who have made a payment
* **Trial conversion rate**: The percentage of users that converted from a trial to an active subscription in the specified period of time
* **Top affiliates**: The affiliates who have generated the most revenue for your whop

### 2. Payments analytics

The Payments category tracks your financial performance with detailed payment and revenue metrics.

**Core revenue metrics:**

* **Gross revenue**: Revenue from payments are had been made to your Whop account
* **MRR (Monthly Recurring Revenue)**: Estimated monthly revenue from all active and past-due subscriptions
* **ARR (Annual Recurring Revenue)**: Estimated annual revenue from all active and past-due subscriptions
* **Revenue (after Whop fees)**: Estimated revenue after Whop fees in the specified time period

**Payment transaction data:**

* **Payments breakdown**: All payment volume in the specified time period per status (Paid, Failed, Past due, Canceled, Refunded, Pending)
* **Successful payments**: Total number of successful payments in the specified time period
* **Payment processing fees**: Total transaction fees charged by payment processors
* **Spend per subscription**: Estimated revenue for subscription payments, divided by the total number of subscribers

**Business health indicators:**

* **Churn rate**: Churned users in the past 30 days divided by active users 30 days ago plus new users in that period
* **Churned revenue**: The total MRR lost in the specific time period due to churn

**Tax and Fee management:**

* **Sales Tax Withheld**: Estimated sales tax withheld in the specified time period
* **Affiliate Fees**: Estimated total fees paid to affiliate referrals in the specified time period

**Disputes:**

* **Disputes Count**: Total number of disputes received in the specified time period
* **Dispute Alerts Count**: Total number of alerts received in the specified time period

<Tip>
  Payment stats help you spot trends, catch problems early, and make smart
  pricing decisions.
</Tip>

### 3. Resolution Center analytics

The Resolution Center category shows you:

* **Total Refunded**: Total amount refunded to customers in the specified time period


# Integrations
Source: https://docs.whop.com/manage-your-business/manage-business/integrations

Set up external tracking integrations

Whop integrates with major analytics platforms to help you get the full picture of your marketing and monitor your whop's traffic.

### Supported platforms

* Google Analytics
* Hyros
* Meta
* TikTok
* X (formerly Twitter)
* Reddit
* Pinterest
* HubSpot

### What these integrations track

When someone visits your whop, data gets sent to these platforms so you can:

* See traffic from all your marketing
* Know where visitors come from
* Track how well your ads work
* Connect page views to specific campaigns

### How to add platform IDs

To connect any analytics platform:

1. Go to your **Dashboard > Settings**
2. Under **Analytics**, click the platform you want to integrate with your whop
3. Enter your tracking ID(s) and API keys
4. Click the blue checkmark to activate the integration

<Tip>
  There are tutorials under each platform to help you find Pixel ID(s) and API keys.
</Tip>


# Upload legal documents
Source: https://docs.whop.com/manage-your-business/manage-business/legal-documents

Learn how to upload legal documents and policies to your whop

Adding legal documents to your Whop helps cut down on fake disputes and chargebacks, and your customers will know exactly what to expect when they buy from you.

When someone buys access to your Whop, they automatically agree to Whop's terms. But you can add your own legal documents for more protection.

## Which legal documents you can upload

You can upload 4 different legal documents to your Whop:

* **Terms of Service**: Your business terms and conditions
* **Privacy Policy**: How you handle customer data
* **Return Policy**: Your refund and return procedures
* **EULA (End User License Agreement)**: Software or digital product usage terms

<Tip>
  Set up your legal documents before you sell anything. This way, you're protected from day one, and your customers know what they're signing up for.
</Tip>

## How to upload your legal documents

To add your legal documents:

1. Go to **Dashboard** > **Settings** > **Legal** (3rd option under Settings)
2. Click **Upload file** to the right of the document type you want to add
3. Either drag and drop your file or click **Browse files** to find it on your computer
4. Once you pick your file, click **Upload file** at the bottom left
5. Repeat steps 2 to 4 for any other documents you want to upload

<Tip>
  You can check your uploaded files by clicking View file next to each document or remove one by clicking Delete.
</Tip>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/uploadlegal720p30fps.gif" alt="Legal documents" />

## How to require customers to agree to your terms before checkout

To have customers agree to your terms before purchasing:

1. Go to **Dashboard** > **Settings** > **Legal** (3rd option under Settings)
2. Under **Options**, toggle **Require terms and conditions acceptance**

<Tip>
  When you turn this on, customers have to check a box saying they agree to your terms before they can buy anything.
</Tip>


# Create a waitlist
Source: https://docs.whop.com/manage-your-business/products/create-waitlist

Have people join a waitlist before they can access your whop

A waitlist allows you to control who joins your whop. People apply to join, you review them, then approve the ones you want.

<Tip>
  You can view and manage all your waitlist entries by going to your Dashboard > Waitlists.
</Tip>

## How to create a waitlist checkout option

**To set up a waitlist for your whop:**

1. Go to your **Dashboard** > **Checkout links**
2. Click **+ Create checkout link**
3. Toggle **Advanced options** and click **Add a waitlist**
4. Click **Create**

Anyone who joins through your checkout link will now be added to the waitlist instead of getting immediate access.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/waitlist720p30fps1.gif" alt="Waitlist" />

## How to add questions to your waitlist

Pro tip: Add required questions for customers to answer before joining your waitlist. This will help qualify potential members and assess if they’re a good fit for your whop.

To add questions to your waitlist:

* Go to **Dashboard** > **Checkout links**
* Find your waitlist link and click the 3 dots (⋮)
* Click **Edit**
* Under **Advanced options**, click **Ask questions before checkout**
* Add your question titles and placeholder text
* Click **Update checkout link**

## How to approve/deny waitlist entries

Go to **Dashboard > Waitlists** to manage your waitlist. From here, you can:

* **Approve** (thumbs up button) or **deny** (thumbs down button) individual users
* **Admit all entries** at once by clicking the **+ Admit all entries** button
* **Export entries** by clicking the **Export** button in the top right
* **Contact users** on your waitlist via DM or email

When you approve someone, they'll automatically get access to your whop and receive a notification.

## When to use a waitlist

Waitlists work great when you want to:

* **Build anticipation while you're still creating**: Collect emails, build an audience, and validate demand without opening access right away.
* **Qualify potential customers**: Add custom questions to qualify leads before giving them access.
* **Create exclusivity for your community**: When people have to apply and wait for approval, it makes your whop feel more valuable and desirable.
* **Launch a limited beta** — Control who gets early access by reviewing applicants before letting them in. Perfect for testing with a smaller, high-quality group.


# Free trials
Source: https://docs.whop.com/manage-your-business/products/free-trials

Learn how to set up a free trial for your whop

Free trials give people access to your whop for a limited time. Once the trial ends, they are automatically charged the standard price for access.

## How to set up a free trial for your whop

There are two ways to set up a free trial:

<Note>
  You can only add a free trial to 'Recurring' checkout links.
</Note>

### 1. Through your Dashboard

To set up a free trial from your Dashboard:

1. Go to **Dashboard** > **Checkout links**
2. Pick an existing link and click the 3 dots (⋮) > **Edit**, or make a new one by clicking **+ Create checkout link**
3. Check **Free trial**
4. Pick how many free days you want to offer (like 1 day, 7 days, or 30 days)
5. Click **Update checkout link** to activate your free trial

### 2. Through your whop's Pricing page

To set up a free trial from your whop's **Pricing** page:

1. Go to **whop** > **Manage pricing**
2. Pick an existing pricing option and click the 3 dots (…) > **Edit**, or make a new one by clicking **+ Create pricing option**
3. Check **Free trial**
4. Pick how many free days you want to offer
5. Click **Update checkout link** to activate your free trial

<Warning>
  After the trial ends, people automatically get charged the full price unless they cancel first. This helps you make more money without doing any extra work.
</Warning>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/freetrial720p30fps1.gif" alt="Free trial" />

## Understanding trial abuse and prevention

* **What is trial abuse?** This happens when someone keeps signing up for free trials but cancels before they have to pay. They might use different emails or make new accounts to avoid paying.
* **How Whop stops this:** Whop automatically catches when the same person tries to sign up for multiple free trials. If someone cancels and then tries to rejoin with another trial, the system will charge them full price instead of giving them another free period.

<Tip>
  Don't worry too much about trial abuse: 99% of people use trials honestly, and Whop handles the bad actors automatically.
</Tip>


# Locked content and upsells
Source: https://docs.whop.com/manage-your-business/products/locked-premium-content

Learn how to set up locked content in your whop and use it to upsell members

Locked content on Whop allows you to restrict access to specific apps. People can only access Locked apps by paying a fee or getting permission from you. You can use this feature to set up:

* **Premium features**: Lock specific apps behind a paywall
  * Example: Give everyone your daily picks, but charge extra for a bankroll management guide
* **Exclusive content**: Permit access to some apps for certain members only
  * Example: Create an exclusive chat reserved only for the members who hit a specific milestone
* **Upselling**: Upsell additional products during or after checkout
  * Example: After someone buys your trading course, ask if they also want to buy your trading indicators

## Create locked content

To set up locked content in your whop, you need to choose the specific app you would like to lock:

1. Click the 3 dots (⋮) next to the app you want to lock and click **App settings**
2. Under **Visibility**, choose **Locked**
3. Pick either **Free** or **Paid (one-time)** access

## Set pricing and access options

### Free locked content

* Choose **Free** and **Add a waitlist** to control who gets access to your locked app

<Card title="Create a waitlist" icon="list" href="/manage-your-whop/create-waitlist">
  Learn more about managing your waitlists (and how to add questions to your waitlists)
</Card>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/lockedappfree720p30fps.gif" alt="Free locked content" />

### Paid locked content

* Choose **Paid (one-time)** to charge people to access your locked app
* Set the price
* Choose the currency
* The upsell method ([see more details below](#choose-your-upsell-method))

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/lockedapppaid720p30fps.gif" alt="Paid locked content" />

### Additional settings

* **Expiration:** Set when access runs out
* **iOS screenshot protection:** Stop people from taking screenshots to prevent leaks
* **Add to other whops:** Use the same locked app in multiple whops you own

## Choose your upsell method

When creating paid locked content, you need to decide when and where members will see your offer. You have three upsell methods to choose from:

### 1. Before checkout

Shows up as an add-on on the checkout page of your whop (i.e. an order bump). Your prospective customer will have the option to add it to their cart and pay extra to access the locked content.

In the image below, you can see what a pre-checkout order bump looks like for your customers. In this example, customers have the option to add the additional 'Chat' for \$100.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/freetrialcustomer3andbeforecheckoutupsell.png" alt="Before checkout upsell" title="Before checkout upsell" className="mx-auto" style={{ width:"41%" }} />

### 2. After checkout

A popup appears right after someone joins your whop (i.e. an upsell). This is great for showing premium content to people who have just joined your whop (when they already have their wallet out and are in the buying mood).

You have two options to set up your custom upsell page:

<Tabs>
  <Tab title="Option 1">
    * Find the Locked app and click the **3 dots (⋮)** next to the app
    * Click **App settings**
    * Click the edit link under **After checkout**
  </Tab>

  <Tab title="Option 2">
    1. Click **Edit store page** > **Edit details**
    2. Scroll and click **Upsells**
  </Tab>
</Tabs>

From there, you can add:

* **Upsell title**: Write something that grabs attention
* **Upsell description**: Explain why it's worth it (180 characters max)
* **Upload video**: Add a video explaining your offer (16:9 works best)
* Click **Save** when you're done.

<Tip>
  Pro tip: Adding a short video / VSL improves conversions.
</Tip>

Below, you can see what the post-checkout upsell popup looks like for your customers.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/aftercheckoutupsell.png" alt="After checkout upsell" />

### 3. Only display in this whop

Locked content will show as Locked inside your whop. Members can find and buy it while organically browsing inside your whop.


# Manage products
Source: https://docs.whop.com/manage-your-business/products/manage-products

Learn how to manage and update products in your whop

Update your product pricing, change which apps your customers get access to, and create new products or billing options.

## Update an existing product

<Steps>
  <Step title="Select the product you want to change" titleSize="h3">
    1. Go to your Dashboard
    2. Click **Products**
    3. Click on the product you want to update
  </Step>

  <Step title="Update the title and description" titleSize="h3">
    1. Update the **title** and **description** directly in the main fields
    2. Click **Save Changes** when done
  </Step>

  <Step title="Change pricing" titleSize="h3">
    1. Click on the current **price** – a dropdown menu will appear
    2. Enter the new amount your product should cost
    3. Click **Save Changes**

    <Tip>
      You can only update the price amount here, not the pricing model (i.e. free, one-time payment, or recurring). To offer a different pricing model, you need to add a new billing period (see 'Add a new pricing model' below).
    </Tip>
  </Step>

  <Step title="Add a new pricing model" titleSize="h3">
    You can have multiple pricing models for the same product (e.g. a monthly subscription AND a yearly subscription AND a one-time fee for lifetime access).

    To add a new pricing model:

    1. Click **Add another visible billing period**
    2. Select the pricing type (free, one-time, or recurring)
    3. Choose currency and set the price
    4. Configure billing cycle (for recurring plans)
    5. Click **Save Changes**
  </Step>

  <Step title="Update advanced settings" titleSize="h3">
    Click **Advanced options** to modify:

    * **Stock**: Limit how many people can purchase this product
    * **Show on store page**: Make this product visible on your public store page
    * **Add a waitlist**: Users enter payment details but aren’t charged until you approve them
    * **Ask questions before checkout**: Collect information from customers before they purchase
    * **Auto-expire access**: Automatically remove access after a set time period
    * **Redirect after checkout**: Send customers to a specific page after they complete checkout
    * **Add internal name**: A name only you can see on your dashboard
  </Step>

  <Step title="Update payment methods" titleSize="h3">
    1. Click **Payment methods**
    2. Select or deselect the options you want to offer:
       * Credit/debit card
       * Bank transfer (ACH)
       * PayPal
       * Cryptocurrency
       * Buy now, pay later (Financing)
    3. Click **Save Changes**
  </Step>
</Steps>

## Select which apps are included in a product

Control what customers get access to when they purchase each product by selecting (and deselecting) which apps to include.

**To update app access:**

1. Go to **Dashboard** > **Products**
2. Click on the product you want to change
3. In the right-hand column, you'll see all your available apps
4. **Toggle on** apps you want included in this product
5. **Toggle off** apps you want to exclude
6. Changes save automatically

<Info>
  **Example scenario:**

  * **Free product**: Includes only a free chat app and a beginners course (excluding all premium apps)
  * **Premium product**: Also includes premium apps (e.g. advanced learning materials and templates)
  * **VIP product**: Includes an extra app that gives VIP members the ability to book 1-on-1 calls with you
</Info>

## Create a new product

You can create multiple membership tiers (e.g. free and premium) by creating multiple products.

To create a new product:

1. Go to your whop
2. Click **Products**
3. Click **Create product**

<Card title="Set up your product pricing and details" icon="dollar-sign" href="/set-up-products-pricing">
  Learn more about how to configure the settings of your product here.
</Card>

## Preview what members see in each product

Members will only see apps they have access to based on the products they have joined and purchased.

**To see what your product looks like for your members:**

1. Go to your whop's main page
2. Click the **Preview as** dropdown menu
3. Select the product you want to preview

## Organize your apps and categories in each product

You can create categories to group your apps and drag and drop both categories and apps to keep your whop looking clean and organized.

**To create categories:**

1. Right-click in the left-hand app column (where you can see the list of all your apps)
2. Select **Create category**
3. Name your category
4. Click **Create**

**To rename categories:**

1. Right-click on the category
2. Select **Edit category**
3. Update the name
4. Click **Save**

**To rename apps:**

1. Right-click on the app you want to update
2. Click **App settings**
3. Update the name
4. Click **Save**

<Tip>
  There are 2 ways to organize your apps when managing multiple products:

  1. Organize by product tier: Create categories like "Free Members" and "Premium Members" and group relevant apps under each category
  2. Organize by content theme: Create categories like "Community", "Learning", "Events" and rename apps to show access level (e.g., "Free Chat", "Premium Chat")
</Tip>


# Roles and permissions
Source: https://docs.whop.com/manage-your-business/team-management/manage-team-roles

Learn how to manage your team, roles and permissions

Your Team tab is where you decide who gets access to your whop and what permissions they have.

## How to add team members to your whop

1. Go to **Dashboard** > **Team**
2. **(Recommended):** Toggle on **Require 2FA** to make sure all team members use secure login
3. Click **Invite team member** in the top right corner
4. Enter the person's email address in the **Email** field
5. Select their role from the **Role** dropdown menu
6. Click **Invite**

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/inviteteam.gif" alt="Invite team members" />

Your team member will automatically be sent an invitation email. When they accept, they'll show up in your team table with their new permissions.

You can see all your pending invites on the **Invites** tab next to **Members**.

<Warning>
  Start small. Always give someone the lowest role that lets them do their job. You can always give them more access later if needed.
</Warning>

## Roles and permissions overview

There are four different roles you can assign to your team members:

* **Moderator**
* **Sales Manager**
* **Admin**
* **Owner**

Each of these roles has a different level of permissions - Moderator has the least access, and Owner has the most.

### **Moderator**

* Delete messages and mute or ban members in the Chat app
* Delete comments in Forums
* Keep your community chat friendly and spam-free

<Tip>
  The Moderator role is best for community managers, support agents, or anyone helping manage your community.
</Tip>

### **Sales Manager**

All Moderator permissions, plus:

* View the Users table (but can't export it)
* View the Payments table (but can't export it)
* View and create checkout links

<Tip>
  The Sales Manager role is best for marketing team members, affiliate managers, or sales reps who need to see failed and successful payments or create and track custom checkout links.
</Tip>

### **Admin**

All Moderator and Sales Manager permissions, plus:

* View waitlists and cancellation reasons
* Access Finances section (except Payouts)
* View and manage products, apps, and the store page
* Give refunds to customers
* View and manage the Marketing section of the dashboard
* Invite other team members (Moderators and Sales Managers only)
* View general settings (but can't edit them)

<Tip>
  The Admin role is best for operations managers, team leads, heads of marketing/community, or anyone needing broader dashboard access.
</Tip>

### **Owner**

All permissions from other roles, plus:

* Access to Payouts
* View and manage API keys, OAuth, and Webhooks settings
* Invite Admins and Owners
* View **analytics**
* Transfer ownership

<Tip>
  The Owner role is best for founders, co-founders, CTOs, or finance/legal leads who need complete control.
</Tip>

### **Complete permissions breakdown**

| Permission                                   | Moderator | Sales Manager | Admin | Owner |
| :------------------------------------------- | :-------- | :------------ | :---- | :---- |
| Delete messages in the Chat app              | ✔️        | ✔️            | ✔️    | ✔️    |
| Mute users in Chat app                       | ✔️        | ✔️            | ✔️    | ✔️    |
| Ban users in Chat app                        | ✔️        | ✔️            | ✔️    | ✔️    |
| Delete comments in Forums app                | ✔️        | ✔️            | ✔️    | ✔️    |
| View Checkout links section on dashboard     | ✔️        | ✔️            | ✔️    | ✔️    |
| Create new checkout links                    | ❌         | ✔️            | ✔️    | ✔️    |
| View Users table on dashboard                | ✔️        | ✔️            | ✔️    | ✔️    |
| Edit store page                              | ❌         | ❌             | ✔️    | ✔️    |
| Add & configure apps                         | ❌         | ❌             | ✔️    | ✔️    |
| Create products                              | ❌         | ❌             | ✔️    | ✔️    |
| Give refunds to customers                    | ❌         | ❌             | ✔️    | ✔️    |
| Export Users table on dashboard              | ❌         | ❌             | ✔️    | ✔️    |
| View waitlists                               | ❌         | ❌             | ✔️    | ✔️    |
| View cancellation reasons                    | ❌         | ❌             | ✔️    | ✔️    |
| View Finances section                        | ❌         | ❌             | ✔️    | ✔️    |
| Access Payouts section                       | ❌         | ❌             | ❌     | ✔️    |
| View Marketing section                       | ❌         | ❌             | ✔️    | ✔️    |
| Manage Marketing section                     | ❌         | ❌             | ✔️    | ✔️    |
| View general settings                        | ❌         | ❌             | ✔️    | ✔️    |
| Edit general settings                        | ❌         | ❌             | ❌     | ✔️    |
| View team settings                           | ❌         | ❌             | ✔️    | ✔️    |
| Invite Moderators                            | ❌         | ❌             | ✔️    | ✔️    |
| Invite Sales Managers                        | ❌         | ❌             | ✔️    | ✔️    |
| Invite Admins                                | ❌         | ❌             | ❌     | ✔️    |
| Invite Owners                                | ❌         | ❌             | ❌     | ✔️    |
| View analytics on Home page of the dashboard | ❌         | ❌             | ❌     | ✔️    |
| View API keys settings                       | ❌         | ❌             | ❌     | ✔️    |
| Manage API keys settings                     | ❌         | ❌             | ❌     | ✔️    |
| View OAuth settings                          | ❌         | ❌             | ❌     | ✔️    |
| Manage OAuth settings                        | ❌         | ❌             | ❌     | ✔️    |
| View Webhooks settings                       | ❌         | ❌             | ❌     | ✔️    |
| Manage Webhooks settings                     | ❌         | ❌             | ❌     | ✔️    |
| Transfer ownership                           | ❌         | ❌             | ❌     | ✔️    |

<Warning>
  Important: Some things your team can do (like deleting messages or checkout links) can't be undone.
</Warning>

## How to change team member roles

You can update anyone's role at any time to give them more or less access.

To change someone's role:

1. Go to **Dashboard > Team**
2. Find the team member in the members table
3. Click the dropdown menu in their **Role** column
4. Select their new role
5. Click **Save**

The change happens right away, and they'll have their new permissions immediately.

## How to remove team members

To remove a team member:

1. Go to **Dashboard > Team**
2. Find the team member you want to remove
3. Click the three dots (︙) on the right side of their row
4. Select **Remove user**
5. Click the red **Remove user** button in the confirmation pop-up

They'll immediately lose access to your whop and will need to be reinvited if you want to add them back to the team.


# Pay your team
Source: https://docs.whop.com/manage-your-business/team-management/pay-your-team

Learn how to pay your team members through Whop

Pay your team directly from your Whop balance. Payments are instant and your team can cash out to their bank.

<Warning>
  There's a 1% fee for all team payments
</Warning>

### Pay your team through your Dashboard

1. Go to **Dashboard** > **Team**
2. Click the **Pay** button next to the person you want to pay
3. Enter the amount you want to send
4. Select the **Balance** you'll send the payment from
5. Add a note (optional)
6. Click **Send** to send it

<Info>
  Note: The total amount you send includes the 1% fee.
</Info>

When you send it, your team member gets an email and a DM notification. They can then go to **Profile** > **Balance** to cash out.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/payteam1.png" alt="Pay team dashboard" />

### Pay your team through their profile

You can also send money to any Whop user through their profile - even if they're not officially on your team.

1. Click the user's profile picture
   * If you know their username, go straight to their profile by entering **whop.com/@\[username]** in your browser’s address bar (e.g., **whop.com/@George**).

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/payteamprofile.png" alt="Pay team profile" />

2. On their profile, click the **Pay** button next to **Message**.
3. Fill out the payment details:
   * **Enter amount:** Type how much you want to send
   * Select the **Balance** you'll send the payment from
   * **Write a note:** Add a note (optional)
4. Click **Send** to send the money

They'll receive an email and message notification, and can cash out through **Profile** > **Balance**.


# Billing portal
Source: https://docs.whop.com/payments/billing-portal

A self-service portal for subscription management

The billing portal is where customers can manage active memberships and view billing history.

<Tip>
  The billing portal is the easiest way to let customers manage their own
  subscriptions. It saves you time on support requests and gives customers
  instant control.
</Tip>

## What customers can do in the portal

The billing portal gives customers full control over their memberships:

* **View membership details**: See active plans, renewal dates, and billing cycles
* **Update payment methods**: Add, remove, or change credit cards and other payment methods
* **View billing history**: Access past invoices and receipts
* **Cancel subscriptions**: Cancel memberships without contacting support
* **Transfer memberships**: Move memberships to another account

## How to access the billing portal

Customers can access the billing portal by going to [Profile -> Orders](https://whop.com/@me/settings/orders/), and then clicking on an active subscription.

## For Developers

If you're building an integration, you can access the billing portal URL programmatically through the Whop API. Each membership has a `manage_url` field that provides a direct link to that customer's billing portal.

When you retrieve a membership through the API, the `manage_url` field will look like:

```
https://whop.com/billing/manage/mber_*************/
```

This URL is unique to each membership. Users must be logged in to access the portal. If they're not logged in, they'll be prompted to do so. You can include this link in your app, emails, or customer dashboards to give users quick access to their billing portal.

<Card title="Retrieve Membership API" icon="code" href="https://docs.whop.com/api-reference/memberships/retrieve-membership">
  See the API reference for retrieving memberships and accessing the
  `manage_url` field
</Card>

## Related resources

<CardGroup cols={2}>
  <Card title="Webhooks" icon="webhook" href="/apps/features/webhooks">
    Monitor billing portal actions with webhooks
  </Card>

  <Card title="Refunds" icon="rotate-left" href="/payments/refund-customer">
    Process refunds for your customers
  </Card>

  <Card title="Send an invoice" icon="file-invoice" href="/payments/send-an-invoice">
    Create and send invoices to customers
  </Card>

  <Card title="Memberships API" icon="code" href="/api-reference/memberships">
    Work with memberships programmatically
  </Card>
</CardGroup>


# Embed checkout
Source: https://docs.whop.com/payments/checkout-embed

Learn how to embed Whop's checkout flow on your website

Embedded checkout allows you to embed Whop's checkout flow on your own website. This allows you to offer your customers a seamless checkout experience without leaving your website.

<iframe width="100%" height="400" src="https://www.youtube.com/embed/0hGnAzwxd4g?si=0LDncN3P_MKfrsvD&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

## React setup

### Step 1: Install the package

```bash  theme={null}
npm install @whop/checkout
```

### Step 2: Add the checkout element

```tsx  theme={null}
import { WhopCheckoutEmbed } from "@whop/checkout/react";

export default function Home() {
  return <WhopCheckoutEmbed planId="plan_XXXXXXXXX" />;
}
```

This component will now mount an iframe with the Whop checkout embed. Once the checkout is complete, the user will be redirected to the redirect url you specified in the settings on Whop.

You can configure the redirect url in your [whop's settings](https://whop.com/dashboard/whops/) or in your [company's settings](https://whop.com/dashboard/settings/checkout/) on the dashboard. If both are specified, the redirect url specified in the whop's settings will take precedence.

<Tip>
  Keep that Plan ID handy. You'll need to paste it into your website code, so
  save it somewhere you can find it.
</Tip>

### Step 3: **(optional)** Configure - Programmatic controls

To get access to the controls of the checkout embed, you can use the `ref` prop.

```tsx  theme={null}
const ref = useCheckoutEmbedControls();

return <WhopCheckoutEmbed ref={ref} planId="plan_XXXXXXXXX" />;
```

#### **`submit`**

To submit checkout programmatically, you can use the `submit` method on the checkout element.

```tsx  theme={null}
ref.current?.submit();
```

#### **`getEmail`**

To get the email of the user who is checking out, you can use the `getEmail` method on the checkout element.

```tsx  theme={null}
const email = await ref.current?.getEmail();
console.log(email);
```

#### **`setEmail`**

To set the email of the user who is checking out, you can use the `setEmail` method on the checkout element.

```tsx  theme={null}
try {
  await ref.current?.setEmail("example@domain.com");
} catch (error) {
  console.error(error);
}
```

#### **`getAddress`**

To get the address of the user who is checking out, you can use the `getAddress` method on the checkout element.

```tsx  theme={null}
const address = await ref.current?.getAddress();
console.log(address);
```

#### **`setAddress`**

To set the address of the user who is checking out, you can use the `setAddress` method on the checkout element.

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `hideAddressForm` prop to `true`.
</Note>

```tsx  theme={null}
try {
  await ref.current?.setAddress({
    name: "John Doe",
    country: "US",
    line1: "123 Main St",
    city: "Any Town",
    state: "CA",
    postalCode: "12345",
  });
} catch (error) {
  console.error(error);
}
```

### Step 4: **(optional)** Configure - Available properties

#### **`planId`**

**Required** - The plan id you want to checkout.

#### **`theme`**

**Optional** - The theme you want to use for the checkout.

Possible values are `light`, `dark` or `system`.

#### **`sessionId`**

**Optional** - The session id to use for the checkout.

This can be used to attach metadata to a checkout by first creating a session through the API and then passing the session id to the checkout element.

#### **`affiliateCode`**

**Optional** - The affiliate code to use for the checkout.

```tsx  theme={null}
<WhopCheckoutEmbed affiliateCode="tristan" planId="plan_XXXXXXXXX" />
```

#### **`hidePrice`**

**Optional** - Turn on to hide the price in the embedded checkout form.

Defaults to `false`

#### **`hideTermsAndConditions`**

**Optional** - Set to `true` to hide the terms and conditions in the embedded checkout form.

Defaults to `false`

#### **`skipRedirect`**

**Optional** - Set to `true` to skip the final redirect and keep the top frame loaded.

Defaults to `false`

#### **`onComplete`**

**Optional** - A callback function that will be called when the checkout is complete.

<Note>This option will set `skipRedirect` to `true`</Note>

```tsx  theme={null}
<WhopCheckoutEmbed
  onComplete={(planId, receiptId) => {
    console.log(planId, receiptId);
  }}
  planId="plan_XXXXXXXXX"
/>
```

#### **`utm`**

**Optional** - The UTM parameters to add to the checkout URL.

**Note** - The keys must start with `utm_`

```tsx  theme={null}
<WhopCheckoutEmbed
  planId="plan_XXXXXXXXX"
  utm={{ utm_campaign: "ad_XXXXXXX" }}
/>
```

#### **`fallback`**

**Optional** - The fallback content to show while the checkout is loading.

```tsx  theme={null}
<WhopCheckoutEmbed fallback={<>loading...</>} planId="plan_XXXXXXXXX" />
```

#### **`prefill`**

**Optional** - The prefill options to apply to the checkout embed.

Used to prefill the email or address in the embedded checkout form.
This setting can be helpful when integrating the embed into a funnel that collects the email prior to payment already.

```tsx  theme={null}
<WhopCheckoutEmbed
  prefill={{ email: "example@domain.com" }}
  planId="plan_XXXXXXXXX"
/>
<WhopCheckoutEmbed
  prefill={{ address: {
    name: "John Doe",
    country: "US",
    line1: "123 Main St",
    city: "Any Town",
    state: "CA",
    postalCode: "12345",
  } }}
  planId="plan_XXXXXXXXX"
/>
```

#### **`hideEmail`**

**Optional** - Set to `true` to hide the email input in the embedded checkout form. Make sure to display the users email in the parent page when setting this attribute.

Defaults to `false`

<Note>
  Use this in conjunction with the `prefill` attribute or the `setEmail` method
  to control the email input.
</Note>

```tsx  theme={null}
<WhopCheckoutEmbed hideEmail planId="plan_XXXXXXXXX" />
```

#### **`disableEmail`**

**Optional** - Set to `true` to disable the email input in the embedded checkout form.

Defaults to `false`

<Note>
  Use this in conjunction with the `prefill` attribute or the `setEmail` method
  to control the email input.
</Note>

```tsx  theme={null}
<WhopCheckoutEmbed disableEmail planId="plan_XXXXXXXXX" />
```

#### **`hideAddressForm`**

**Optional** - Set to `true` to hide the address form in the embedded checkout form.

Defaults to `false`

<Note>
  Use this in conjunction with the `setAddress` method to control the address
  input.
</Note>

```tsx  theme={null}
<WhopCheckoutEmbed hideAddressForm planId="plan_XXXXXXXXX" />
```

#### **`setupFutureUsage`**

**Optional** - The setup future usage to use for the checkout. When using the `chargeUser` API you need to set this to `off_session`. This will filter out payment methods that are not supported with that API.

```tsx  theme={null}
<WhopCheckoutEmbed setupFutureUsage="off_session" planId="plan_XXXXXXXXX" />
```

#### **`onAddressValidationError`**

**Optional** - A callback function that will be called when the address validation error occurs.

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `hideAddressForm` prop to `true`.
</Note>

```tsx  theme={null}
<WhopCheckoutEmbed
  hideAddressForm
  onAddressValidationError={(error) => {
    console.log(error);
  }}
  planId="plan_XXXXXXXXX"
/>
```

### Full example

```tsx  theme={null}
import { WhopCheckoutEmbed } from "@whop/checkout/react";

export default function Home() {
  return (
    <WhopCheckoutEmbed
      fallback={<>loading...</>}
      planId="plan_XXXXXXXXX"
      theme="light"
      hidePrice={false}
      sessionId="ch_XXXXXXXXX"
    />
  );
}
```

## Other websites

### Step 1: Add the script tag

To embed checkout, you need to add the following script tag into the `<head>` of your page:

```md  theme={null}
<script
  async
  defer
  src="https://js.whop.com/static/checkout/loader.js"
></script>
```

### Step 2: Add the checkout element

To create a checkout element, you need to include the following attribute on an element in your page:

```md  theme={null}
<div data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

This will now mount an iframe inside of the element with the plan id you provided. Once the checkout is complete, the user will be redirected to the redirect url you specified in the settings on Whop.

You can configure the redirect url in your [whop's settings](https://whop.com/dashboard/whops/) or in your [company's settings](https://whop.com/dashboard/settings/checkout/) on the dashboard. If both are specified, the redirect url specified in the whop's settings will take precedence.

### Step 3: **(optional)** Configure - Programmatic controls

First, attach an `id` to the checkout container:

```md  theme={null}
<div id="whop-embedded-checkout" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`submit`**

To submit checkout programmatically, you can use the `submit` method on the checkout element.

```js  theme={null}
wco.submit("whop-embedded-checkout");
```

#### **`getEmail`**

To get the email of the user who is checking out, you can use the `getEmail` method on the checkout element.

```js  theme={null}
const email = await wco.getEmail("whop-embedded-checkout");
console.log(email);
```

#### **`setEmail`**

To set the email of the user who is checking out, you can use the `setEmail` method on the checkout element.

```js  theme={null}
wco.setEmail("whop-embedded-checkout", "example@domain.com");
```

#### **`getAddress`**

To get the address of the user who is checking out, you can use the `getAddress` method on the checkout element.

```js  theme={null}
const address = await wco.getAddress("whop-embedded-checkout");
console.log(address);
```

#### **`setAddress`**

To set the address of the user who is checking out, you can use the `setAddress` method on the checkout element.

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `data-whop-checkout-hide-address` prop to `true`.
</Note>

```js  theme={null}
try {
  await wco.setAddress("whop-embedded-checkout", {
    name: "John Doe",
    country: "US",
    line1: "123 Main St",
    city: "Any Town",
    state: "CA",
    postalCode: "12345",
  });
} catch (error) {
  console.error(error);
}
```

### Step 4: **(optional)** Configure - Available attributes

#### **`data-whop-checkout-plan-id`**

**Required** - The plan id you want to checkout.

> To get your plan id, you need to first create a plan in the **Manage Pricing** section on your whop page.

#### **`data-whop-checkout-theme`**

**Optional** - The theme you want to use for the checkout.

Possible values are `light`, `dark` or `system`.

```md  theme={null}
<div data-whop-checkout-theme="light" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-theme-accent-color`**

**Optional** - The accent color to apply to the checkout embed

Possible values are

* `tomato`
* `red`
* `ruby`
* `crimson`
* `pink`
* `plum`
* `purple`
* `violet`
* `iris`
* `cyan`
* `teal`
* `jade`
* `green`
* `grass`
* `brown`
* `blue`
* `orange`
* `indigo`
* `sky`
* `mint`
* `yellow`
* `amber`
* `lime`
* `lemon`
* `magenta`
* `gold`
* `bronze`
* `gray`

```md  theme={null}
<div data-whop-checkout-theme-accent-color="green" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-session`**

**Optional** - The session id to use for the checkout.

This can be used to attach metadata to a checkout by first creating a session through the API and then passing the session id to the checkout element.

```md  theme={null}
<div data-whop-checkout-session="ch_XXXXXXXXX" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-affiliate-code`**

**Optional** - The affiliate code to use for the checkout.

```md  theme={null}
<div data-whop-checkout-affiliate-code="tristan" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-price`**

**Optional** - Set to `true` to hide the price in the embedded checkout form.

Defaults to `false`

```md  theme={null}
<div data-whop-checkout-hide-price="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-submit-button`**

**Optional** - Set to `true` to hide the submit button in the embedded checkout form.

Defaults to `false`

<Note>
  When using this Option, you will need to [programmatically submit](#submit)
  the checkout form. Using this option will also hide Apple Pay. Read more about
  Apple Pay [here](#apple-pay).
</Note>

```md  theme={null}
<div data-whop-checkout-hide-submit-button="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-tos`**

**Optional** - Set to `true` to hide the terms and conditions in the embedded checkout form.

Defaults to `false`

```md  theme={null}
<div data-whop-checkout-hide-tos="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-skip-redirect`**

**Optional** - Set to `true` to skip the final redirect and keep the top frame loaded.

Defaults to `false`

```md  theme={null}
<div data-whop-checkout-skip-redirect="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-on-complete`**

**Optional** - The callback to call when the checkout succeeds

<Note>This option will set `data-whop-checkout-skip-redirect` to `true`</Note>

```html  theme={null}
<script>
  window.onCheckoutComplete = (planId, receiptId) => {
    console.log(planId, receiptId);
  };
</script>

<div
  data-whop-checkout-on-complete="onCheckoutComplete"
  data-whop-checkout-plan-id="plan_XXXXXXXXX"
></div>
```

#### **`data-whop-checkout-on-state-change`**

**Optional** - The callback to call when state of the checkout changes

This can be used when programmatically controlling the submit of the checkout embed.

```html  theme={null}
<script>
  window.onCheckoutStateChange = (state) => {
    console.log(state);
  };
</script>

<div
  data-whop-checkout-on-state-change="onCheckoutStateChange"
  data-whop-checkout-plan-id="plan_XXXXXXXXX"
></div>
```

#### **`data-whop-checkout-skip-utm`**

By default any utm params from the main page will be forwarded to the checkout embed.

**Optional** - Set to `true` to prevent the automatic forwarding of utm parameters

Defaults to `false`

#### **`data-whop-checkout-prefill-*`**

Used to prefill the email or address in the embedded checkout form. This setting can be helpful when integrating the embed into a funnel that collects the email prior to payment already.

```md  theme={null}
<div data-whop-checkout-prefill-email="example@domain.com" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>

<div 
	data-whop-checkout-prefill-name="John Doe"
	data-whop-checkout-prefill-address-country="US"
	data-whop-checkout-prefill-address-line1="123 Main St"
	data-whop-checkout-prefill-address-line2=""
	data-whop-checkout-prefill-address-city="Any Town"
	data-whop-checkout-prefill-address-state="CA"
	data-whop-checkout-prefill-address-postal-code="12345"
	data-whop-checkout-plan-id="plan_XXXXXXXXX"
></div>

<div data-whop-checkout-prefill-address-name="John Doe" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-email`**

**Optional** - Set to `true` to hide the email input in the embedded checkout form. Make sure to display the users email in the parent page when setting this attribute.

Defaults to `false`

<Note>
  Use this in conjunction with the `data-whop-checkout-prefill-email` attribute
  or the `setEmail` method to control the email input.
</Note>

```md  theme={null}
<div data-whop-checkout-hide-email="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-disable-email`**

**Optional** - Set to `true` to disable the email input in the embedded checkout form.

Defaults to `false`

<Note>
  Use this in conjunction with the `data-whop-checkout-prefill-email` attribute
  or the `setEmail` method to control the email input.
</Note>

```md  theme={null}
<div data-whop-checkout-disable-email="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-address`**

**Optional** - Set to `true` to hide the address form in the embedded checkout form.

Defaults to `false`

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `data-whop-checkout-hide-address` prop to `true`.
</Note>

```md  theme={null}
<div data-whop-checkout-hide-address="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-setup-future-usage`**

**Optional** - The setup future usage to use for the checkout. When using the `chargeUser` API you need to set this to `off_session`. This will filter out payment methods that are not supported with that API.

```md  theme={null}
<div data-whop-checkout-setup-future-usage="off_session" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-on-address-validation-error`**

**Optional** - The callback to call when the address validation error occurs.

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `data-whop-checkout-hide-address` prop to `true`.
</Note>

```html  theme={null}
<script>
  window.onAddressValidationError = (error) => {
    console.log(error);
  };
</script>

<div
  data-whop-checkout-on-address-validation-error="onAddressValidationError"
  data-whop-checkout-plan-id="plan_XXXXXXXXX"
></div>
```

### Full example

```md  theme={null}
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width">
		<script
			async
			defer
  			src="https://js.whop.com/static/checkout/loader.js"
		></script>
		<title>Whop embedded checkout example</title>
		<style>
			div {
				box-sizing: border-box;
			}
			body {
				margin: 0
			}
		</style>
	</head>
	<body>
		<div
			data-whop-checkout-plan-id="plan_XXXXXXXXX"
			data-whop-checkout-session="ch_XXXXXXXXX"
			data-whop-checkout-theme="light"
			data-whop-checkout-hide-price="false"
			style="height: fit-content; overflow: hidden; max-width: 50%;"
		></div>
	</body>
</html>
```

## Apple Pay

Apple Pay is a payment method that allows users to pay with their Apple Wallet. To enable Apple Pay, you need to register your domain first. To do so go to your [whop's settings](https://whop.com/dashboard/settings/checkout/) and click **Configure** in the **Payment domains** section. Click the plus button to add a new domain.

Verifying your domain will require you to host [this file](https://whop.com/.well-known/apple-developer-platform-integrator-domain-association) on `https://<your-domain>/.well-known/apple-developer-merchantid-domain-association`. Please refer to your framework's or hosting provider's documentation on how to host this file.

<Note>
  Apple Pay will not work consistently when programmatically submitting the
  checkout form. For this reason the Apple Pay will be hidden when using the
  hideSubmitButton option. We are actively working on implementing support for
  programmatically submitting the checkout form with Apple Pay.
</Note>

## FAQs

<AccordionGroup>
  <Accordion title="Why is my checkout not loading?">
    Make sure you've correctly replaced `plan_XXXXXXXXX` or `PLAN_ID_HERE` in the code snippets with your actual Plan ID from the Whop dashboard. Also verify that the script tag is properly loaded in the `<head>` section if using HTML/JS.
  </Accordion>

  <Accordion title="Where do I find my Plan ID?">
    Go to your **Dashboard** > **Checkout links** > Click the **three dots (⋮)** on your pricing option > Hover over **Details** > Click the ID (starts with `plan_`) to copy it.
  </Accordion>

  <Accordion title="Can I embed multiple checkouts on the same page?">
    Yes, you can add multiple checkout embeds with different Plan IDs. Each embed operates independently.
  </Accordion>

  <Accordion title="How do I change the checkout theme?">
    For React: add `theme="dark"` or `theme="light"` as a property. For HTML: add `data-whop-checkout-theme="dark"` to your div element.
  </Accordion>

  <Accordion title="Can I hide the price in the embedded checkout?">
    Yes, add `hidePrice={true}` in React or `data-whop-checkout-hide-price="true"` in HTML to hide the price display.
  </Accordion>

  <Accordion title="What happens after a customer completes checkout?">
    By default, customers are redirected to your whop. You can customize this by setting a custom redirect URL or skipping the redirect entirely.
  </Accordion>

  <Accordion title="How do I prevent the redirect after checkout?">
    Use `skipRedirect={true}` in React or `data-whop-checkout-skip-redirect="true"` in HTML to keep users on the same page.
  </Accordion>

  <Accordion title="Is the embedded checkout mobile-responsive?">
    Yes, the checkout automatically adapts to different screen sizes and devices.
  </Accordion>

  <Accordion title="Can I customize the checkout's appearance with CSS?">
    You can style the wrapper using the `.whop-checkout-wrapper iframe` CSS class, but the checkout content itself cannot be modified for security reasons.
  </Accordion>

  <Accordion title="Can I pre-fill customer information?">
    Yes, use `prefill={{ email: "customer@example.com" }}` in React or `data-whop-checkout-prefill-email="customer@example.com"` in HTML.
  </Accordion>
</AccordionGroup>


# Create a product
Source: https://docs.whop.com/payments/create-a-product

Learn how to set up products and pricing on Whop

Products are how you package and price your offer on Whop. You can set up free access, one-time payments, or recurring subscriptions for people to access your whop.

## How to create a product

<Steps>
  <Step title="Add a product" titleSize="h3">
    * Go to your **Dashboard**
    * Go to **Products**
    * Click **Add Product**
  </Step>

  <Step title="Set up your product details" titleSize="h3">
    Configure the core details of your product:

    * **Choose a title**: Keep it clear and descriptive (e.g., “Premium Membership”, “Full Course Access”)
    * Select your pricing option:
      * **Free**: Give customers free access to your product
      * **One-time**: Charge customers once for lifetime access
      * **Recurring**: Set up monthly or yearly subscriptions
    * **Choose currency**: Select the currency you want to charge in
    * **Set your price**: Enter how much customers will pay
      * If you chose recurring, also choose your billing cycle length (weekly, monthly, yearly)
    * **Configure advanced options** (optional):
      * **Stock**: Limit how many people can purchase this product
      * **Add a waitlist**: Users enter payment details but aren’t charged until you approve them
      * **Ask questions before checkout**: Collect information from customers before they purchase
      * **Auto-expire access**: Automatically remove access after a set time period
      * **Redirect after checkout**: Send customers to a specific page after they complete checkout
      * **Add internal name**: A name only you can see on your dashboard
      * **Visibility**: Make this product visible on your public whop store page
    * **Choose payment methods**: Select what customers can pay with
      * Credit/debit card
      * Bank transfer (ACH)
      * PayPal
      * Cryptocurrency
      * Buy now, pay later (Financing)

    <Tip>
      If you want to offer multiple pricing options (like both monthly and yearly plans), click Add another billing period.
    </Tip>

    When you’re happy with everything, click **Add Product**.
  </Step>
</Steps>

## Next steps

To start accepting payments on Whop, complete the final setup step:

<Card title="Copy checkout link" icon="link" href="/payments/create-checkout-link">
  Checkout links let you send customers straight to a payment page.
</Card>


# Create a whop
Source: https://docs.whop.com/payments/create-a-whop

Learn how to create a whop for payment processing

To start accepting payments, create your account on Whop.

<Steps>
  <Step title="Go to whop.com/sell" titleSize="h3">
    * Head over to [**whop.com/sell**](https://whop.com/sell)
    * Click **Start selling**
  </Step>

  <Step title="Choose how you plan to use Whop" titleSize="h3">
    When asked how you plan to to use Whop, you will see two options:

    1. **Build & sell digital products on Whop:** Choose this option if you plan to use Whop for building, hosting, and selling your digital products as well as accepting payments
    2. **Use Whop for payment processing only:** Choose this option if you want to use Whop to process payments and create checkout links only - but host and deliver your product elsewhere

    If you want to use Whop for payment processing only and host your digital product elsewhere, click **Use Whop for payment processing only**. Then click **Next**.
  </Step>

  <Step title="Name your business" titleSize="h3">
    * Choose a name for your business
    * Click **Create my business**
  </Step>
</Steps>

## Next steps

To start accepting payments through Whop, make sure you've completed the rest of the setup steps:

<CardGroup cols={2}>
  <Card title="Create a product" icon="tag" href="/payments/create-a-product">
    Products are how you package and price your various offers.
  </Card>

  <Card title="Copy checkout link" icon="link" href="/payments/create-checkout-link">
    Checkout links let you send customers straight to a payment page.
  </Card>
</CardGroup>


# Create a checkout link
Source: https://docs.whop.com/payments/create-checkout-link

Checkout links are the fastest way to accept payment.

Checkout links let you send customers straight to a payment page to buy your products or services. You can offer free access, one-time payments, or monthly subscriptions.

Checkout links are the fastest way to get paid for your products and services. Here's how different businesses use them:

* **Sales teams** — Create custom links for each deal
* **Event hosts** — Send direct links to webinar or workshop checkout pages
* **Freelancers** — Use checkout links as digital invoices for completed work

<iframe className="w-full aspect-video rounded-xl" width="100%" height="400" src="https://www.youtube.com/embed/L4f9rPtlCuc?si=n1OLK7Y42fkVKgse&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

## Where can I find and create my checkout links?

* Go to your **Dashboard** > **Checkout links** to see all your links
* Click **+ Create checkout link** to create a new one

<Tip>
  Every pricing option you create on your whop can be found at Dashboard > Checkout links.

  And every checkout link you create on your dashboard can be found at whop > Manage pricing.
</Tip>

## How to create a checkout link

You can create three types of checkout links:

* **Free links** - Give customers free access to your whop
* **One-time payment links** - Charge customers once
* **Recurring payment links** - Set up monthly or yearly subscriptions

<Tip>
  Each checkout link is connected to one of your whops. When you create the link
  from your whop's pricing page, it's automatically connected to that whop. When
  you create it from your Dashboard, you'll need to choose which whop it's for.
</Tip>

### Free checkout links

**To create a free checkout link:**

1. Choose **Free** under Pricing type
2. Click **Advanced Options** to add these features:
   * **Stock** — Limit how many people can use this link (or keep unlimited)
   * **Description** — Explain what users get when they join
   * **Show on store page** — Make this option visible on your public store page
   * **Add a waitlist** — Users enter card details but aren't charged until you approve them
   * **Ask questions before checkout** — Collect info from users before they join. You can make these optional by checking the **Optional** box.
   * **Auto-expire access** — Automatically remove access after a set time period
   * **Redirect after checkout** — Send users to a specific page after they complete checkout
   * **Add internal name** — A name only you can see on your dashboard

### One-time payment links

**To create a one-time payment link:**

1. Choose **One-time** under **Pricing type**
2. Set your **Price**
3. Click **Advanced Options** to add these features:
   * **Stock** — Limit how many people can use this link (or keep unlimited)
   * **Description** — Explain what users get when they join
   * **Show on store page** — Make this option visible on your public store page
   * **Add a waitlist** — Users enter card details but aren't charged until you approve them
   * **Ask questions before checkout** — Collect info from users before they join. You can make these optional by checking the **Optional** box.
   * **Auto-expire access** — Automatically remove access after a set time period
   * **Redirect after checkout** — Send users to a specific page after they complete checkout
   * **Add internal name** — A name only you can see on your dashboard
4. Choose your **Payment methods** (what customers can pay with):
   * Credit/debit card
   * Bank transfer (ACH)
   * PayPal
   * Cryptocurrency
   * Buy now, pay later (Financing)

### Subscription (recurring) links

To create a subscription link:

1. Choose **Recurring** under Pricing type
2. Set your subscription details:
   * **Subscription price** — How much customers pay each billing cycle
   * **Subscription period** — How often they're charged (weekly, monthly, yearly)
   * **Initial fee** — Optional one-time setup fee when they first join
3. Click **Advanced Options** to add these features:
   * **Stock** — Limit how many people can use this link (or keep unlimited)
   * **Description** — Explain what users get when they join
   * **Show on store page** — Make this option visible on your public store page
   * **Add a waitlist** — Users enter card details but aren't charged until you approve them
   * **Ask questions before checkout** — Collect info from users before they join. You can make these optional by checking the **Optional** box.
   * **Auto-expire access** — Automatically remove access after a set time period
   * **Redirect after checkout** — Send users to a specific page after they complete checkout
   * **Add internal name** — A name only you can see on your dashboard
   * **Free trial** — Let customers try before they pay (choose how many days)
   * **Split payments** — Let customers pay in installments instead of all at once
   * **Cancellation discount** — Offer a discount when someone tries to cancel (helps retain customers)
4. Choose your **Payment methods**:
   * Credit/debit card
   * PayPal

## Create a split payment checkout link

A split payment checkout link allows you to charge your customers in multiple installments for a product — instead of collecting the full amount upfront.\
Each payment is automatically charged to your customer on a recurring schedule until all installments are completed.\
Once the final installment is paid, the customer will stop being charged automatically.

<Steps>
  <Step title="Go to Checkout links" titleSize="h3">
    From your Whop dashboard, click **Checkout links** in the left-hand menu.
  </Step>

  <Step title="Create a new link" titleSize="h3">
    Click **+ Create checkout link** in the top right.
  </Step>

  <Step title="Choose product & set pricing" titleSize="h3">
    Select the **Product** and add a **Description** (optional).\
    Under **Pricing**, choose **Recurring**, enter the **price**, and select the **billing interval** (e.g., **/ 1 month**).
  </Step>

  <Step title="Open Advanced options" titleSize="h3">
    Click **Advanced options** to reveal more settings.
  </Step>

  <Step title="Enable split payments (installments)" titleSize="h3">
    Check **Enable split pay (Installments)**.\
    This converts the recurring plan into a fixed installment plan and will **automatically charge your customer** each period until they’ve completed all installments.
  </Step>

  <Step title="Set installments & finalize" titleSize="h3">
    Enter the **number of payments** (installments) and confirm the **price per billing period**.

    **Example:**\
    If a customer wants to pay **\$1,000 over 4 months**, set:

    * **Price:** **\$250**
    * **Billing interval:** **/ 1 month**
    * **Installments:** **4**

    The customer will be automatically charged **\$250 per month** for **4 months**, then their payments will stop once all installments are complete.\
    (You can adjust the billing duration — e.g., weekly — if you prefer a different schedule.)
  </Step>

  <Step title="Create the checkout link" titleSize="h3">
    When everything looks good, click **Create checkout link** at the bottom to generate your split payment link.
  </Step>
</Steps>

<Tip>
  Split payments are not the same as financing.\
  With split payments, you receive each installment as the customer pays it.\
  With financing, a financing provider pays you the full amount upfront and collects payments from the customer separately.
</Tip>

## How to edit checkout links

If you need to update or change your pricing and settings, you can edit your checkout links from either your Dashboard or your whop's pricing page.

### Open your Whop dashboard

* Go to **Dashboard** > **Checkout links**
* Find your link and click the 3 dots (︙) on the right
* Click **Edit**
* Make your changes and click **Update checkout link**

<Card title="Create tracking links" icon="link" href="/manage-your-whop/tracking-links">
  If you want to see how your links are performing, tracking links give you
  detailed analytics of clicks, conversion rates, and revenue generated.
</Card>

## Embed Whop Payments on your website

<Card title="Whop checkout embeds" icon="sparkles" href="/payments/checkout-embed">
  Add a complete checkout form right into your website.
</Card>

## Frequently asked questions

<AccordionGroup>
  <Accordion title="What exactly are checkout links?">
    Checkout links (also called pricing options) are custom URLs that let
    customers join your whop with free access, a one-time payment, or a
    recurring subscription.
  </Accordion>

  <Accordion title="How do I limit how many people can use a link?">
    In the Advanced Options of any pricing type, look for the "Stock" setting.
    It's set to unlimited by default, but you can change it to any number you
    want.
  </Accordion>

  <Accordion title="Can I change the currency for my prices?">
    Yes! When setting the price for one-time or recurring links, you'll see a
    currency dropdown next to the price field.
  </Accordion>

  <Accordion title="How do I offer a free trial?">
    Free trials are only available for recurring (subscription) pricing. You'll
    find the free trial option in the Advanced Options section when creating a
    recurring link.
  </Accordion>

  <Accordion title="How do I create a private link that doesn't show on my store page?">
    When creating any checkout link, leave the "Show on store page" option
    unchecked. The link will still work when you share it directly, but it won't
    appear publicly on your store.
  </Accordion>

  <Accordion title="Why aren't my checkout links showing up on my store page?">
    Check that you enabled "Show on store page" in the Advanced Options when you
    created the link. If this option is off, the link will only work when shared
    directly.
  </Accordion>
</AccordionGroup>


# Credit card disputes
Source: https://docs.whop.com/payments/credit-card-disputes

Learn how to manage credit card disputes on Whop 

Credit card disputes happen when customers contact their bank to challenge a payment. Learn how credit card disputes work and how to respond to them effectively.

## What you need to know

* The disputed amount is **immediately withdrawn** from your balance - this makes sure that you are able to cover the amount of the dispute if it is lost
* You have **7–21 days** to respond with proof of the purchase via Whops [**Dispute fighter**](/apps/docs/payments/dispute-fighter)
* The bank's decision will typically take **2–3 months** - you can check this status at any time from the Dispute fighter
* To respond: Go to **Dashboard** > **Dispute fighter**

## Dispute process overview

A dispute happens when a customer contacts their bank or credit card company to challenge a payment they made to your whop. Here's the basic process:

* **Customer files dispute** → Card issuer investigates the dispute
* **Whop gets notified** → You see the dispute in the [Dispute fighter](https://whop.com/dashboard/disputes/)
* **Money gets frozen** → Disputed amount + \$15 fee taken immediately from your balance
* **You submit evidence** → You have 7-21 days to respond to the dispute
* **Card issuer decides** → Takes 2-3 months for final decision

<Tip>
  To access your disputes: Go to Dashboard > Dispute fighter
</Tip>

### Common reasons customers file disputes

* They don't recognize the charge on their statement
* They think the transaction was fraudulent
* They're unhappy with their purchase and aren't aware of the **Resolution Center**
* They tried to cancel but got charged anyway

## Reserves

If your dispute rate gets too high, or if your account shows signs of being at risk of disputes, some of your Whop balance will be held in a reserve.

Reserves protect your account and make sure that you always have enough money available to cover any disputes that might arise. A percentage of each transaction (determined by your dispute risk) will be held for 90 days, after which you can withdraw it as normal. 

### A reserve will be placed on your account if:

* Your dispute rate is too high 
* You have a high rate of unresolved resolution center cases      
* Transaction patterns show high risk of payments being disputed 

Reserves are temporary and will be released as soon as your account’s dispute rates are healthy. You can check your dispute rate at any time on your Health report on the Payouts page of your creator dashboard. 

If Whop detects fraudulent activity, an immediate, 100% reserve will be placed on your account until any signs of fraud are resolved.

## Keeping your account healthy

**Maintaining low dispute rates**

Keeping your dispute rate low is critical to keeping your business healthy. High dispute rates put you at risk with Whop, credit card networks, and financing partners.

To keep your dispute rates low:

* Have a clear Terms of Service, Return policies, and Refund policies
* Make sure your customers know where to go to get help - direct them to the **Resolution center** on Whop to resolve the issue directly
* Respond to Resolution center cases - refund customers where it is deserved to avoid them disputing the payment with their bank
* Set up [auto-responses to Resolution center](https://whop.com/dashboard/resolution-center/) cases to automatically refund cases below a certain dollar amount (that you set)
* Set up [early dispute alerts on the Dispute fighter ](https://whop.com/dashboard/disputes/)to automatically refund transactions before they officially become a dispute

**Negative balances**

Your whop balance can go negative if you have already withdrawn your funds and do not have enough money in your account to cover a dispute or refund.

You can pay off your negative balance from the [Payouts](https://whop.com/dashboard/payouts/) page on your dashboard.

## Dispute FAQs

<AccordionGroup>
  <Accordion title="Why is the dispute amount different from what the customer originally paid?">
    The dispute amount can differ for several reasons:

    * **Currency changes** - Exchange rates shift between when they paid and when they disputed
    * **Partial disputes** - Customer only disputes part of what they bought
    * **Multiple charges** - Card issuer combines several disputed payments into one
    * **Partially refunded payments** - Customer disputes the full amount even after getting some money back
  </Accordion>

  <Accordion title="Why can't I respond to a dispute?">
    Some disputes you automatically lose and can't challenge:

    * Certain fraud cases (depending on the card company)
    * Disputes from some countries due to local laws
    * Cases where the card issuer won't accept evidence
  </Accordion>

  <Accordion title="Do I need to submit evidence if the customer cancels their dispute?">
    Yes, you still need to submit evidence.
  </Accordion>
</AccordionGroup>


# Dispute fighter
Source: https://docs.whop.com/payments/dispute-fighter

Automatically fight disputes with customer logs

Whop's dispute fighter helps you track, get ahead of, respond to, and resolve disputes.

## What happens when a dispute is filed?

When a customer files a dispute:

* You’re notified instantly of the dispute via Whop's **Dispute fighter**
* The disputed amount is immediately debited from your balance to make sure you can cover the cost of the dispute, along with a \$15 dispute fee
* Whop auto-uploads key evidence (like access logs, policy disclosures, and customer info) into the dispute fighter
* You can upload additional proof and submit your response directly from your dashboard
* The dispute status, outcome, and deadline are all tracked in **Dispute fighter**

## How to view and manage disputes

You can monitor and manage all your disputes in the **Dispute fighter**:

1. Go to **Dashboard** > **Dispute fighter**
2. Click **Status** and choose from:
   * Needs response
   * Under review
   * Won
   * Lost

Track response deadlines and outcomes from this main view.

## How to respond to a dispute

When you get a dispute notification, you need to act fast and submit your evidence before the deadline.

**To fight a dispute:**

1. Go to **Dashboard** > [**Dispute fighter**](https://whop.com/dashboard/disputes/)
2. Click the dispute you want to respond to
3. Upload your evidence and documentation, such as:
   * Chat logs with the customer
   * Product details and descriptions
   * Cancellation policy
   * Refund policy
4. Add any supporting evidence like:
   * Cancellation request records
   * Customer communications
   * Refund records
   * Proof of subscription agreement
5. Click **Submit** to send your response

<Warning>
  Each dispute shows a "Respond by" date under Status. Make sure to submit your evidence before this deadline, or you'll automatically lose the dispute.
</Warning>

## What Whop automatically submits

Whop automatically uploads relevant files and user logs to strengthen your case:

**Customer details**

* Email address (proves they have an account)
* Customer name (confirms identity)
* Billing address (matches payment method to prove legitimate purchase)

**Product details**

* Purchase date (shows exactly when they bought)
* Description (proves what they purchased and agreed to)
* Access activity log showing:
  * When they bought access
  * If they agreed to Terms of Service and Refund policy
  * If they claimed access
  * If they engaged with your content

**Cancellation policy**

* Policy disclosure (shows customer saw and agreed to cancellation rules)
* Your actual cancellation policy document

**Refund policy**

* Refund refusal explanation (explains why refund wasn't given)
* Policy disclosure (proves customer knew refund rules before buying)
* Your actual refund policy document

<Tip>
  Add your own evidence: Beyond what Whop automatically includes, you can upload supporting evidence and customer communications to strengthen your case.
</Tip>

## Dispute fees

* Whop immediately takes the disputed amount from your account
* You're charged a \$15 dispute fee
* The disputed funds are held during the investigation process to make sure you have enough to cover the dispute, and they are returned once the dispute is won

**If you win**: The disputed amount is returned to your Whop balance

**If you lose**: The customer receives their refund from their card issuer - the money was already deducted to pay for this dispute, so no additional funds are taken from your account.

## How to win disputes

### 1. Set up early dispute alerts (optional)

Early dispute alerts give you advance warning when a customer is about to file a dispute, allowing you to resolve the issue before it becomes an official dispute that hurts your account.

### How Early dispute alerts work

* **Early warning system:** When a customer starts a dispute, you get notified immediately. This gives you a chance to resolve the issue before it becomes an official dispute on your record.
* **Automatic refunds save money:** Any transaction under your set amount gets automatically refunded, saving you from paying chargeback fees that can be much more expensive than the refund itself.
* **Clearer transaction info:** Each purchase shows up on the customer's bank statement with a clear description and website link, helping customers remember what they bought and reducing confusion-based disputes.

**To set it up:**

1. Go to **Dashboard** > **Dispute fighter**
2. Click **Early dispute alert**
3. Enter the amount under **Refund transactions lower than**
4. Click **Save**

<Warning>
  You'll be charged \$29 per Early dispute alert.
</Warning>

### 2. Fight disputes via the Dispute fighter

Knowing how card issuers decide disputes helps you send better proof and win more often.

<Warning>
  Even with Whop's help, the card issuer has the final call on whether you'll win or lose the dispute.
</Warning>

### The decision process

1. **Initial review:** The card issuer looks into the customer's complaint
2. **Submitting evidence:** You have 7-21 days to send your evidence (depending on the card company)
3. **Evaluation:** The card issuer reviews all evidence and makes a decision (usually 60-75 days)
4. **Final answer:** You either win or lose the dispute

### What card issuers look for in your evidence

* **Proof of transaction:** Clear records showing the customer sent the payment
* **Delivery proof:** Evidence you gave them what they paid for
* **Customer chats:** Any messages between you and the customer
* **Terms of Service:** Proof the customer agreed to your terms
* **Return policy:** Your clearly written return policy

## FAQs

<AccordionGroup>
  <Accordion title="How long do I have to respond to a dispute?">
    Each dispute has a deadline shown under Status in Dispute fighter. Response times vary for each dispute, so check them individually.
  </Accordion>

  <Accordion title="How do I increase my chances of winning?">
    Provide evidence that directly answers the customer's complaint. Upload clear policies, show proof they received and used your product, and include screenshots of them using your service.
  </Accordion>

  <Accordion title="Why did I lose a dispute?">
    The customer's bank makes the final decision, not Whop. Banks review all evidence you submit through Dispute fighter, but they decide the outcome. Whop gives you every tool to win, but we can't control the bank's decision.
  </Accordion>

  <Accordion title="Can a customer dispute the same payment multiple times?">
    Yes, but it's rare. Card companies and payment processors allow this - it's up to the payment company, and Whop can't prevent customers from trying again. Fight each dispute fully using Dispute fighter, even if it's the same purchase.
  </Accordion>

  <Accordion title="Can I refund a disputed payment?">
    If it's become a full chargeback, you can't refund it. But if the customer contacts their bank and cancels the dispute, then you can give them a refund.
  </Accordion>
</AccordionGroup>


# Financing
Source: https://docs.whop.com/payments/financing

Let customers split payments into monthly installments

Give your customers the flexibility to split their purchases into monthly installments while you get paid upfront.

When your business has been approved, financing options are added to your checkout page automatically.

## Available financing options

Whop partners with five financing providers. Depending on your business, you may qualify for some or all of these options:

* **Splitit**
* **Sezzle**
* **AfterPay**
* **Klarna**
* **Zip Pay**

## How to apply for financing

Apply for financing via this [financing application form](https://hunterd.app.n8n.cloud/form/e9e21a0c-91d5-4cda-9b14-a9506be5af44).

You can also apply for financing directly from the [Checkout links page](https://whop.com/dashboard/links/checkout/) of your dashboard.

1. Click **+ Create checkout link**
2. Select **One-time** as your pricing type
3. Under **Payment methods**, click **Apply for financing**
4. Complete the application form

You will receive an email if we cannot accept or are missing information from your application. Once you are accepted, you will get a Whop DM notifying you that you have access to financing.

Once accepted, all active financing options will automatically show up at customer checkout. You can toggle which financing options you do or do not want as an option on each checkout link from the [Checkout links page](https://whop.com/dashboard/links/checkout/).

## Eligibility requirements

To qualify for financing options, your business must meet these requirements:

### 1. Basic setup requirements

* Your **Whop Payments account** must be fully set up and verified
  * Go to [**Payouts**](https://whop.com/dashboard/payouts/) in your dashboard to complete setup
* **Your store page must be filled out**
  * We need to understand what you're selling and how you fulfill orders

### 2. Business requirements

* **Eligible categories**: Financing companies **cannot** support gambling, sports betting, trading signals (pure education may be ok!), credit offers, or adult content under any circumstances
* **Low dispute rate**: Have \< 2% dispute rate over the last 90 days
  * If you are new to Whop, we will ask for statements from the last 90 days from your previous **payment processor**. Note that we need processing statements, NOT bank statements, and we need to see your total number of transactions and total number of disputes over the last 90 days.
* **Processing volume**: At least \$30,000 processed from 10+ different customers in the last 90 days

<Tip>
  You'll receive a Whop DM when your business is approved and financing is
  enabled. If you haven't heard back about your application, check your email
  for requests for additional documentation or application updates.
</Tip>

## How it works for customers

When financing is enabled:

1. Financing options appear automatically on your checkout page
2. Customers choose their preferred provider (e.g. Klarna, AfterPay)
3. Customers are redirected to the financing provider for instant approval
4. They complete their purchase through the financing platform

You can control which financing options appear on each of your checkout links through your pricing settings.

<Tip>You still receive full payment upfront (minus standard fees)</Tip>

## Keep your financing access

Whop’s priority is to make sure you keep your financing access for the long term. Whop has the following features to help you keep your dispute rates low and keep financing active on your account:

**Dispute rate monitoring**

* View dispute rates for each financing partner on your **Health report** (in the **Payouts** section)
* Alerts sent via email and Whop DM when dispute rates hit warning levels:
  * Klarna: warning at 0.5% dispute rate on Klarna transactions
  * All others: warning 1% dispute rate on any other BNPL option

<Tip>
  When you receive an alert, take extra precautions to prevent further disputes.
  Set clear return policies, refund angry customers, and make sure your
  customers know where to go to resolve issues so they don't dispute directly
  with the bank.
</Tip>

**Splitit minimum balance (Splitit only)**

* 15% of every Splitit transaction is held in your Whop balance for 180 days
* This shows Splitit that you can cover any potential disputes
* Track your Splitit balance and release dates on your [**Payouts**](https://whop.com/dashboard/payouts/) page

### **Dispute rate limits**

Stay under these thresholds to keep your financing access:

* **Klarna:** Under 1% dispute rate
* **All other providers:** Under 2% dispute rate

Financing access will be automatically revoked if you hit these dispute rate thresholds on financed transactions, and you will be notified via email that you have lost access to financing.

## Troubleshooting

If financing isn't showing on your checkout links after approval, check these common issues:

**Transaction too large**

* Sezzle: \$2,500 limit
* AfterPay: \$4,000 limit
* Splitit: \$20,000 limit
* Klarna: \$10,000 limit
* Zip: \$1,500 limit

**Wrong pricing type**

* Financing only works with one-time payments, not subscriptions

**Location restrictions**

* Sezzle, Klarna, and AfterPay only show for US customers

**Restricted business type**

<Tip>
  Our financing providers (Splitit, Klarna, Sezzle, AfterPay, and Zip Pay) do not support certain categories of products or services. If your business falls under one of these categories, you will not be eligible for financing on Whop.
</Tip>

* **Adult, Gambling & Dating:** Adult entertainment or pornography, escort services, gambling, gaming, raffles, lotteries, dating, or matchmaking services.

* **Financial Services & High-Risk Lending:** Banks, credit unions, mortgage lenders, non-bank finance companies, factoring and purchase order financing, money services businesses, payroll companies, securities or commodities dealers/brokers, investment opportunities or advice, collection agencies, debt buyers, credit repair, debt relief, identity theft protection, and bail bonds.

* **Regulated & Prohibited Products:** Firearms, guns, ammunition sales or manufacturing, drug paraphernalia, dispensaries, medical marijuana, nutraceuticals, unverified health or weight loss products, precious metals, and counterfeit goods.

* **Marketing & Telemarketing:** Telemarketing companies (fax blasting, email spamming, prize-with-purchase schemes), negative response marketing, search engine optimization (SEO) services, call centers, and answering services.

* **Subscription & Service-Based Restrictions:** Discount travel clubs or subscriptions, magazine subscriptions, video rental services, timeshares or fractional ownership, real estate brokers, agencies, consultants or lessors, property managers, and contracted management services.

* **Miscellaneous High-Risk Businesses:** Government organizations, non-profits, charitable or religious organizations, social networking sites, sports forecasting, flea markets, fortune telling, astrology, horoscopes, mining, farming, energy generation or distribution, logistics and freight forwarding, liquidation companies, manufactured or mobile home dealers, massage services, future service liability greater than one year, and products or services with unreasonable guarantees or claims.

*If you’re unsure whether your product or service is eligible for financing, please contact Whop support before applying for financing*

**Dispute rate too high**

* Check your Health report - you may have exceeded the 2% dispute threshold (1% for Klarna)

**Incomplete setup**

* Ensure your Whop Payments account is fully configured
* Verify your store page is complete with clear product descriptions


# Overview
Source: https://docs.whop.com/payments/overview

Start here if you want to use Whop to accept payments

If you want better processing, but you've already built your business on platforms, you can also use Whop for checkout and payments.

## Get started

<CardGroup cols={3}>
  <Card title="Create an account" icon="sparkles" href="/payments/create-a-whop">
    To start accepting payments, create your account on Whop.
  </Card>

  <Card title="Create a product" icon="tag" href="/payments/create-a-product">
    Products are how you package and price your various offers.
  </Card>

  <Card title="Copy checkout link" icon="link" href="/payments/create-checkout-link">
    Checkout links let you send customers straight to a payment page.
  </Card>
</CardGroup>

## Next steps

Customize your payments flow and offer flexible payment options to maximize conversions.

<CardGroup cols={2}>
  <Card title="Embedded checkout" icon="cart-shopping" href="/payments/checkout-embed">
    Integrate Whop's checkout directly into your website for a seamless payment
    experience without redirects.
  </Card>

  <Card title="Set up financing" icon="credit-card" href="/payments/financing">
    Let customers pay in installments with flexible financing options to
    increase average order value and conversions.
  </Card>
</CardGroup>


# Payment declines
Source: https://docs.whop.com/payments/payment-declines

Learn how payment declines work and how to manage them

Learn what causes payment declines, what Whop does to recover them, and how you or your customers can fix declined payments.

## Specific decline reasons and messages

When a payment is declined, you may receive one of these specific decline codes. Here's what each means and how to resolve them:

| Decline Reason                    | Explanation                                                                                                                                                                                                                                                                    |
| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `insufficient_funds`              | Your card has insufficient funds to complete this purchase. Please use a different payment method or ensure your account has sufficient funds.                                                                                                                                 |
| `lost_card`                       | This payment was declined because the card is reported as lost. Please use a different card to complete your purchase.                                                                                                                                                         |
| `stolen_card`                     | This payment was declined because the card is reported as stolen. Please use a different card to complete your purchase.                                                                                                                                                       |
| `expired_card`                    | Your card has expired. Please check the expiration date and try again, or use a different card.                                                                                                                                                                                |
| `suspected_fraud`                 | For security reasons, this payment couldn't be processed. Please contact your bank for more information or try a different payment method.                                                                                                                                     |
| `invalid_card_number`             | The card number is incorrect. Please double-check the 16-digit number on your card and try again.                                                                                                                                                                              |
| `invalid_cvc`                     | The security code (CVC) is incorrect. Please check the 3-4 digit code on the back of your card (or front for Amex) and try again.                                                                                                                                              |
| `invalid_cvc_or_expiration`       | The security code (CVC) or expiration date is incorrect. Please double-check both the 3-4 digit security code and the MM/YY expiration date.                                                                                                                                   |
| `incorrect_pin`                   | The PIN entered is incorrect. Please try again with the correct PIN. This decline only applies to payments made with a card reader.                                                                                                                                            |
| `authentication_required`         | Additional verification is required for this payment. You may be redirected to your bank's website or receive a text message to confirm this transaction. Please complete the verification to proceed.                                                                         |
| `card_not_supported`              | This card doesn't support this type of purchase. Please try a different credit or debit card.                                                                                                                                                                                  |
| `currency_not_supported`          | Your card doesn't support payments in this currency. Please use a different card or contact your bank about international transactions.                                                                                                                                        |
| `duplicate_transaction`           | A transaction with the same amount and card was just processed. Please check your email for confirmation. If you didn't receive it, please wait a few minutes before trying again.                                                                                             |
| `generic_decline`                 | Your card was declined. Please try: 1) Using a different card, 2) Contacting your bank, or 3) Checking that your billing information is correct.                                                                                                                               |
| `invalid_account`                 | This card or the associated account is invalid. Please use a different card or contact your bank for assistance.                                                                                                                                                               |
| `invalid_amount`                  | The payment amount exceeds your card's limit. Please try a smaller amount or use a different payment method.                                                                                                                                                                   |
| `processing_error`                | We encountered a temporary issue processing your payment. Please wait a moment and try again, or use a different card.                                                                                                                                                         |
| `restricted_card`                 | This card cannot be used for this payment. It may have restrictions or been reported lost/stolen. Please use a different card.                                                                                                                                                 |
| `card_velocity_exceeded`          | You've exceeded your card's transaction limit or available balance. Please try a smaller amount or use a different card.                                                                                                                                                       |
| `contact_issuer`                  | Please contact your card issuer for more information about this decline. Call the 800 number on the back of your card.                                                                                                                                                         |
| `bank_declined`                   | Your bank has declined this transaction. Please try a different card or contact your bank.                                                                                                                                                                                     |
| `regulatory_blocked`              | This transaction cannot be processed due to regulatory restrictions in your region. Please try a different payment method or contact support for alternatives.                                                                                                                 |
| `transaction_not_permitted`       | Your card issuer doesn't allow this type of transaction. Please use a different card or contact your bank to enable this transaction type.                                                                                                                                     |
| `card_type_not_supported`         | This card type is not supported. Please try a different card.                                                                                                                                                                                                                  |
| `issuer_not_found`                | The payment was declined due to incorrect card or billing details. Please verify your card number, expiration date, and billing address, then try again.                                                                                                                       |
| `closed_account`                  | This card account has been closed. Please use a different card to complete your purchase.                                                                                                                                                                                      |
| `issuer_unavailable`              | We couldn't reach your card issuer to authorize this payment. This is usually temporary. Please try again in a few minutes or use a different card.                                                                                                                            |
| `invalid_zip`                     | The billing postal/ZIP code doesn't match your card's records. Please enter the ZIP code associated with your card's billing address.                                                                                                                                          |
| `invalid_expiry_month`            | The expiration month is invalid. Please enter a valid month (01-12) and try again.                                                                                                                                                                                             |
| `invalid_expiry_year`             | The expiration year is invalid. Please enter a valid 2 or 4-digit year (e.g., 25 or 2025) and try again.                                                                                                                                                                       |
| `invalid_expiry`                  | The expiration date is invalid. Please enter a valid date in MM/YY format and ensure the card hasn't expired.                                                                                                                                                                  |
| `invalid_transaction`             | The issuing bank has declined this transaction. This may be due to an incorrect card number, expired card, invalid card, wrong expiration date, mismatched billing address or zip code, or multiple rapid transaction attempts. Please verify your card details and try again. |
| `cannot_authorize`                | We couldn't authorize this payment. Please try a different card or contact your bank for more information.                                                                                                                                                                     |
| `pin_required`                    | This card requires a PIN for this transaction. Please use a card reader with PIN capability or try a different card.                                                                                                                                                           |
| `pin_try_exceeded`                | Too many incorrect PIN attempts. For security, this card is temporarily blocked. Please contact your bank or use a different card.                                                                                                                                             |
| `high_risk`                       | This payment couldn't be processed due to security concerns. Please try a different card or contact support for assistance.                                                                                                                                                    |
| `test_mode_decline`               | This appears to be a test card number. Please use a real credit or debit card to complete your purchase.                                                                                                                                                                       |
| `merchant_blacklist`              | This payment was blocked for security reasons. Please try a different card or contact support for assistance.                                                                                                                                                                  |
| `reenter_transaction`             | Your bank couldn't process this payment. Please try again, use a different card, or contact your bank for more information.                                                                                                                                                    |
| `invalid_pin`                     | The PIN entered is incorrect. Please try again with the correct PIN for this card.                                                                                                                                                                                             |
| `pin_required_as`                 | This card requires a PIN for this transaction. Please use a card reader with PIN capability or try a different card.                                                                                                                                                           |
| `withdrawal_count_limit_exceeded` | You've exceeded your card's daily transaction limit or available balance. Please try again tomorrow or use a different card.                                                                                                                                                   |
| `invalid_country`                 | The billing country doesn't match your card's records. Please verify your billing address country and try again.                                                                                                                                                               |
| `issuer_error`                    | Your bank detected an issue but couldn't specify the problem. Please try again in a few minutes or contact your bank directly for assistance.                                                                                                                                  |

## What happens when a payment is declined

When a customer's payment gets declined or fails, Whop takes several steps to try and recover the payment:

* **The subscription status changes to Past due**: This means the payment needs attention, but doesn't immediately cancel access
  * You can view Past due payments by going to **Dashboard** > **Payments**, clicking **Status** and selecting only **Past due**
* **We email the customer**: Your customers receive emails prompting them to update their payment information
* **We retry the payment**: Whop automatically retries the charge over a 5-day period
* **Access may be temporarily paused**: Depending on your settings, your customer might lose access to your whop until the payment goes through
  * Go to **Dashboard** > **Settings** > **Checkout** and choose whether you want members to have **Access while past due** or not
* **Subscription is canceled**: If the payment still fails after 5 days, the subscription is canceled automatically

## What you can do to fix a declined payment

When a payment is declined, you can help the customer update their payment method and manually retry the payment from your dashboard.

**Step 1: Ask the customer to update their payment method**

* Contact the customer to confirm they have sufficient funds and a working payment method
* To update their payment method, ask them to follow these steps:
  1. Go to [https://whop.com/@me/settings/memberships/inactive](https://whop.com/@me/settings/memberships/inactive)
  2. Click the **card** button on the affected subscription
  3. Select **Update payment**
  4. Add the new card details and save

**Step 2: Manually retry the payment from your dashboard**

1. Go to **Dashboard** > **Payments**
2. Click **Status** and select only **Failed**
3. Select the failed payment
4. Click **Retry payment**

When the payment processes successfully, Whop restores the customer’s access automatically.


# Refunds
Source: https://docs.whop.com/payments/refund-customer

Learn how to refund your customers on Whop

Process refunds instantly, set up auto-refunds, and manage your account balance on Whop.

## How to process a refund

There are three ways to refund a customer: through their **profile** (quickest method), **Payments**, or the **Resolution Center**.

<Tabs>
  <Tab title="Customer's profile">
    1. Go to your **Dashboard**
    2. Use the search bar at the top right to find the customer
    3. Click on their profile
    4. Scroll down to **Payments** and click **Refund** next to the specific payment
    5. Choose your refund amount:
       * Click **Refund** for the full amount
       * Check **Partial refund** and enter the amount you want to refund
  </Tab>

  <Tab title="Payments">
    Great if you want to see all your transactions:

    1. Go to **Dashboard** > **Payments**
    2. Find the payment you want to refund
    3. Click the 3 dots (⋮) next to the customer
    4. Select **Refund** from the dropdown
    5. Choose your refund amount:
       * Click **Refund** for the full amount
       * Check **Partial refund** and enter the amount you want to refund
  </Tab>

  <Tab title="Resolution Center">
    1. Go to **Dashboard** > **Resolution center**
    2. Click on the case you want to resolve
    3. Click **Accept** and your refund will be processed
  </Tab>
</Tabs>

<Tip>
  Refunds are processed immediately, and you'll see the refund appear on the customer's profile right away.
</Tip>

## Set up auto-refunds to save time

If you want to automatically handle smaller refund requests, you can set up auto-refunds for amounts under a certain threshold.

To set up auto-refunds:

1. Go to **Dashboard** > **Resolution Center**
2. Click **Auto respond**
3. Set your auto-refund thresholds:
   * **Auto-refund card payments below**: Set the maximum amount for automatic card refunds
   * **Auto-refund PayPal payments below**: Set the maximum amount for automatic PayPal refunds
4. Add a custom message (optional) that customers will see when they receive an auto-refund
5. Click **Save**

<Info>
  Resolution Center cases for purchases made with financing options are always **automatically refunded.** This applies to Splitit, Sezzle, Klarna, AfterPay, and Zip Pay.

  * Auto-refunds help protect your payments
  * Keep your dispute rates low
  * Preserve your access to BNPL financing options
    Since these cases are refunded automatically, no action is required on your end.
</Info>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/autorefundsetup.png" alt="Auto refunds" title="Auto refunds" className="mx-auto" style={{ width:"46%" }} />

## What to do if you don't have sufficient funds

If your Whop account doesn't have sufficient funds for a refund, you'll need to add money to your account first.

### Top up your balance

To add funds to your account:

1. Go to **Dashboard > Payouts**
2. Click **Top up +**
3. Enter the amount you want to add
4. Choose to pay from your personal balance or select another payment method
5. Click **Pay**

<Tip>
  Always keep some money in your account so you can process refunds quickly. This keeps customers happy and makes your business look professional.
</Tip>

### Set up minimum balance retention

If you use **Automatic withdrawals**, you can automatically keep money in your account for refunds:

1. Go to **Dashboard** > **Payouts**
2. Click **Automatic withdrawals**
3. Set your withdrawal schedule (**Daily**, **Weekly**, or **Monthly**) and click **Continue**
4. Enter the minimum amount you want to keep in your account and click **Continue**
   * We recommend keeping enough to cover at least two refunds at your typical price
5. Click **Confirm**

To edit the minimum amount if you already have automatic withdrawals setup, click the 3 dots on the top right of your **Payouts** page, and then click **Automatic withdrawals** and then **Edit automatic withdrawal settings**.

<Tip>
  If you only use manual withdrawals, you can't set a minimum balance to retain — you'll need to manage your balance manually.
</Tip>

## FAQs

<AccordionGroup>
  <Accordion title="How do fees work with refunds?">
    When you refund someone, you pay back the full amount they originally paid — even though you received less after fees were deducted.

    For example: If a customer paid \$100, you'll refund the full \$100 even though you only received around \$97 after Whop and processing fees.

    This applies to both full and partial refunds. There are no additional fees to process a refund.
  </Accordion>

  <Accordion title="How long does it take for customers to receive their refunds?">
    It depends on the customer's bank or payment method. Customers can typically expect to see refunds in their account within 3-7 business days after the refund is processed.
  </Accordion>
</AccordionGroup>


# Resolution center
Source: https://docs.whop.com/payments/resolution-center

Manage refund requests before they turn into disputes

The **Resolution center** is where you can review and respond to customer refund claims.

## How the Resolution center works

Here’s what happens when a customer opens a claim:

1. **Customer opens a claim**
   * They explain the issue and choose a reason
   * They can upload up to 3 files (screenshots, videos, receipts)
2. **You receive a notification**
   * Whop sends you an email
   * The case appears in your **Resolution center**
3. **You respond**
   * Chat directly with the customer
   * Click **Accept**, **Deny**, or **Request more info**

<Info>
  Whop automatically uploads user logs for every case. In these, you can see:

  * When the user bought access to your Whop
  * If they agreed to your Terms of Service and Refund policy
  * If they claimed access to your Whop
  * If they engaged with your Whop
</Info>

4. **A decision is made**
   * If resolved between you and the customer, the case is closed
   * If the case is not resolves or you don’t respond within 7 days, Whop will step in and make a decision

## How to respond to a Resolution center case

1. Go to **Dashboard** > **Resolution center**
2. Click the case you want to manage
3. Click **Accept**, **Deny**, or **Request more info**

You can upload any proof in your response, so make sure to have solid Terms of Service and Return policy.

<Card title="Upload legal documents" icon="file-circle-check" href="/manage-your-whop/legal-documents">
  Learn how to upload legal documents and policies to your whop.
</Card>

<Tip>
  Cases without a response for 7 days are sent to Whop's team automatically. Responding fast shows you care and helps keep customers happy.
</Tip>

## Set up auto respond for small refunds

You can set up automatic refunds for smaller claims:

1. Go to **Dashboard** > **Resolution center**
2. Click **Auto respond**
3. Pick the amount for which auto-refunds are sent:
   * This can be set under **Auto-refund card payments below**
   * And **Auto-refund PayPal payments below**
4. (Optional) Add a custom message your customers will see when they get auto-refunded

<Info>
  Resolution Center cases for purchases made with financing options are always automatically refunded. This applies to Splitit, Sezzle, Klarna, AfterPay, and Zip Pay.

  * Auto-refunds help protect your payments
  * Keep your dispute rates low
  * Preserve your access to BNPL financing options
    Since these cases are refunded automatically, no action is required on your end.
</Info>

## Escalations and appeals

**If you don't respond within 7 days:**

* Whop reviews the case and decides based on all available info
* Both you and the customer are notified of the outcome

**Appeal process:**

* If either you or your customer disagrees with a decision, either party can appeal
* Whop will review the case again
* That decision is final and cannot be appealed further

## Notifications

Whop will email you when:

* A customer opens a new dispute
* A customer replies to your request for more info
* A case is esolved, escalated, or appealed
* Final decisions are made

If you're not getting emails from the Resolution center, go to **Dashboard** > **Settings** > **Notifications** and turn on the **Resolution center** toggle.

## FAQs

<AccordionGroup>
  <Accordion title="How many cases can a customer open?">
    Customers can open a case within 120 days of each payment they've made. For example, if a customer has made three payments, they can open three cases. However, only one case can be opened per payment. Once a case is closed and all appeals have been exhausted, the case cannot be reopened.
  </Accordion>

  <Accordion title="Can a customer open a case for a payment that has already been refunded?">
    No. When a payment is refunded, no further case can be opened.
  </Accordion>

  <Accordion title="Are all payments eligible for the Resolution center?">
    Only fiat payments are eligible for the Resolution center. Payments made with cryptocurrency via Coinbase Commerce are not eligible since they are irreversible and non-refundable.
  </Accordion>

  <Accordion title="What happens when Whop decides in favor of the customer?">
    Whop will either refund the customer on your behalf (which will be automatically processed) or decide to credit the customer's Whop Balance (which you do not incur a cost for). The result will be clearly communicated to you and the customer through the Resolution center timeline for the case.
  </Accordion>
</AccordionGroup>


# Send an invoice
Source: https://docs.whop.com/payments/send-an-invoice

Learn how to create, send, and track invoices on Whop

Whether your business sends customers an invoice upfront for providing a specific service, or the customer requires an invoice before making payment,
you can create an invoice on Whop in a few seconds.

## How to create and send an invoice

<Steps>
  <Step title="Navigate to 'Invoices'" titleSize="h3">
    * Go to your **Dashboard** and click **Invoices** in the **Payments** section.
    * Click **+ Create invoice.**
  </Step>

  <Step title="Add customer details" titleSize="h3">
    * Click the **Find or add a customer** dropdown menu.
    * Select an existing customer in the dropdown, or click **+ Add new customer** and enter their email and name.
  </Step>

  <Step title="Add due date" titleSize="h3">
    Click the dropdown menu under **Due date** and select when the invoice will become due for payment.
  </Step>

  <Step title="Add description" titleSize="h3">
    Add a clear description of what you're billing for — your customer will see this on their invoice.
  </Step>

  <Step title="Add amount" titleSize="h3">
    * Choose whether it's a **One-time** or **Recurring** payment:
      * **One-time:** The customer receives a single invoice with the amount you set.
      * **Recurring:** Creates a subscription. An invoice is sent for the first payment, and all following payments are charged automatically (customers receive receipts for these payments, not new invoices). If you select *Recurring*, you'll need to choose how often the customer is charged (e.g. every 7 days, monthly, quarterly, yearly, or a custom billing cycle).
    * **Enter the amount:** Type in the price and use the dropdown to set the currency.
    * Configure advanced options:
      * **Ask questions before checkout:** Collect information from customers before they purchase.
      * **Redirect after checkout:** Send customers to a specific page after they complete checkout.
      * **Payment methods:** Choose how your customer can pay the invoice — options include card, ACH, platform balance, financing (apply for access), PayPal, or crypto (setup required).
  </Step>

  <Step title="Pass processing fees (optional)" titleSize="h3">
    You can pass payment processing fees on to the customer by checking the box next to **Pass payment processing fees on to the customer**. When this is checked, payment processing fees will be added to the total invoice amount.
  </Step>

  <Step title="Send invoice" titleSize="h3">
    When you are happy with the email and checkout link previews, and you're sure all the details are correct, click **Send invoice**. Your customer will immediately receive the invoice in their email inbox.
  </Step>
</Steps>

## How reminders work

When an invoice passes the due date, Whop's invoice reminders kick in at certain intervals. We'll remind your customers after:

* 3 days
* 7 days
* 14 days
* 30 days
* 60 days

If the invoice is still unpaid after 120 days, it will be automatically voided.

## How to cancel / void an invoice

1. Go to your Invoices dashboard.
2. Find the invoice you want to void.
3. Click the three-dot menu on the right and select **Void invoice**.
4. Once voided, the invoice can no longer be paid.

## How to download an invoice

1. Go to your **Invoices** dashboard.
2. Find the invoice you want to download.
3. Click the three-dot menu on the right and select **Download PDF**.

## Tracking invoices in your dashboard

Your dashboard gives you a full view of every invoice and its status across all your customers, so you always know what's been paid and what's still outstanding.

### Statuses

* **Open:** The invoice has been created and delivered to the customer, but it has not been paid yet.
* **Paid:** The invoice was paid by the customer.
* **Past due:** The invoice was not paid by the due date. It can still be paid for up to 120 days after the due date.
* **Void:** The invoice was either canceled manually or automatically after being past due for 120 days.

### Customize your invoices dashboard

* **Filters:** Use the filters at the top of the table to only see invoices by status (e.g. Open, Paid, Past due) or by collection method (e.g. Send invoice vs Charge automatically).
* **Edit the table view:** Click Edit in the top right to choose which columns to display, such as invoice number, customer name, email, created date, or due date. Drag and drop to reorder columns so the most important details appear first.

### Export invoices for your records

1. Click **Export** in the top right of the dashboard.
2. Choose your time zone (local or UTC).
3. Select a date range (today, last 7 days, last month, or custom).
4. Pick which columns to include, or export all.
5. Click **Export** to download a CSV file you can use for accounting or record-keeping.


# Setup payouts
Source: https://docs.whop.com/payments/set-up-payouts

Learn how to set up payouts and withdraw your balance from Whop

With Whop, you can set up manual, recurring, or instant payouts to your bank account through Whop Payments. You can also get direct payouts to your PayPal and Coinbase Commerce accounts.

## Enable withdrawals with Whop Payments

To withdraw, you'll first need to set up Whop Payments:

1. Go to **Dashboard > Payouts**.
2. Click **Set up Whop Payments**.
3. Select your country so payouts are in your local currency.
4. Complete the KYC setup (fill in your details, link your bank, and upload ID).

## Check your balance

You can view and withdraw your earnings from either your **Dashboard** or your **Profile**.

### 1. Through your Dashboard

1. Go to **Dashboard > Payouts**.
2. Your **Balance** and **Withdrawals** are here.

Your Balance includes:

* The amount you can withdraw now
* The balance that'll be available to pay out soon (when a customer pays, it can take a couple of days for the money to reach your account)
* The date your pending balance will be available on

### 2. Through your Profile

Your payouts can be found at **Profile > Balance**.

## How to withdraw

You can withdraw from your **Dashboard** or **Profile** at any time, as long as you meet the minimum withdrawal threshold of \$10 (if applicable).

### Payout via Dashboard

1. Go to your **Dashboard > Payouts**.
2. Click **Withdraw**.
3. Input the **Amount** you want to withdraw and click **Continue**.
   * You can also click **Max** to withdraw the maximum amount available.
4. Review the details and click the **Payout** button

### Payout via Profile

1. Go to your **Profile > Balance**.
2. Click **Withdraw**.
3. Input the **Amount** you want to withdraw and click **Payout**.

## Setting up automatic withdrawals

1. Go to your **Dashboard** > **Payouts**.
2. Click the three dots on the top right corner of the **Payouts** page, and then click **Automatic withdrawals**
3. Choose **How often you want to get paid** and click **Continue.**
4. Set the minimum amount that’s kept in your account and click **Continue.**
   * You should always have a minimum balance available for refunds or to pay out disputes.
5. Review the details and click **Confirm.**

## International payouts

Creators outside the US need to set up a bank account that accepts the currency of their registered country.

On Whop Payments, Whop is the *Merchant of Record*, and our system automatically converts all currencies to the currency of the geography you initially chose when you set up your Whop organization.

* This means that, even if you accept payments in USD, Whop automatically converts the USD payments to your local currency before sending payouts.
* Payouts will NOT successfully go through to a USD-accepting bank account if the bank account is located in a country where USD is not the local currency.

<Tip>
  Your payout country can be changed for an existing Whop.
  To switch payout countries, navigate to your payouts & click the 3 dots on the top right.
  Click "change payout country.
</Tip>

## PayPal payouts

To receive PayPal payouts, customers must buy using PayPal (no post-purchase transfer to PayPal).

### Setting up payouts to your PayPal

1. Go to your **Dashboard** > **Payouts** > **Additional payment methods**.
2. Select **Setup** next to the **PayPal** option.
3. Follow the on-screen instructions to link your PayPal account.

<Tip>
  For PayPal to appear at checkout, check the PayPal box under Payment options
  when you create a checkout link.
</Tip>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/paypalpopup.png" alt="Paypal" />

## Coinbase payouts

**Important notes:**

* Withdrawals must go to a Coinbase wallet
* To receive Coinbase payouts, customers must buy using crypto (no post-purchase transfer to Coinbase)

### Setting up payouts to your Coinbase crypto wallet

1. Go to your **Dashboard** > **Payouts** > **Additional payment methods**.
2. Select **Setup** next to the **Coinbase** option.
3. Follow the on-screen instructions to link your Coinbase Commerce account.
4. You will need to log into your Coinbase account and copy your API key and Webhook secret to paste into Whop.

**For Coinbase to appear at checkout:** Check the **Crypto** box under **Payment options** when you create a checkout link.

<Tip>To get paid with crypto, you have to set up a one-time pricing plan.</Tip>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/coinbasepopup.png" alt="Coinbase" title="Coinbase" className="mx-auto" style={{ width: "51%" }} />

## Troubleshooting payouts

### Common payout statuses

* **Requested:** A withdrawal has been initiated and is awaiting approval
* **Processing / In Transit:** Payment is processing (takes 1–5 business days)
* **Completed:** Funds sent by Whop, awaiting bank processing
* **Canceled:** Your payout has failed.

### Payout timing & processing delays

**Standard timing:**

* When you make a sale, the money will be available for withdrawal in 1–4 business days.
* Once withdrawn, allow up to 10 business days for the payout to be processed and arrive in your bank.

**If a payout fails:**

* The reason will be shown in the payout timeline.
* When this happens, the failed amount is automatically re-added to your available balance.

**How to retry a failed payout:**

1. Review the failure reason and update any necessary information (like bank details or currency settings).
2. Once updated, you can retry your payout by clicking **Withdraw** in the Payouts tab on your Dashboard.

You can also click on the payout to see more information on the payout timeline and why the payout may have failed.

**Common reasons for failed payouts:**

* Your bank account is not in the local currency of the country where you registered your Whop
* You entered your bank account information incorrectly

**To replace your bank account:**

* Go to your **Dashboard** > **Payouts**.
* Click on **Withdraw**.
* Navigate to send payout to and then **Add new account.**
* Input your new bank account details and click **Add** (bottom right).

### If a payout says "Completed" but money hasn't arrived

This means the payout has been processed on Whop's end.

1. Allow up to 5 business days (excluding weekends and bank holidays) for your bank to process it.
2. If it takes longer, click on the payout to see the payout timeline. A Trace ID will be provided.

**To track or trace your payout:**

1. Contact your bank's customer service.
2. Share the Trace ID, payout date, amount, and payor name (Whop).

## Withdraw affiliate earnings

There is a 30-day waiting period from when the referred customer makes their purchase and when the referrer gets paid the affiliate cut. This waiting period is to protect businesses on Whop from potential disputes and refunds.

**To withdraw your affiliate earnings:**

1. Go to your **Profile** > **Balance**.
2. Click on **Withdraw**.
3. Input the **Amount** you want to withdraw and click on **Confirm withdrawal**.


# Refer businesses to Whop
Source: https://docs.whop.com/refer-businesses-to-whop

If you refer a business to Whop, you'll earn a 30% commission on their revenue.

If you refer a business to Whop, you'll earn a 30% commission on their revenue they drive to our platform. Revenue is calculated on every transaction.

<Frame>
  <video autoPlay src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/partners.mp4?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=029fc5c68a5e0406f846383a93af1c25" alt="Refer businesses to Whop" data-path="how-to-videos/partners.mp4" />
</Frame>

To refer businesses, go to the [Whop partners page](https://whop.com/affiliates/partners). You will be able to see a list of everyone you have referred.

## Onboard specific business models

Customize your affiliate links to streamline the onboarding process and automatically attribute a business model to your referrals.

### Business model and industry parameters

Add these parameters to your affiliate URLs to streamline the onboarding steps:

* `business_type` - Pre-select the business model
* `industry_type` - Pre-select the industry
* `a` - Your affiliate username to track referrals and earn commissions

#### Valid business model and industry combinations:

**agency**

* `ai_agency`
* `marketing_agency`
* `clipping_agency`
* `development_agency`
* `sales_agency`
* `design_agency`
* `recruiting_agency`
* `coaching_agency`
* `customer_support_agency`
* `other`

**brick\_and\_mortar**

* `gym`
* `coffee_shop`
* `restaurant`
* `salon_spa`
* `retail_store`
* `medical_dentist_office`
* `auto_repair_shop`
* `hotel_lodging`
* `other`

**events**

* `webinars`
* `masterminds`
* `bootcamps`
* `convention`
* `meetups`
* `concerts`
* `parties`
* `other`

**physical\_products**

* `clothing`
* `beauty_and_personal_care`
* `accessories`
* `fitness_gear`
* `food_and_beverages`
* `home_goods`
* `electronics_and_gadgets`
* `other`

**coaching\_and\_courses**

* `fitness`
* `real_estate`
* `business`
* `health_and_wellness`
* `dating`
* `agencies`
* `personal_development`
* `sales`
* `social_media`
* `personal_finance`
* `ai`
* `ecommerce`
* `public_speaking`
* `trading`
* `amazon_fba`
* `reselling`
* `spirituality`
* `careers`
* `home_services`
* `travel`
* `software`
* `kindle_book_publishing`
* `video_games`
* `clipping`
* `sports_betting`
* `vas`
* `other`

**software**

* `ai`
* `trading`
* `ecommerce`
* `business`
* `agencies`
* `social_media`
* `amazon_fba`
* `reselling`
* `video_games`
* `health_and_wellness`
* `personal_finance`
* `fitness`
* `sales`
* `sports_betting`
* `real_estate`
* `software`
* `careers`
* `travel`
* `home_services`
* `public_speaking`
* `dating`
* `personal_development`
* `spirituality`
* `vas`
* `clipping`
* `kindle_book_publishing`
* `other`

**paid\_group**

* `trading`
* `sports_betting`
* `fitness`
* `health_and_wellness`
* `ecommerce`
* `reselling`
* `social_media`
* `ai`
* `business`
* `personal_development`
* `sales`
* `real_estate`
* `agencies`
* `amazon_fba`
* `personal_finance`
* `video_games`
* `dating`
* `spirituality`
* `travel`
* `careers`
* `software`
* `home_services`
* `public_speaking`
* `clipping`
* `vas`
* `kindle_book_publishing`
* `other`

**newsletter**

* `ai`
* `trading`
* `business`
* `personal_finance`
* `ecommerce`
* `health_and_wellness`
* `social_media`
* `fitness`
* `real_estate`
* `agencies`
* `sales`
* `amazon_fba`
* `sports_betting`
* `reselling`
* `personal_development`
* `spirituality`
* `video_games`
* `dating`
* `careers`
* `travel`
* `public_speaking`
* `software`
* `home_services`
* `kindle_book_publishing`
* `clipping`
* `vas`
* `other`

### Example affiliate URLs

```
https://whop.com/new/?business_type=software&industry_type=ai&a=username
https://whop.com/new/?business_type=software&a=username
```

### Common use cases

**For onboarding AI businesses:**

```
https://whop.com/new/?business_type=software&industry_type=ai&a=username
```

**For onboarding clipping groups:**

```
https://whop.com/new/?business_type=paid_group&industry_type=clipping&a=username
```

This is perfect for creating targeted content like YouTube tutorials where you want to streamline the signup process for a specific business model and industry.


# Set up pricing
Source: https://docs.whop.com/set-up-products-pricing

Choose your pricing model and what members get in your whop

Products are how you package and price your offer on Whop. You can set up free access, one-time payments, or recurring subscriptions for people to access your whop.

## How to set up pricing for your whop

<Steps>
  <Step title="Add a product" titleSize="h3">
    To set up pricing, you need to create a product:

    * Go to your whop
    * Click **Products**
    * Click **Add product**
  </Step>

  <Step title="Set up your product details" titleSize="h3">
    Configure the core details of your product:

    * **Choose a title**: Keep it clear and descriptive (e.g., "Premium Membership", "Full Course Access")
    * Select your pricing option:
      * **Free**: Give customers free access to your whop
      * **One-time**: Charge customers once for lifetime access
      * **Recurring**: Set up monthly or yearly subscriptions
    * **Choose currency**: Select the currency you want to charge in
    * **Set your price**: Enter how much customers will pay
      * If you chose recurring, also choose your billing cycle length (weekly, monthly, yearly)
    * **Configure advanced options** (optional):
      * **Stock**: Limit how many people can purchase this product
      * **Show on store page**: Make this product visible on your public store page
      * **Add a waitlist**: Users enter payment details but aren't charged until you approve them
      * **Ask questions before checkout**: Collect information from customers before they purchase
      * **Auto-expire access**: Automatically remove access after a set time period
      * **Redirect after checkout**: Send customers to a specific page after they complete checkout
      * **Add internal name**: A name only you can see on your dashboard
    * **Choose payment methods**: Select what customers can pay with
      * Credit/debit card
      * Bank transfer (ACH)
      * PayPal
      * Cryptocurrency
      * Buy now, pay later (Financing)

    <Tip>
      If you want to offer multiple pricing options (like both monthly and yearly plans), click Add another billing period.
    </Tip>
  </Step>

  <Step title="Choose which apps customers get with this product" titleSize="h3">
    This is where you decide what customers actually get when they purchase your product. When users purchase or claim your product, they will get access to the apps you select.

    * **Toggle on** all the apps you want to include in this product
    * **Toggle off** any apps you don't want included in this product

    <Tip>
      You can create multiple products with different app combinations. For example, create a free product that gives access to basic apps, and a premium product that unlocks premium apps.
    </Tip>

    When you're happy with everything, click **Add Product**.
  </Step>
</Steps>

## Understanding products: Different ways to structure your whop

Your whop can contain multiple products, each acting like a different membership option. You might have a basic tier and premium tier, or just one all-access option.

**Common examples:**

* **One product:** "Full Access" (\$49/month) with all apps included
* **Two products:** "Free Community" (chat only) + "Premium" (\$29/month, all apps)
* **Three products:** Basic (\$19), Pro (\$49), VIP (\$99) with different app combinations

<Tip>
  Start simple with one product and add more later as your business grows.
</Tip>

## Next steps

To get your business up and running on Whop, make sure you've completed the rest of the setup steps:

<CardGroup cols={2}>
  <Card title="Add apps to your whop" icon="block-brick" href="/add-apps">
    Apps are building blocks for your business.
  </Card>

  <Card title="Set up your store page" icon="store" href="/set-up-store-page">
    Create a landing page for customer acquisition.
  </Card>
</CardGroup>


# Set up your product page
Source: https://docs.whop.com/set-up-store-page

Edit the details on your Whop product page: name, headline, description, media, pricing, features, FAQs, and more

Your product page is where visitors learn about your offer. It shows details about your product, explains what customers get, and highlights the value.

## Complete the product page setup checklist

If you're building your product for the first time, you'll see a checklist to guide you through setting up your page.

<Tip>
  Don't overthink your initial setup: You can always come back to improve it later as you learn what works best for your audience.

  Changes to your product page are only saved when you click **Save** at the bottom of the page.
</Tip>

<Steps>
  <Step title="Create your product" titleSize="h3">
    To get started:

    1. From your Whop dashboard, click **Products** in the left-hand menu.
    2. Click **Create product** in the top right.
    3. Choose your **Product type** (e.g., Software, Paid group, Newsletter).
    4. Select the **Category** that best matches your business or industry (e.g., AI, Coaching, Events).
    5. After selecting a type and category, you'll be taken directly into your product setup flow.
  </Step>

  <Step title="Add product details" titleSize="h3">
    Your product name, headline, and description help visitors quickly understand your offer.

    To add these:

    1. Enter your **Name** (e.g., "Basic Access") — short and clear (max 30 characters).
    2. Write a catchy **Headline** (max 150 characters) that grabs attention.
       * Example: *"How to Build a Viral App: $0 to $100k/mo"*
    3. Write a detailed **Description** (up to 1500 characters) that explains:
       * What members will get
       * How your product will help customers
       * Example: *"Access weekly growth strategies, templates, and tutorials designed to help you scale your app."*
  </Step>

  <Step title="Add product media" titleSize="h3">
    This is where you can upload images or videos that appear at the top of your page.

    To add your media:

    1. Click **Add videos and photos**.
    2. Select media files from your device (up to eight).
       * We recommend uploading images with a 16:9 aspect ratio.
    3. Arrange them in the order you want (the top-left file shows first).

    <Tip>
      Pro tip: A short video (or VSL) talking about your product improves conversions.
    </Tip>
  </Step>

  <Step title="Set pricing" titleSize="h3">
    Choose how much it costs to join your product. You can offer free, one-time, or recurring options.

    To add pricing:

    1. Select your pricing type (Free, One-time, Recurring).
    2. Enter the price and currency.
    3. (Optional) Click **Add another pricing option** to create tiers or multiple plans.
  </Step>

  <Step title="Add features" titleSize="h3">
    Features help highlight the value of your offer and what members will gain.

    To add features:

    1. Click **Add a feature**.
    2. Write short, benefit-driven points (e.g., "Weekly live Q\&A calls").
  </Step>

  <Step title="Add FAQs" titleSize="h3">
    FAQs help answer common questions before someone buys.

    To add FAQs:

    1. Click **Add FAQ item…**
    2. Enter a question and your answer.
       * Example: *"Do I need prior coding experience?"* → *"No, this course is beginner-friendly."*
  </Step>

  <Step title="Advanced settings" titleSize="h3">
    In the **Advanced** section, you’ll find:

    * **Product URL**: Customize the unique link to your product page.
    * **Product tax code**: Used to calculate automatic tax (defaults to preset codes from your tax settings).
    * **Call to action (CTA)**: Customize the main button text (e.g., "Join", "Subscribe").
    * **Affiliate rate**: Set a percentage payout for affiliates.
    * **Visibility toggle**: Control whether your product is visible on your public store page or only via direct link.
    * **Member count**: Option to display the number of active members.
    * **Included apps**: Choose apps (e.g., Chat app or Courses app) to connect to your product.
  </Step>
</Steps>

## How to update your product page details

Update your product page by accessing the **Edit details** page:

1. Go to the home page of your Whop dashboard.
2. Click on the **Products** tab.
3. Click the three dots (···) next to your product name.
4. Select **Edit**.

From here, you can change:

* Product type and category
* Name, headline, and description
* Product media
* Pricing
* Features
* FAQs
* Advanced settings (URL, CTA, tax code, apps, visibility, etc)

## Next steps

Once your product page is live, make sure you:

* Share your product link with your audience.
* Keep improving and update headlines, media, pricing, features, and FAQs as your product evolves.

You can edit your product anytime from the **Products** tab in your dashboard.


# Agencies
Source: https://docs.whop.com/supported-business-models/agency-services

Learn how to launch and run your agency on Whop

You can manage lead generation, take sales calls, showcase case studies, run private client portals, handle payments, and coordinate your team - all in Whop.

## How it works

**For prospects:** Create a free whop with your case studies, resources, and a call booking link.

**For clients:** Send private checkout links, collect payments, and give access to private project spaces where you can chat, share deliverables, and manage timelines.

## Launch your agency on Whop in 9 steps

<Steps>
  <Step title="Create your whop" titleSize="h3">
    Head over to [**whop.com/sell**](https://whop.com/dashboard/start/) and get your community up and running:

    * Choose a memorable name for your agency
    * Select your custom URL
    * Complete the basic setup

    Your whop is now live and ready to customize.

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/createwhopagencies.png" alt="Createwhopagencies Png" />
  </Step>

  <Step title="Add the Calendar Bookings app" titleSize="h3">
    Just like Calendly, this app allows you to set up your calendar so prospects can schedule discovery sales calls with you.

    1. Add the [**Calendar Bookings**](https://whop.com/apps/app_dC2dkRARmXE4qf/install/) app from the Whop App Store, then click **Configure Calendar Bookings** to set up your availability
    2. Click **Add availability** or **+** at the top right
    3. Add the: 
       * **Title** 
       * **Duration** 
       * **Meeting link/Location**
       * You can optionally add a **Description** and a **Price per booking**
    4. Click **Continue**
    5. Select the **Days** and **Time** you’ll be available
    6. Click **Create**

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/calendarbookingstoagency.gif" alt="Add Calendar Bookings app" />
  </Step>

  <Step title="Add the Files app" titleSize="h3">
    Add high value materials and documents using the [**Files**](https://whop.com/apps/app_5UWRrs7haZZeiQ/install/) app to turn your whop into a lead magnet.

    * **Case studies:** Showcase client work, before/after results, and success stories
    * **Free resources:** Upload templates, audits, checklists, or anything you'd normally offer as a lead magnet

    Leads will join your whop to access the resources, you capture their details, then browse your whop and potentially book a call.

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/addfilestoagency.png" alt="Add Files app" />
  </Step>

  <Step title="Add the Content app" titleSize="h3">
    The [**Content**](https://whop.com/apps/app_mmjPLOxIgL1qxe/install/) app gives you unlimited flexibility to share text-based resources with your prospects.

    * Welcome guide explaining how prospects can get the most value from your whop
    * FAQ section answering common questions about your services
    * Your methodology or approach to solving client problems

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/addingcontenttoagencies.png" alt="Add Content app" />
  </Step>

  <Step title="Add the Chat app (optional)" titleSize="h3">
    Consider adding a community element to your whop where prospects can ask questions, engage with your content, and stay connected with your agency. Add the [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app from the Whop App Store and rename it to "Ask questions" or "General chat". This creates a space where prospects can:

    * Ask questions about your area of expertise
    * Get quick answers and build trust with your agency
    * Connect with other prospects

    <Tip>
      Stay active in the chat to build relationships and demonstrate your expertise. Answer questions quickly and share valuable insights - this positions you as helpful and knowledgeable before prospects even book a call.
    </Tip>

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/addingchattoagencies.png" alt="Add Chat app" />
  </Step>

  <Step title="Set up a free pricing model" titleSize="h3">
    Now that you've added your apps, create a free product that gives prospects access to everything.

    * Go to your whop > click **Products** > click **Add product**

    Configure the settings in the product to make it free to access.

    [Learn more about setting up pricing and products here](/apps/docs/set-up-products-pricing).
  </Step>

  <Step title="Design your store page" titleSize="h3">
    Your store page is where prospects decide whether to join your agency's free whop. Click your whop name in the top left, then select **Design store page** to open the editor. Click **Edit details** to customize:

    * **Choose a clear name and headline:** Make it immediately obvious what your agency offers and who it's for
    * **Write a compelling description:** Focus on the results you deliver for clients
    * **Upload a clean logo:** Even a simple logo builds credibility and makes your agency look legit
    * **Add gallery images or video:** Include case study screenshots, client testimonials, or a brief welcome video that builds trust and showcases your expertise
    * **Select "Agencies" as your category:** This helps people discover your services when browsing Whop

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/storepageagencies.png" alt="Agency store page" />
  </Step>

  <Step title="Convert leads into paying clients" titleSize="h3">
    When someone books a call through your **Calendar Bookings** app and decides to work with you, you can create a paid product (and checkout link) for them. When you close a client, you have two options:

    ### Option A: Use Whop for payment processing only

    Choose this option if you just want to handle the payment through Whop and manage everything else with your current tools.

    * Create a new product specifically for that client
    * [Set your pricing](/apps/docs/set-up-products-pricing) (one-time project fee or recurring retainer)
    * Don't toggle on any apps for this product
    * Send them the private checkout link to complete payment
    * Manage project delivery through your existing tools

    ### Option B: Create a complete client portal

    Give your client a dedicated space inside your whop where you can communicate and share project materials.

    * Create a new paid product for the client
    * [Set your pricing structure](/apps/docs/set-up-products-pricing)
    * Add apps in your whop that are only accessible to this client:
      * **Chat**: Private 1:1 communication channel
      * **Files**: Upload deliverables, contracts, and assets
      * **Events**: Schedule review sessions, deadlines, and milestones
      * **Content**: Share project briefs, strategy documents, or progress updates
      * **Calendar**: Allow clients to book additional calls or check-ins
    * Hide this product from your public store page
    * Send the private checkout link after your sales call
  </Step>

  <Step title="Manage your team" titleSize="h3">
    As your agency grows, you can add team members.

    * [Learn more about managing your team, roles and permissions here](/apps/docs/manage-your-whop/manage-team-roles)

    You can even pay your team through whop.

    * [Learn how to pay your team on Whop here](/apps/docs/manage-your-whop/pay-your-team)

    Add internal apps that are only accessible to your team members to keep your operations running smoothly.

    * **Files**: Store SOPs, templates, and internal documentation
    * **Chat**: Create team communication channels
    * **Events**: Schedule team meetings and deadlines
    * **Calendar**: Allow team members to book 1-on-1s with you
  </Step>
</Steps>

## Next steps

<Card title="Grow your agency on Whop" icon="chart-line" href="/manage-your-whop">
  Learn how to use Whop's tools and features to get more clients.
</Card>


# Brick and mortar
Source: https://docs.whop.com/supported-business-models/brick-and-mortar

Learn how to launch and run your brick-and-mortar business on Whop

We're still working on making Whop a better place for brick-and-mortar businesses. In the meantime, many shops use Whop to accept in-person payments and add social features for their patrons.

## Run in-store sales on Whop in 4 simple steps

<Steps>
  <Step title="Create a general product for your in-store purchase" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Name the product
    your store and write a catchy headline as to why people come to your shop.
  </Step>

  <Step title="Take in-person payments with the Whop iOS app" titleSize="h3">
    Open the Whop iOS app, click the bottom right tab, and then create a
    checkout link when it's time for a customer to pay. After you create a
    checkout link from your phone, a QR code button will appear so customers can
    scan and pay. You can also save or print the QR for signage.
  </Step>

  <Step title="Give patrons exclusive perks" titleSize="h3">
    Add a patrons-only
    [**Forums**](https://whop.com/apps/app_dYfm2IdXhDMquv/install/) app for
    updates and announcements, and add a merch store using the [**Merch
    Store**](https://whop.com/apps/app_bLSc10GEFPDu4G/install/) app so paying
    customers can buy your merchandise.
  </Step>
</Steps>

<Tip>
  This is just one good way to use Whop as a brick-and-mortar business. There
  are many other setups depending on your goals.
</Tip>


# Coaches
Source: https://docs.whop.com/supported-business-models/coaches

Learn how to launch your coaching business on Whop.

## Get started fast

<Steps>
  <Step title="Sign up and create your whop" titleSize="h3">
    Head over to [**whop.com/sell**](https://whop.com/dashboard/start/).
  </Step>

  <Step title="Create a product and fill your product page (add a custom CTA)" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Fill out your
    product page completely and set a custom CTA (e.g., "Apply for coaching" or
    "Join waitlist") to collect leads and show up on the marketplace. It's
    important to fill this out.
  </Step>

  <Step title="Send checkout links to customers" titleSize="h3">
    Copy your product checkout link and share it anywhere—your website, socials,
    email, or DMs.
  </Step>

  <Step title="Offer financing (BNPL)" titleSize="h3">
    Apply for financing options so clients can buy now, pay later. Learn more:
    [**Financing setup**](/payments/financing).
  </Step>
</Steps>

## Next steps

<Card title="Grow your coaching business on Whop" icon="chart-line" href="/manage-your-whop">
  Learn how to use Whop's tools and features to get more coaching clients.
</Card>


# DTC Ecommerce
Source: https://docs.whop.com/supported-business-models/dtc-ecommerce

Learn how to launch and run your ecommerce store on Whop

We're still working on making Whop a better place to sell physical products. In the meantime, many creators use Whop to accept payments and bring social features to their stores.

## Sell a physical product on Whop in 4 simple steps

<Steps>
  <Step title="Create a product for your item" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Name your product
    and write a catchy headline so buyers know what to expect.
  </Step>

  <Step title="Pick your price" titleSize="h3">
    Choose a one-time price. If you offer refills or memberships, you can also
    use recurring pricing. You can always adjust later.
  </Step>

  <Step title="Set up fulfillment" titleSize="h3">
    Set up webhooks with [**Zapier**](https://zapier.com) to trigger your order
    fulfillment (e.g., create a shipment, notify your 3PL, or send confirmation
    emails). In the meantime, use custom fields on the pricing option to collect
    what you need to fulfill (e.g., shipping address, size, color).
  </Step>

  <Step title="Share your link with buyers" titleSize="h3">
    Copy your product checkout link and share it anywhere—your website, socials,
    email, or DMs.
  </Step>
</Steps>

<Tip>
  Encourage community and support: add the
  [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app and grant
  access to everyone who bought this product so owners can get updates, ask
  questions, and share feedback.
</Tip>


# Educational programs
Source: https://docs.whop.com/supported-business-models/educational-programs

Learn how to sell educational programs on Whop

If you want to launch an online business selling a course, Whop puts everything in one place: host your course, create a community around it, and accept payments seamlessly.

## Launch your course business in 7 steps

<Steps>
  <Step title="Create your whop" titleSize="h3">
    Head over to [whop.com/sell](https://whop.com/dashboard/start/):

    * Choose your name
    * Select your custom URL
    * Complete the basic setup

    Your whop is now live and ready to customize.

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/createwhopcourse.png" alt="Create course on Whop" />
  </Step>

  <Step title="Add the Courses app" titleSize="h3">
    The [**Courses**](https://whop.com/apps/app_0vPZThfBpAwLo/install/) app is where your students will access your educational videos and learning materials.

    1. Add the **Courses** app from the [Whop App Store](https://private-docs.mintlify.app/whop-apps/whop-app-store)
    2. Click **Begin setup**
    3. Click **Add module**
    4. Enter the title and description for this module - this helps students understand what they'll learn
    5. Start organizing your content into chapters and lessons within each module

    You'll find a more detailed breakdown of how to use the **Courses** app [below](#setting-up-your-courses-app).

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/addingcoursestocoursewhop.gif" alt="Add Courses app" />
  </Step>

  <Step title="Add the Content app" titleSize="h3">
    Use the [**Content**](https://whop.com/apps/app_mmjPLOxIgL1qxe/install/) app to create a "Start here" guide that helps new students get oriented and know exactly what to do first. Create a welcome guide that covers:

    * How to navigate your whop and find everything
    * Where to begin with your course content
    * How to ask questions and get support
    * Any introductions or first steps they should take

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/addingcontenttocourses.png" alt="Add Content app" />
  </Step>

  <Step title="Add the Forums app" titleSize="h3">
    The [**Forums**](https://whop.com/apps/app_dYfm2IdXhDMquv/install/) app is where you’ll share important updates, announcements, and valuable content that all members should see. Popular forum uses include:

    * **Announcements**: Share course updates, new lesson releases, and important information
    * **Weekly insights**: Post regular tips, industry updates, or motivational content
    * **Student wins**: Highlight student success stories and achievements to inspire others
    * **Q\&A discussions**: Answer student questions and encourage peer-to-peer learning

    <Tip>
      You can add the Forums app multiple times to keep different types of discussions organized.
    </Tip>

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/addingforumsapptocourse.png" alt="Add Forums app" />
  </Step>

  <Step title="Add the Chat app" titleSize="h3">
    Give your students a place to connect and ask questions. Popular uses of the [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app include:

    * **General chat**: Main conversation space for students to hang out and ask questions
    * **Introductions**: Help new students connect and share their learning goals
    * **Assignment submissions**: Create spaces for students to share their work and get feedback

    <Tip>
      Add multiple Chat apps to create separate spaces for different topics or student cohorts.
    </Tip>

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/addingchatapptocourse.png" alt="Addingchatapptocourse Png" />
  </Step>

  <Step title="Design your store page" titleSize="h3">
    Your store page is where people can learn about your offer. Click your whop name in the top left, then select **Design store page** to open the editor. Click **Edit details** to customize:

    * **Choose a clear name and headline**: Make it immediately obvious what students will learn and how it will benefit them. Examples: "Master Facebook Ads in 30 Days" or "Complete Python Programming Bootcamp"
    * **Write a compelling description**: Focus on the transformation students will experience and specific skills they'll gain. Highlight outcomes like "land your first coding job," "double your ad ROI," or "launch your consulting business"
    * **Upload a logo**: Add a clean, simple logo to your store page
    * **Add gallery images or video**: This is what viewers will see at the top of your store page. We recommend adding a quick video of yourself talking about you, your expertise and what students will learn in the course
    * **Select the appropriate category**: This helps people discover your course when browsing Whop

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/storepagecourse.png" alt="Course store page" />
  </Step>

  <Step title="Set up pricing" titleSize="h3">
    Set up your pricing to choose how much people have to pay to get access to your course.

    * Go to your whop > click **Products** > click **Add product**

    You can structure your pricing as free access, a one-time payment, or a recurring subscription:

    * **Free**: Make it free to access your course (then upsell a higher ticket offer or done-for-you services)
    * **One-time payment**: For example, \$297 for lifetime access to your complete course
    * **Subscription model**: For example, \$47/month for ongoing access (with new content added regularly)

    [Learn more about setting up pricing and products here](/apps/docs/set-up-products-pricing).

    <Tip>
      You can also create multiple pricing tiers (for example, a basic course, premium with bonuses, and VIP with 1-on-1 coaching). Start simple - you can always add more options as your business grows.
    </Tip>
  </Step>
</Steps>

## Setting up your Courses app

Now that you've set up the basic structure of your course business, let's dive deeper into how to use the **Courses** app.

### Understanding the course structure

Your course is built using a three-level hierarchy to help organize your content:

1. **Modules**: These are your main course topics. Think "Beginner basics," "Advanced techniques," "Bonus resources," or "Live call recordings."
2. **Chapters**: These break each module into smaller, bite-sized sections that are easier to follow. Each chapter should focus on a specific subtopic or learning objective that builds toward the module's overall goal.
3. **Lessons:** This is where you actually teach - each lesson is one video, PDF, quiz, or piece of content (more info on this below).

### Types of lessons you can create

The **Courses** app gives you flexibility in how you deliver your content:

<CardGroup cols={3}>
  <Card title="Multimedia" icon="sparkles">
    Combine text, video, and downloads in one comprehensive lesson.
  </Card>

  <Card title="Video" icon="camera-movie">
    Upload or embed videos that students can watch at their own pace.
  </Card>

  <Card title="Text" icon="Pencil">
    Written guides and step-by-step instructions with rich formatting.
  </Card>
</CardGroup>

<CardGroup cols={3}>
  <Card title="PDF" icon="clipboard-check">
    Share downloadable worksheets, templates, and reference materials.
  </Card>

  <Card title="Knowledge check" icon="check">
    Ungraded questions that help students self-assess their progress.
  </Card>

  <Card title="Quiz" icon="question">
    Graded tests to certify student mastery before they advance.
  </Card>
</CardGroup>

### Course settings

In the **Settings** panel for each module, you can customize how students experience your content:

* **Description**: Add context about what students will learn in this specific module.
* **Require lesson completion**: Toggle this on to create a structured learning path where students must complete lessons in order. This ensures they don't skip ahead and miss important foundational concepts.
* **Video protection**: Add watermarks to your videos to prevent unauthorized sharing and protect your intellectual property.
* **Completion certificates**: Generate professional certificates when students finish your course.
* **Language settings**: Set the language for closed captions on your videos.

## Next steps

<Card title="Grow your course business on Whop" icon="chart-line" href="/manage-your-whop">
  Learn how to use Whop's tools and features to get more students.
</Card>


# Events
Source: https://docs.whop.com/supported-business-models/events

Learn how to launch and run your events on Whop

We're still working on making Whop a better place to host events. In the meantime, many creators use Whop to accept payments and bring social features to their events.

## Run an event on Whop in 4 simple steps

<Steps>
  <Step title="Create a product for your event" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Name your event and
    write a catchy headline so guests know what to expect.
  </Step>

  <Step title="Pick your price" titleSize="h3">
    Choose a one-time price for a ticket or make it free with a waitlist. You
    can always adjust later.
  </Step>

  <Step title="Add a Chat for attendees" titleSize="h3">
    Add the [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app so
    patrons can coordinate, share updates, and connect before and after the
    event.
  </Step>

  <Step title="Share your link with guests" titleSize="h3">
    Copy your product checkout link and share it anywhere—your website, socials,
    email, or DMs.
  </Step>
</Steps>


# Newsletters
Source: https://docs.whop.com/supported-business-models/newsletters

Learn how to launch and run your newsletter on Whop

We're still working on making Whop a better place to run newsletters. In the meantime, many creators use Whop to accept payments and bring social features to their newsletters.

## Run a newsletter on Whop in 4 simple steps

<Steps>
  <Step title="Create a product for your newsletter" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Name your newsletter
    and write a catchy headline so readers know what to expect.
  </Step>

  <Step title="Pick your price" titleSize="h3">
    Choose a monthly or yearly subscription price, or make it free with a
    waitlist. You can always adjust later.
  </Step>

  <Step title="Add Forums for your posts (emails included)" titleSize="h3">
    Add the [**Forums**](https://whop.com/apps/app_dYfm2IdXhDMquv/install/) app
    to publish issues and updates. All forum posts are emailed to your
    subscribers automatically.
  </Step>

  <Step title="Share your link with readers" titleSize="h3">
    Copy your product checkout link and share it anywhere—your website, socials,
    email, or DMs.
  </Step>
</Steps>

<Tip>
  Want more engagement? Add the
  [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app so
  subscribers can discuss topics, ask questions, and connect with each other.
</Tip>


# Paid groups
Source: https://docs.whop.com/supported-business-models/paid-groups

Learn how to offer a paid group on Whop.

Anyone can start a paid group. We recommend picking a niche using a tool like [this](https://originality.ai/blog/niche-idea-generator) or something that you are into, and then creating a paid group around it. Paid groups generally have a group chat, an announcements board, and cost people a monthly fee to join.

## Launch a paid group in 7 steps

<Steps>
  <Step title="Create your whop" titleSize="h3">
    Head over to [**whop.com/sell**](https://whop.com/dashboard/start/):

    * Choose a memorable name for your community
    * Select your custom URL
    * Complete the basic setup

    Your whop is now live and ready to customize.

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/createawhopcommunity.png" alt="Create a community" />
  </Step>

  <Step title="Add the Forums app to share updates and announcements" titleSize="h3">
    The [**Forums**](https://whop.com/apps/app_dYfm2IdXhDMquv/install/) app is your primary channel for communicating with your entire community. This is where you'll share important updates, announcements, and valuable content that all members should see. Popular forum uses include:

    * **Announcements:** Share important community updates, new features, and policy changes
    * **Daily updates:** Post regular insights, tips, or industry news relevant to your community
    * **Success stories:** Highlight member wins and achievements to inspire and motivate others
    * **Weekly roundups:** Summarize key discussions, share upcoming events, or recap important content
    * **Special offers:** Announce exclusive deals, promotions, or limited-time opportunities for members
    * **New resources:** Alert members when you've added new courses, content, or tools
    * **Event recaps:** Share highlights and key takeaways from live sessions or workshops

    <Tip>
      You can add the Forums app multiple times (and rename them to whatever you want) to keep your communications organized and easy to follow.
    </Tip>

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/community-forums.gif" alt="Add forums" />
  </Step>

  <Step title="Add the Chat app" titleSize="h3">
    Give your members a place to talk, share tips, and hype each other up. Add the [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app and customize it for your community's needs:

    * **General chat:** Main conversation space for casual discussions
    * **Introductions:** Help new members connect and introduce themselves
    * **Topic-specific chats:** Focus conversations around specific interests or goals

    <Tip>
      Add multiple Chat apps to create separate spaces for different topics or member groups.
    </Tip>

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/Chatappcommunity.png" alt="Add Chat app" />
  </Step>

  <Step title="Provide learning resources and materials" titleSize="h3">
    The most successful communities provide resources and learning materials that help their members achieve their goals. Here's how:

    1. **Add the Courses app**

    Create structured learning experiences with the [**Course**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app. After adding the Course app, click **Configure Courses**, then **Create your course now** to begin building your educational content. Popular course topics include:

    * **Onboarding course**: Walk new members through your methodology and approach
    * **Skill-building series**: Teach core concepts and techniques in your area of expertise
    * **Call recordings**: Store all your live session recordings so members can access past content anytime

    2. **Add the Content app**

    The [**Content**](https://whop.com/apps/app_mmjPLOxIgL1qxe/install/) app gives you unlimited flexibility to share text-based resources with your community:

    * **Welcome guide:** Help new members understand how to get the most value from your community from day one
    * **Community guidelines:** Set expectations for behavior and participation
    * **Resource library:** Share templates, checklists, and reference materials
    * **FAQ section:** Answer common questions to support members and reduce repetitive inquiries

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/resourcescommunity.png" alt="Add resources" />
  </Step>

  <Step title="Add the Events app to schedule live sessions" titleSize="h3">
    The **Events** app makes it easy to schedule and manage all your live sessions. Whether you're meeting in person, on Zoom, Google Meet, or using Whop's built-in livestream, your members can:

    * See all upcoming events
    * Add them to their calendar
    * Get notified before the event starts

    Use the [**Events**](https://whop.com/apps/app_RnVNENx5vtP8Zp/install/) app to schedule:

    * **Weekly live sessions:** Regular training, Q\&A, or discussion sessions
    * **Monthly workshops:** Deep-dive training on specific topics
    * **Guest expert interviews:** Bring in outside experts to share knowledge
    * **Community meetups:** Social events to strengthen member relationships

    To schedule events, add the **Events** app from the Whop App Store, click **Configure Events**, then **Create event**.

    <Tip>
      Pro tip: Use Whop's built-in livestream feature to broadcast directly to your community. Members get notified when you go live, and streams are automatically saved for anyone who missed them.
    </Tip>

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/Eventsappcommunity.png" alt="Add Events app" />
  </Step>

  <Step title="Design your product page" titleSize="h3">
    Your product page is where people can learn about your offer. Click **Products** in your dashboard, then select **Create product** to open the editor. Use the fields and sections to customize your page:

    * **Select the appropriate category:** Choose the category that best fits your business (e.g., AI, Coaching, or Events) to help people discover your product when browsing Whop.
    * **Choose a product name and headline:** Make it clear what your product offers and who it’s for.  Examples: “AI Tools for Marketers” or “Coding Bootcamp for Beginners.”
    * **Write a compelling description:** Focus on the value customers receive and how your product helps them achieve results. Highlight benefits like expert guidance, exclusive resources, or community access.
    * **Set pricing:** Choose between free, one-time, or recurring payments. Add multiple pricing options if you offer tiers or different levels of access.
    * **Add features:** List what members will gain (e.g., “Weekly live workshops,” “Private chat access,” or “Course library”).
  </Step>

  <Step title="Set up pricing" titleSize="h3">
    Set up your pricing to choose how much your members pay to get access to your community.

    * Go to your whop > click **Products** > click **Add product**

    Many communities choose a recurring fee (i.e. a subscription model) - for example:

    * **\$30/month** for full access
    * **\$200/year** for a yearly pass

    To do this, select **Recurring** when creating your pricing and select weekly, monthly or yearly. You can also add multiple pricing options (for example, a weekly plan, a monthly plan, and a lifetime membership).

    [Learn more about setting up pricing and products here](https://docs.whop.com/set-up-store-page).

    <Tip>
      Pro tip: Most of the largest communities on Whop use a free + premium model. This means setting up two 'Products' in your whop - one that's free to join, and another with paid access to premium apps (like chats, courses and resources).
    </Tip>
  </Step>
</Steps>

## Next steps

<Card title="Grow your community on Whop" icon="chart-line" href="/manage-your-whop">
  Learn how to use Whop's tools and features to get more members in your
  community.
</Card>


# SaaS
Source: https://docs.whop.com/supported-business-models/saas

Learn how to build and run your SaaS on Whop

<CardGroup cols={2}>
  <Card title="Integrate with license keys" href="#license-key-integration" icon="key" color="#16a34a">
    Use license keys to gate access to your software.
  </Card>

  <Card title="Integrate with email login" href="#email-login-integration" icon="envelope" color="#16a34a">
    Let users sign in via email and validate access with the SDK.
  </Card>
</CardGroup>

## Email login integration

If you have an existing SaaS or are building a new one, you can use Whop to direct your customers to pay and let them manage their membership.

To integrate, all you have to do is adjust your `User` table to include the `whop_user_id` and `whop_username` columns.

| Column          | Type   | Description                                                |
| --------------- | ------ | ---------------------------------------------------------- |
| `whop_user_id`  | string | Unique identifier for the user provided by Whop.           |
| `whop_username` | string | The user's Whop username, helpful for display and logging. |

**Note**
Use the Whop SDK’s `access.checkIfUserHasAccessToAccessPass` method (shown in Step 6) by passing the `whop_user_id` and the relevant access pass (product) ID to determine whether the user should be allowed to access your software.

If you would prefer to not have manage your own user table or even a database, consider building a Whop app here.

## Get your SaaS live on Whop:

<Steps>
  <Step title="Create your whop" titleSize="h3">
    Head over to [**whop.com/sell**](https://whop.com/dashboard/start/):

    * Choose a name for your SaaS
    * Select your custom URL
    * Complete the basic setup

    Your whop is now live and ready to customize.

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/createawhopcommunity.png" alt="Launch your SaaS" />
  </Step>

  <Step title="Create a product" titleSize="h3">
    * Go to your Dashboard
    * Go to Products
    * Click Add Product
  </Step>

  <Step title="Add checkout link to your website" titleSize="h3">
    There are two primary ways to send customers to checkout: an embedded checkout or a hosted checkout link.

    ### Embedded checkout

    Follow these two steps to embed the checkout on your page. First, include the Whop Checkout loader script:

    ```html  theme={null}
    <!-- Step 1 – Include the Whop Checkout loader -->
    <script
      async
      defer
      src="https://js.whop.com/static/checkout/loader.js"
    ></script>
    ```

    Then, add the checkout element where you want it to appear. Replace `plan_XXXXXXXXX` with your actual plan ID from the dashboard.

    ```html  theme={null}
    <!-- Step 2 – Add the checkout element -->
    <div data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
    ```

    ### Hosted checkout link

    Alternatively, you can link customers to Whop’s hosted checkout page. You can get this link from your dashboard or generate one programmatically and link to the `checkoutUrl` it returns (as shown in Step 6).

    ```html  theme={null}
    <!-- Hosted checkout link -->
    <a href="https://whop.com/checkout/plan_xxxxxxxxx" target="_blank" rel="noopener">
      Buy now
    </a>
    ```

    If you would like to programmatically create a checkout session, you can do so with the following code:

    <CodeGroup>
      ```typescript pages/api/create-checkout-session.ts theme={null}
      import { whopSdk } from "~/lib/whop-sdk";

      export async function createCheckoutSession(experienceId: string) {
        const checkoutSession = await whopSdk.payments.createCheckoutSession({
          planId: process.env.NEXT_PUBLIC_PREMIUM_PLAN_ID!,
          metadata: {
            customKey: "customValue",
          },
        });

        return checkoutSession;
      }
      ```

      When you receive the webhook (see below), you can use the `metadata` object to access the custom key and value you attached to the checkout session.
    </CodeGroup>
  </Step>

  <Step title="Add an app and get API keys" titleSize="h3">
    Go to your dashboard and add app
  </Step>

  <Step title="Subscribe to webhooks" titleSize="h3">
    Go to the dashboard section and add a webhook.
  </Step>

  <Step title="Check for access programmatically" titleSize="h3">
    <CodeGroup>
      ```typescript lib/whop-sdk.ts theme={null}
      import { WhopServerSdk } from "@whop/api";

      // Instantiate the Whop SDK client.
      // 👉 Replace the ENV vars below with the ones from your Whop dashboard.
      export const whopSdk = WhopServerSdk({
        // Required: your App ID ("App Settings" → App ID)
        appId: process.env.NEXT_PUBLIC_WHOP_APP_ID!,

        // Required: the API key you generated in "API Keys"
        appApiKey: process.env.WHOP_API_KEY!,
      });
      ```

      ```typescript pages/api/validate-access.ts theme={null}
      import { whopSdk } from "~/lib/whop-sdk";

      // Validate that a signed-in user has access to your premium product before
      // letting them use your SaaS feature.
      export async function validateAccess(whopUserId: string) {
        const result = await whopSdk.access.checkIfUserHasAccessToAccessPass({
          // Access Pass / Product ID you want to gate behind
          accessPassId: process.env.NEXT_PUBLIC_PREMIUM_ACCESS_PASS_ID!,
          // The Whop user we stored in our database
          userId: whopUserId,
        });

        return result.hasAccess; // boolean
      }
      ```
    </CodeGroup>
  </Step>

  <Step title="Give users a way to manage their membership" titleSize="h3">
    You can link users here to manage their membership: [https://whop.com/@me/settings/memberships/](https://whop.com/@me/settings/memberships/).

    They can simply login with the same email and they use to access your SaaS without a password.
  </Step>

  <Step title="Design your store page and list on marketplace" titleSize="h3">
    Your store page is where people can learn about your offer. Click your whop name in the top left, then select **Design store page** to open the editor. Click **Edit details** to customize:

    * **Choose a clear name and headline:** Make it immediately obvious what your community offers and who it's for. Examples: "Marketing professionals sharing strategies and insights" or "Fitness enthusiasts building accountability and motivation"
    * **Write a compelling description:** Focus on the value members receive and how your community will help them achieve their goals. Highlight specific benefits like exclusive content, expert guidance, peer connections, and ongoing support
    * **Upload a logo:** Add a clean, simple logo to your store page
    * **Add gallery images or video:** Images of events, member success stories, or a brief welcome video help potential members get to know you and what to expect when they join
    * **Select the appropriate category:** This helps people discover your community when browsing Whop

        <img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/images/Storepagecommunity.png" alt="Community store page" />
  </Step>
</Steps>

## License Key Integration

After purchasing a product, users are granted a unique license key that they can use to access and unlock their purchased product. As a developer, you can integrate this feature into your own software by requiring your users to enter their license key before being granted access to the product, or gate certain features of the application behind validating the current license key.

## Getting started

1. Add the software app to your whop [here](https://whop.com/apps/app_jHH5YT7jHYQANi/install/).
2. Click configure in new software app you added
3. Add software name and download link

### Validating license keys via API

If the metadata on the license key is empty (for example, the key is not yet bound to a computer), Whop's API returns a success response with status code `201`. This means that the license key is valid and can be used to access the product. Internally, the API sets the metadata of the license key that was passed in the API call.

<CodeGroup title="Initially Setting the Metadata" tag="POST" label="memberships/:id/validate_license">
  ```js typescript theme={null}
  import axios from "axios";

  const setMetadata = async () => {
    try {
      const response = await axios.post(
        `https://api.whop.com/api/v2/memberships/${licenseKey}/validate_license`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
          body: {
            metadata: {
              key: "value", // This is initially setting the key/value pair if it doesn't already exist
            },
          },
        }
      );
      return response.data;
    } catch (error) {
      throw error;
    }
  };

  export default setMetadata;
  ```
</CodeGroup>

### Validating Matching Metadata

If the metadata on the license key is already set, and it matches the metadata that your software sends to Whop's API, then a success response is returned. This means that the license key is valid and can be used to access the product. Whop's API checks every key value pair in the metadata, ensuring that all fields contain the same data.

Below is example metadata that would return a successful response if you wanted to store the users hardware ID (to only allow one session per user):

**Client-side**

```json  theme={null}
{
  "hwid": "098H52ST479QE053V2"
}
```

**Server-side**

```json  theme={null}
{
  "hwid": "098H52ST479QE053V2"
}
```

### Validating Mismatched Metadata

If the metadata on the license key is set, but the metadata fields do not match the metadata that your software sends to Whop's API, a failure response with status code `400` is returned. This means that the license key is not valid and cannot be used to access the product.

Below is example metadata that would return this error.

**Client-side**

```json  theme={null}
{
  "hwid": "30294GLDKJ54F0SLKF"
}
```

**Server-side**

```json  theme={null}
{
  "hwid": "098H52ST479QE053V2"
}
```

### Removing Metadata

Users can reset their key's metadata by going to their orders - but to programmatically reset their license, you'll need to send a POST request to our [memberships endpoint](/api-reference/v2/memberships/update-a-membership) with an empty metadata body to reset it.

## Next steps

<Card title="Add apps to your whop" icon="chart-line" href="/manage-your-whop">
  Add apps to let your users learn how to use your software, chat with
  eachother, and even order merch.
</Card>


# Apps for businesses
Source: https://docs.whop.com/whop-apps/apps-for-businesses

Analytics tools, SaaS tools, and utilities that grow revenue or streamline operations.

Whether you’re teaching a skill, running a niche community, or selling premium insights, Whop apps can supercharge your offering and unlock brand-new revenue streams.

## Creator-curated data feeds

Position yourself as the go-to source for information your audience can’t live without.

### Financial markets

* **Crypto wallet tracker** – Monitor any wallet and get instant alerts. [Install](https://whop.com/apps/app_ckYOPoqaAoNXFJ/install/)
* **Trading indicators** – Sell custom technical analysis tools. [Install](https://whop.com/apps/app_N3S3muNGIbm3tQ/install/)
* **Stock watchlists** – Curated market data and analysis. [Install](https://whop.com/apps/app_EdGGJUAZcuE8Iw/install)

### Specialized tracking

* **Politician trade tracker** – Follow elected officials’ financial activity.
* **Sports analytics** – Real-time scores, injury reports, and insights.
* **Social media feeds** – Curated Twitter timelines and social analytics.

> **Why it works:** Information curation creates dependency—your insights become essential to your audience’s workflow, driving recurring revenue.

## Out-of-the-box software

Offer powerful tools without hiring a dev team—you simply add the app and start charging access.

### Creative tools

* **AI image generator** – Midjourney-style image creation. [Install](https://whop.com/apps/app_KHqcozSfEGNyhl/install/)
* **Video clipper** – Professional content editing. [Install](https://whop.com/apps/app_5qXDeIuPTLO9iY/install)
* **Thumbnail generator** – Automated design assistance. [Install](https://whop.com/apps/app_mu2adIOOInS7zx/install)

### Business tools

* **Merch App** – Sell your own merch. [Install](https://whop.com/apps/app_bLSc10GEFPDu4G/install)
* **E-mail marketing CRM** – Send emails to your users. [Install](https://whop.com/apps/app_M5lHJzva9vhvqU/install)
* **Prompt library** – Create and sell AI prompts. [Install](https://whop.com/apps/app_8RaFBXPJA0wk9H/install/)

### Utility apps

* **VPN access** – Sell privacy tools to your audience.
* **WhispGPT** – An AI chatbot trained on your own content. [Install](https://whop.com/apps/app_0gsATdFB1czIcI/install/)
* **Content rewards** – Pay members for social promotion based on performance. [Install](https://whop.com/apps/app_JsryI0fVLVpeYi/install/)

## Next steps

1. Open your whop dashboard → Apps → *Add app*.
2. Browse the business app category.
3. Activate the apps that align with your monetization strategy.

Mix and match apps to craft a differentiated product suite—every app you add can become a new revenue stream.


# Apps for communities
Source: https://docs.whop.com/whop-apps/apps-for-communities

Engage your audience with chat, courses, events, and social experiences

Building a thriving community requires more than great content—it takes engaging spaces where people can learn, share, and connect. Whop apps make it effortless by giving you plug-and-play experiences that feel tailor-made for your members.

## Foundational community apps

These core apps form the backbone of most online communities. Add one or all to craft the right mix for your audience.

### Community & education

* **Chat** – Real-time group discussions. [Install](https://whop.com/apps/app_xml5hbizmZPgUT/install)
* **Courses** – Multi-lesson learning with videos, quizzes, and progress tracking. [Install](https://whop.com/apps/app_0vPZThfBpAwLo/install)
* **Forums** – Threaded conversations for deeper topics. [Install](https://whop.com/apps/app_dYfm2IdXhDMquv/install)
* **Events** – Host live or in-person events and optionally charge per ticket. [Install](https://whop.com/apps/app_RnVNENx5vtP8Zp/install)

### Content & resources

* **Content** – Notion-style pages with rich media. [Install](https://whop.com/apps/app_mmjPLOxIgL1qxe/install)
* **Files** – Share templates, e-books, and digital assets. [Install](https://whop.com/apps/app_5UWRrs7haZZeiQ/install)
* **Calendar Bookings** – Allow members to book 1-on-1 time with you (paid or free). [Install](https://whop.com/apps/app_dC2dkRARmXE4qf/install)

<img src="https://mintlify.s3.us-west-1.amazonaws.com/whop/how-to-videos/addwhopapp720p30fps.gif" alt="Add app" />

## Social apps & games

Elevate engagement with interactive experiences that keep members coming back.

* **HQ Trivia-style games** – Run live game shows for your community.
* **Video networking** – Omegle-style random video chats between members.
* **Anonymous forums** – YikYak-style posts for candid conversation.
* **Community giveaways** – Platform-wide contests and rewards.

> **Tip:** Higher engagement means higher retention, which translates into more stable recurring revenue for your community.

## Next steps

1. Open your whop dashboard → Apps → *Add app*.
2. Browse the community app category.
3. Activate the apps that best fit your culture and goals.

Experiment with different combinations—every community is unique, and you can always add or remove apps based on member feedback.


# What are Whop apps?
Source: https://docs.whop.com/whop-apps/what-are-whop-apps

Apps are the building blocks for your business.

<iframe className="w-full aspect-video rounded-xl" width="100%" height="400" src="https://www.youtube.com/embed/kk-_0IKiFpo?si=j9etqP4QyO0dxtbd&modestbranding=1&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin " allowfullscreen />

Imagine being able to sell any software as your own product, complete with built-in payments, user management, and mobile access. That's exactly what Whop apps enable.

Use apps to give your customers new experiences or to level up internal operations for your business.

## What types of apps are there?

Whop apps fall into two broad themes:

* **Community-focused apps** – Chat, courses, live events, forums, and other social experiences that keep members engaged. See the full list in [Apps for communities](/apps/docs/whop-apps/apps-for-communities).
* **Business-focused apps** – Market data feeds, SaaS tools, and utilities that open new revenue streams or streamline operations. Explore examples in [Apps for businesses](/apps/docs/whop-apps/apps-for-businesses).

## Build your own app

If you can’t find the exact experience you need or want to build an app for tens of thousands of businesses on Whop, you can build an app.

<CardGroup cols={1}>
  <Card title="Start building your Whop app" icon="block-brick" href="/apps/introduction">
    Complete guide to authentication, payments, and UI components.
  </Card>
</CardGroup>


# Create app build
Source: https://docs.whop.com/api-reference/app-builds/create-app-build

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /app_builds
Creates a new app build

Required permissions:
 - `developer:manage_builds`



# List app builds
Source: https://docs.whop.com/api-reference/app-builds/list-app-builds

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /app_builds
Lists app builds for an app

Required permissions:
 - `developer:manage_builds`



# Promote app build
Source: https://docs.whop.com/api-reference/app-builds/promote-app-build

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /app_builds/{id}/promote
Promotes an app build to production

Required permissions:
 - `developer:manage_builds`



# Retrieve app build
Source: https://docs.whop.com/api-reference/app-builds/retrieve-app-build

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /app_builds/{id}
Retrieves an app build by ID

Required permissions:
 - `developer:manage_builds`



# Create app
Source: https://docs.whop.com/api-reference/apps/create-app

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /apps
Create a new App

Required permissions:
 - `developer:create_app`
 - `developer:manage_api_key`



# List apps
Source: https://docs.whop.com/api-reference/apps/list-apps

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /apps
Fetches a list of apps



# Retrieve app
Source: https://docs.whop.com/api-reference/apps/retrieve-app

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /apps/{id}
Retrieves an app by ID

Required permissions:
 - `developer:manage_api_key`



# Update app
Source: https://docs.whop.com/api-reference/apps/update-app

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /apps/{id}
Update an existing App

Required permissions:
 - `developer:update_app`
 - `developer:manage_api_key`



# List authorized users
Source: https://docs.whop.com/api-reference/authorized-users/list-authorized-users

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /authorized_users
Lists authorized users

Required permissions:
 - `company:authorized_user:read`
 - `member:email:read`



# Retrieve authorized user
Source: https://docs.whop.com/api-reference/authorized-users/retrieve-authorized-user

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /authorized_users/{id}
Retrieves a authorized user by ID

Required permissions:
 - `company:authorized_user:read`
 - `member:email:read`



# List chat channels
Source: https://docs.whop.com/api-reference/chat-channels/list-chat-channels

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /chat_channels
Lists chat channels inside a company

Required permissions:
 - `chat:read`



# Retrieve chat channel
Source: https://docs.whop.com/api-reference/chat-channels/retrieve-chat-channel

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /chat_channels/{id}
Retrieves a chat channel

Required permissions:
 - `chat:read`



# Update chat channel
Source: https://docs.whop.com/api-reference/chat-channels/update-chat-channel

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /chat_channels/{id}
Updates a chat channel

Required permissions:
 - `chat:moderate`



# Create checkout configuration
Source: https://docs.whop.com/api-reference/checkout-configurations/create-checkout-configuration

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /checkout_configurations
Creates a new checkout configuration

Required permissions:
 - `checkout_configuration:create`
 - `plan:create`
 - `access_pass:create`
 - `access_pass:update`



# List checkout configurations
Source: https://docs.whop.com/api-reference/checkout-configurations/list-checkout-configurations

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /checkout_configurations
Lists checkout configurations

Required permissions:
 - `checkout_configuration:basic:read`



# Retrieve checkout configuration
Source: https://docs.whop.com/api-reference/checkout-configurations/retrieve-checkout-configuration

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /checkout_configurations/{id}
Retrieves a checkout configuration by ID

Required permissions:
 - `checkout_configuration:basic:read`



# Retrieve company
Source: https://docs.whop.com/api-reference/companies/retrieve-company

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /companies/{id}
Retrieves an company by ID or its url route

Required permissions:
 - `company:basic:read`



# Create course chapter
Source: https://docs.whop.com/api-reference/course-chapters/create-course-chapter

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /course_chapters
Creates a new course chapter

Required permissions:
 - `courses:update`



# Delete course chapter
Source: https://docs.whop.com/api-reference/course-chapters/delete-course-chapter

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml delete /course_chapters/{id}
Deletes a course chapter

Required permissions:
 - `courses:update`



# List course chapters
Source: https://docs.whop.com/api-reference/course-chapters/list-course-chapters

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /course_chapters
Lists chapters for a course

Required permissions:
 - `courses:read`



# Retrieve course chapter
Source: https://docs.whop.com/api-reference/course-chapters/retrieve-course-chapter

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /course_chapters/{id}
Retrieves a course chapter by ID

Required permissions:
 - `courses:read`



# Update course chapter
Source: https://docs.whop.com/api-reference/course-chapters/update-course-chapter

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /course_chapters/{id}
Updates a course chapter

Required permissions:
 - `courses:update`



# Courselessoninteraction completed
Source: https://docs.whop.com/api-reference/course-lesson-interactions/courselessoninteraction-completed

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook course_lesson_interaction.completed
Sent when a course lesson interaction is completed

Required permissions:
 - `course_lesson_interaction:read`
 - `courses:read`



# List course lesson interactions
Source: https://docs.whop.com/api-reference/course-lesson-interactions/list-course-lesson-interactions

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /course_lesson_interactions
Lists course lesson interactions

Required permissions:
 - `course_lesson_interaction:read`
 - `courses:read`



# Retrieve course lesson interaction
Source: https://docs.whop.com/api-reference/course-lesson-interactions/retrieve-course-lesson-interaction

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /course_lesson_interactions/{id}
Retrieves a course lesson interaction by ID

Required permissions:
 - `course_lesson_interaction:read`
 - `courses:read`



# Create course lesson
Source: https://docs.whop.com/api-reference/course-lessons/create-course-lesson

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /course_lessons
Creates a new course lesson

Required permissions:
 - `courses:update`



# Delete course lesson
Source: https://docs.whop.com/api-reference/course-lessons/delete-course-lesson

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml delete /course_lessons/{id}
Deletes a course lesson

Required permissions:
 - `courses:update`



# List course lessons
Source: https://docs.whop.com/api-reference/course-lessons/list-course-lessons

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /course_lessons
Lists lessons for a course or chapter

Required permissions:
 - `courses:read`



# Retrieve course lesson
Source: https://docs.whop.com/api-reference/course-lessons/retrieve-course-lesson

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /course_lessons/{id}
Retrieves a course lesson by ID

Required permissions:
 - `courses:read`



# Update course lesson
Source: https://docs.whop.com/api-reference/course-lessons/update-course-lesson

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /course_lessons/{id}
Updates a course lesson

Required permissions:
 - `courses:update`



# Create course
Source: https://docs.whop.com/api-reference/courses/create-course

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /courses
Creates a new course module in an experience

Required permissions:
 - `courses:update`



# Delete course
Source: https://docs.whop.com/api-reference/courses/delete-course

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml delete /courses/{id}
Deletes a course

Required permissions:
 - `courses:update`



# List courses
Source: https://docs.whop.com/api-reference/courses/list-courses

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /courses
Lists courses for an experience or company

Required permissions:
 - `courses:read`



# Retrieve course
Source: https://docs.whop.com/api-reference/courses/retrieve-course

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /courses/{id}
Retrieves a course by ID

Required permissions:
 - `courses:read`



# Update course
Source: https://docs.whop.com/api-reference/courses/update-course

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /courses/{id}
Updates a course

Required permissions:
 - `courses:update`



# Approve entry
Source: https://docs.whop.com/api-reference/entries/approve-entry

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /entries/{id}/approve
Approve an entry

Required permissions:
 - `plan:waitlist:manage`



# Deny entry
Source: https://docs.whop.com/api-reference/entries/deny-entry

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /entries/{id}/deny
Deny an entry

Required permissions:
 - `plan:waitlist:manage`
 - `plan:basic:read`
 - `member:email:read`



# Entry approved
Source: https://docs.whop.com/api-reference/entries/entry-approved

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook entry.approved
Sent when a entry is approved

Required permissions:
 - `plan:waitlist:read`
 - `member:email:read`



# Entry created
Source: https://docs.whop.com/api-reference/entries/entry-created

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook entry.created
Sent when a entry is created

Required permissions:
 - `plan:waitlist:read`
 - `member:email:read`



# Entry deleted
Source: https://docs.whop.com/api-reference/entries/entry-deleted

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook entry.deleted
Sent when a entry is deleted

Required permissions:
 - `plan:waitlist:read`
 - `member:email:read`



# Entry denied
Source: https://docs.whop.com/api-reference/entries/entry-denied

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook entry.denied
Sent when a entry is denied

Required permissions:
 - `plan:waitlist:read`
 - `member:email:read`



# List entries
Source: https://docs.whop.com/api-reference/entries/list-entries

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /entries
Lists entries for a company

Required permissions:
 - `plan:waitlist:read`
 - `member:email:read`



# Retrieve entry
Source: https://docs.whop.com/api-reference/entries/retrieve-entry

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /entries/{id}
Retrieves an entry by ID

Required permissions:
 - `plan:waitlist:read`
 - `member:email:read`



# Attach experience
Source: https://docs.whop.com/api-reference/experiences/attach-experience

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /experiences/{id}/attach
Adds an experience to an product, making it accessible to the product's customers.

Required permissions:
 - `experience:attach`



# Create experience
Source: https://docs.whop.com/api-reference/experiences/create-experience

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /experiences
Required permissions:
 - `experience:create`



# Delete experience
Source: https://docs.whop.com/api-reference/experiences/delete-experience

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml delete /experiences/{id}
Required permissions:
 - `experience:delete`



# Detach experience
Source: https://docs.whop.com/api-reference/experiences/detach-experience

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /experiences/{id}/detach
Removes an experience from an product, making it inaccessible to the product's customers.

Required permissions:
 - `experience:detach`



# Duplicate experience
Source: https://docs.whop.com/api-reference/experiences/duplicate-experience

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /experiences/{id}/duplicate
Required permissions:
 - `experience:create`



# List experiences
Source: https://docs.whop.com/api-reference/experiences/list-experiences

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /experiences
Lists experiences for a company

Required permissions:
 - `experience:hidden_experience:read`



# Retrieve experience
Source: https://docs.whop.com/api-reference/experiences/retrieve-experience

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /experiences/{id}
Retrieves an experience by ID



# Update experience
Source: https://docs.whop.com/api-reference/experiences/update-experience

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /experiences/{id}
Required permissions:
 - `experience:update`



# Create forum post
Source: https://docs.whop.com/api-reference/forum-posts/create-forum-post

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /forum_posts
Create a new forum post

Required permissions:
 - `forum:post:create`



# List forum posts
Source: https://docs.whop.com/api-reference/forum-posts/list-forum-posts

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /forum_posts
Lists forum posts

Required permissions:
 - `forum:read`



# Retrieve forum post
Source: https://docs.whop.com/api-reference/forum-posts/retrieve-forum-post

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /forum_posts/{id}
Retrieves a forum post by ID

Required permissions:
 - `forum:read`



# Update forum post
Source: https://docs.whop.com/api-reference/forum-posts/update-forum-post

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /forum_posts/{id}
Update an existing forum post



# List forums
Source: https://docs.whop.com/api-reference/forums/list-forums

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /forums
Lists forums inside a company

Required permissions:
 - `forum:read`



# Retrieve forum
Source: https://docs.whop.com/api-reference/forums/retrieve-forum

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /forums/{id}
Retrieves a forum

Required permissions:
 - `forum:read`



# Update forum
Source: https://docs.whop.com/api-reference/forums/update-forum

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /forums/{id}
Updates a forum

Required permissions:
 - `forum:moderate`



# Invoice created
Source: https://docs.whop.com/api-reference/invoices/invoice-created

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook invoice.created
Sent when a invoice is created

Required permissions:
 - `invoice:basic:read`
 - `plan:basic:read`



# Invoice paid
Source: https://docs.whop.com/api-reference/invoices/invoice-paid

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook invoice.paid
Sent when a invoice is paid

Required permissions:
 - `invoice:basic:read`
 - `plan:basic:read`



# Invoice past due
Source: https://docs.whop.com/api-reference/invoices/invoice-past-due

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook invoice.past_due
Sent when a invoice is past due

Required permissions:
 - `invoice:basic:read`
 - `plan:basic:read`



# Invoice voided
Source: https://docs.whop.com/api-reference/invoices/invoice-voided

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook invoice.voided
Sent when a invoice is voided

Required permissions:
 - `invoice:basic:read`
 - `plan:basic:read`



# Retrieve ledger account
Source: https://docs.whop.com/api-reference/ledger-accounts/retrieve-ledger-account

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /ledger_accounts/{id}
Retrieves a ledger account by ID

Required permissions:
 - `company:balance:read`



# List members
Source: https://docs.whop.com/api-reference/members/list-members

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /members
List the members of a company

Required permissions:
 - `member:basic:read`
 - `member:email:read`
 - `member:phone:read`



# Retrieve member
Source: https://docs.whop.com/api-reference/members/retrieve-member

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /members/{id}
Retrieves a member of a company by ID

Required permissions:
 - `member:basic:read`
 - `member:email:read`
 - `member:phone:read`



# Cancel membership
Source: https://docs.whop.com/api-reference/memberships/cancel-membership

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /memberships/{id}/cancel
Cancels a membership either immediately or at the end of the current billing period

Required permissions:
 - `member:manage`
 - `member:basic:read`



# List memberships
Source: https://docs.whop.com/api-reference/memberships/list-memberships

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /memberships
Lists memberships

Required permissions:
 - `member:basic:read`



# Membership activated
Source: https://docs.whop.com/api-reference/memberships/membership-activated

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook membership.activated
Sent when a membership is activated

Required permissions:
 - `member:basic:read`



# Membership deactivated
Source: https://docs.whop.com/api-reference/memberships/membership-deactivated

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml webhook membership.deactivated
Sent when a membership is deactivated

Required permissions:
 - `member:basic:read`



# Pause membership
Source: https://docs.whop.com/api-reference/memberships/pause-membership

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /memberships/{id}/pause
Pauses a membership's payments

Required permissions:
 - `member:manage`
 - `member:basic:read`



# Resume membership
Source: https://docs.whop.com/api-reference/memberships/resume-membership

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /memberships/{id}/resume
Resumes a membership's payments

Required permissions:
 - `member:manage`
 - `member:basic:read`



# Retrieve membership
Source: https://docs.whop.com/api-reference/memberships/retrieve-membership

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /memberships/{id}
Retrieves a membership by ID or license key

Required permissions:
 - `member:basic:read`



# Update membership
Source: https://docs.whop.com/api-reference/memberships/update-membership

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /memberships/{id}
Update a membership

Required permissions:
 - `member:manage`
 - `member:basic:read`



# Create message
Source: https://docs.whop.com/api-reference/messages/create-message

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /messages
Creates a new message

Required permissions:
 - `chat:message:create`



# List messages
Source: https://docs.whop.com/api-reference/messages/list-messages

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /messages
Lists messages inside a channel

Required permissions:
 - `chat:read`



# Retrieve message
Source: https://docs.whop.com/api-reference/messages/retrieve-message

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /messages/{id}
Retrieves a message

Required permissions:
 - `chat:read`



# Update message
Source: https://docs.whop.com/api-reference/messages/update-message

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml patch /messages/{id}
Updates an existing message



# Create promo code
Source: https://docs.whop.com/api-reference/promo-codes/create-promo-code

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /promo_codes
Create a new promo code for a product or plan

Required permissions:
 - `promo_code:create`
 - `access_pass:basic:read`



# Delete promo code
Source: https://docs.whop.com/api-reference/promo-codes/delete-promo-code

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml delete /promo_codes/{id}
Archive a promo code, preventing further use

Required permissions:
 - `promo_code:delete`



# List promo codes
Source: https://docs.whop.com/api-reference/promo-codes/list-promo-codes

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /promo_codes
Lists promo codes for a company

Required permissions:
 - `promo_code:basic:read`
 - `access_pass:basic:read`



# Retrieve promo code
Source: https://docs.whop.com/api-reference/promo-codes/retrieve-promo-code

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /promo_codes/{id}
Retrieves a promo code by ID

Required permissions:
 - `promo_code:basic:read`
 - `access_pass:basic:read`



# Create reaction
Source: https://docs.whop.com/api-reference/reactions/create-reaction

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /reactions
Creates a new reaction

Required permissions:
 - `chat:read`



# List reactions
Source: https://docs.whop.com/api-reference/reactions/list-reactions

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /reactions
Lists reactions for a post or a message

Required permissions:
 - `chat:read`



# Retrieve reaction
Source: https://docs.whop.com/api-reference/reactions/retrieve-reaction

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /reactions/{id}
Retrieves a reaction

Required permissions:
 - `chat:read`



# Create shipment
Source: https://docs.whop.com/api-reference/shipments/create-shipment

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /shipments
Creates a new shipment

Required permissions:
 - `shipment:create`
 - `payment:basic:read`



# List shipments
Source: https://docs.whop.com/api-reference/shipments/list-shipments

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /shipments
Lists shipments for a payment

Required permissions:
 - `shipment:basic:read`
 - `payment:basic:read`



# Retrieve shipment
Source: https://docs.whop.com/api-reference/shipments/retrieve-shipment

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /shipments/{id}
Retrieves a shipment by ID

Required permissions:
 - `shipment:basic:read`
 - `payment:basic:read`



# Create support channel
Source: https://docs.whop.com/api-reference/support-channels/create-support-channel

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /support_channels
Create a new support channel for a user in a company. If one already exists, it will return the existing one.

Required permissions:
 - `support_chat:create`



# List support channels
Source: https://docs.whop.com/api-reference/support-channels/list-support-channels

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /support_channels
Lists chat channels inside a company

Required permissions:
 - `support_chat:read`



# Retrieve support channel
Source: https://docs.whop.com/api-reference/support-channels/retrieve-support-channel

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /support_channels/{id}
Retrieves a support channel

Required permissions:
 - `support_chat:read`



# Create transfer
Source: https://docs.whop.com/api-reference/transfers/create-transfer

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml post /transfers
Creates a new transfer between ledger accounts

Required permissions:
 - `payout:transfer_funds`



# List transfers
Source: https://docs.whop.com/api-reference/transfers/list-transfers

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /transfers
Lists transfers

Required permissions:
 - `payout:transfer:read`



# Retrieve transfer
Source: https://docs.whop.com/api-reference/transfers/retrieve-transfer

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /transfers/{id}
Retrieves a transfer by ID

Required permissions:
 - `payout:transfer:read`



# Check access
Source: https://docs.whop.com/api-reference/users/check-access

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /users/{id}/access/{resource_id}
Check if a user has access (and their access level) to a resource



# Retrieve user
Source: https://docs.whop.com/api-reference/users/retrieve-user

https://app.stainless.com/api/spec/documented/whopsdk/openapi.documented.yml get /users/{id}
Retrieves a user by ID or username


